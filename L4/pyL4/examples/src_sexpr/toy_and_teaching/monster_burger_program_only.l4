; See monster_burger.l4 for version of this with more comments and an NLG mockup.


(Roles Challenger Restaurant)
(TimeUnit m)

(SortDefinitions
	($ := (Dimensioned NonnegReal "$"))
	(Pos$ := (Dimensioned PosReal "$"))
)

(StateVars
	(writes≤1 challenge_endlimit_timestamp : TimeDelta )
	(amount_owing                      		: $ = 0)
	(amount_paid                       		: $ = 0)
)

(ContractParams
	(MB_PRICE                     : Pos$    = 50)
	; (TIME_TO_EAT_BURGER           : PosTimeDelta = 30m)
	; (MAX_SERVE_DELAY              : PosTimeDelta = 20m)
	; (MAX_CLAIM_VERIFICATION_DELAY : PosTimeDelta = 10m)
	; (MAX_REFUND_DELAY             : PosTimeDelta = 10m)
)

(Definitions
	(TIME_TO_EAT_BURGER           = 60m)
	(MAX_SERVE_DELAY              = 15m)
	(MAX_CLAIM_VERIFICATION_DELAY = 10m)
	(MAX_REFUND_DELAY             = 5m)
	(CONSECUTIVE_FINISH_CLAIM_BUFFER = 5m)
)

(ProseContract
	(P1 'A monster burger (MB) challenge is between a customer and the Restaurant.')
	(P2 'A customer can only enter one MB challenge per visit to the Restaurant.')
	(P3 'If the customer finishes the MB within {TIME_TO_EAT_BURGER} of being served, the burger is free. Otherwise, they owe {MB_PRICE} for the burger.')
	(P4 'When a customer orders a MB, the restaurant guarantees they will serve the burger within {MAX_SERVE_DELAY}. Otherwise, the customer is not obligated to pay for the burger (but the restaurant may still serve the burger late).')
	(P5 'The customer can claim to be finished early, upon which the restaurant must within ({MAX_CLAIM_VERIFICATION_DELAY}, or by the end of the {TIME_TO_EAT_BURGER} challenge period -- whichever comes first) confirm or reject the claim. If no such "early finish" claim is made, the restaurant checks after {TIME_TO_EAT_BURGER} from serving time')
	(P6 'Any other food or drink that the customer wishes to consume while doing the MB challenge must be ordered on a separate bill.')
)

(FormalContract
	"Monster Burger"
	(StartSituation MonsterBurgerUncooked)

	(Situation MonsterBurgerUncooked
		(Challenger may RequestCookMB)
	)

	(Action RequestCookMB
	    ;  LANG note: static checker directive, which tells the static checker to prove that this action occurs exactly once in any execution that ends in Fulfilled
		(traversals == 1)
		(AllowedSubjects Challenger)

		(StateTransform
			(amount_owing' = MB_PRICE)
		)

		(FollowingSituation
			(visits == 1) ; LANG note: Similar to (traversal == 1) but for Situations.
            ; (timeConstraintsPartitionFuture
	            (Restaurant may ServeMB (when next_event_td < (MAX_SERVE_DELAY + last_situation_td)))
	            (EnterPromptServeGuaranteeViolated (when next_event_td ≥ (MAX_SERVE_DELAY + last_situation_td)))
            ; )
		)
	)


	(Action ServeMB
		(TransitionsTo EatingMB)
		(0 ≤ traversals ≤ 1)
		(AllowedSubjects Restaurant)

		(StateTransform
			(challenge_endlimit_timestamp' = (TIME_TO_EAT_BURGER + last_event_td))
		)
	)


	(Action EnterPromptServeGuaranteeViolated
		(TransitionsTo Fulfilled)
		(0 ≤ traversals ≤ 1)
		(AllowedSubjects Env)
		(StateTransform
			(amount_owing' = 0)
		)
	)

	(Action EnterEatingMB
		; (0 ≤ traversals ≤ nonconstant) ; LANG note: nonconstant means can't be bounded by any numeral
		(0 ≤ traversals ≤ (2 * (TIME_TO_EAT_BURGER / CONSECUTIVE_FINISH_CLAIM_BUFFER))) ; LANG note: nonconstant means can't be bounded by any numeral
		(AllowedSubjects Env)
	)
	(Situation EatingMB
		(0 ≤ visits ≤ 20)


        ; (timeConstraintsPartitionFuture ; LANG note: `timeConstraintsPartitionFuture` will tell the static checker to verify that the deadline expressions partition the future.
            (Challenger may AnnounceMBFinished (when
            	and ((last_situation_td + CONSECUTIVE_FINISH_CLAIM_BUFFER) < next_event_td)
            		(next_event_td < challenge_endlimit_timestamp)))
            ;(Restaurant should (CheckCompletionClaim) (nonstrictly-after-td-and-within challenge_endlimit_timestamp MAX_CLAIM_VERIFICATION_DELAY))
            (Restaurant may CheckCompletionClaim (when (
            	(challenge_endlimit_timestamp ≤ next_event_td)
            and (next_event_td ≤ (MAX_CLAIM_VERIFICATION_DELAY + challenge_endlimit_timestamp))
            )))
            (TimeToCheckCompletionExpires (when next_event_td > (MAX_CLAIM_VERIFICATION_DELAY + challenge_endlimit_timestamp)))
        ; )
	)

	(Action AnnounceMBFinished
		(0 ≤ traversals ≤ nonconstant)
		(AllowedSubjects Challenger)

		(FollowingSituation
			(0 ≤ visits ≤ nonconstant)
            ; (timeConstraintsPartitionFuture
	            (Restaurant may CheckCompletionClaim (when next_event_td < (last_situation_td + MAX_CLAIM_VERIFICATION_DELAY)))
	            (TimeToCheckCompletionExpires (when next_event_td ≥ (MAX_CLAIM_VERIFICATION_DELAY + last_situation_td)))
            ; )
		)
	)

	(Action TimeToCheckCompletionExpires
		(TransitionsTo Fulfilled)
		(0 ≤ traversals ≤ 1)
		(AllowedSubjects Env)
		(StateTransform
			(amount_owing' = 0)
		)
	)

	(Action CheckCompletionClaim
		(0 ≤ traversals ≤ nonconstant)
		(AllowedSubjects Restaurant)

		(FollowingSituation
			(0 ≤ visits ≤ nonconstant)
		    (Restaurant may VerifyCompletionClaim immediately)
		    (Restaurant may RejectCompletionClaim immediately)
		    (Breach_Restaurant (when next_event_td ≥ (last_situation_td + 1m) ))
		)
	)


	(Action RejectCompletionClaim
		(0 ≤ traversals ≤ nonconstant)
		(AllowedSubjects Restaurant)

		(FollowingSituation
	        (0 ≤ visits ≤ nonconstant)

        	; LANG note: `guardsDisjointExhaustive` will tell the static checker to verify that it is
            ; always the case that exactly one of the tests of the children conditionals is true.
            ; (guardsDisjointExhaustive
            	; I think we should encourage this style of order-insensitive conditionals.
	            (if (last_situation_td < challenge_endlimit_timestamp)
	                (EnterEatingMB immediately)
	            )
	            (if (last_situation_td ≥ challenge_endlimit_timestamp)
	                (Challenger must PayForMB immediately)
	            )
            ; )
		)
	)

	(Action PayForMB
		(TransitionsTo Fulfilled)
		(0 ≤ traversals ≤ 1)
		(AllowedSubjects Challenger)

		(StateTransform
			(amount_paid' = amount_owing)
			(amount_owing' = 0)
		)
	)


	(Action VerifyCompletionClaim
		(TransitionsTo Fulfilled)
		(0 ≤ traversals ≤ 1)
		(AllowedSubjects Restaurant)

		(StateTransform
			(amount_owing' = 0)
		)
	)



)

; don't use these options for examples in the repo. a canonical name will be chosen.
; (DotFileName 'monster_burger.dot')
; (ImgFileName 'monster_burger.png')