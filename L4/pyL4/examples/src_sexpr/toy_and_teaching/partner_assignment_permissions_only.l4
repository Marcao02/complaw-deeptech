; Alice and Bob sign a contract to do an assignment as a team. The assignment has two problems,
; ProbA and ProbB. It's Alice's responsibility to get ProbA done, and Bob's responsibility to
; get ProbB done, but either, if they wish, may do the work of their partner (we're assuming that
; problem solutions can be checked automatically, so comparing different solutions isn't necessary).
; The assignment is due on DUE_TD, and the partners agree that either can submit the assignment
; early if it's finished, and that they are jointly responsible for submitting it by DUE_TD.

(ContractParams
	(DUE_TD : TimeDelta = 40d)
)
(TimeUnit D)
(StateVars
	(probAsolved : Bool = false)
	(probBsolved : Bool = false)
)
(Roles Alice Bob)


(FormalContract
	"partner assignment demonstrating relievable obligations via permissions"
	(StartSituation WorkingOnAssignment)
	(Situation WorkingOnAssignment

		(if (not probAsolved)
			(Alice may SolveProbA (within DUE_TD))
			; (within DUE_TD) equivalent to (when next_event_td â‰¤ DUE_TD), where
			; next_even_td is the TimeDelta of the next event.
			(Bob   may SolveProbA (within DUE_TD))
		)
		(if (not probBsolved)
			(Bob   may SolveProbB (within DUE_TD))
			(Alice may SolveProbB (within DUE_TD))
		)
		; later can abbreviate those:
		; ({Alice Bob} may {SolveProbA SolveProbB} (within DUE_TD))

		(if (probAsolved and probBsolved)
			(Alice may Submit (within DUE_TD))
			(Bob may Submit (within DUE_TD))
		)

		(if ((not probAsolved) and (not probBsolved))
			(Breach_Alice_Bob (at (DUE_TD + 1)))
		)
		(if ((not probAsolved) and probBsolved)
			(Breach_Alice (at (DUE_TD + 1)))
		)
		(if (probAsolved and (not probBsolved))
			(Breach_Bob (at (DUE_TD + 1)))
		)
	)

	(Action SolveProbA (TransitionsTo WorkingOnAssignment) (AllowedRoles Alice Bob)
		(StateTransform
			(probAsolved' = true)
		)
	)

	(Action SolveProbB (TransitionsTo WorkingOnAssignment) (AllowedRoles Alice Bob)
		(StateTransform
			(probBsolved' = true)
		)
	)

	(Action Submit (TransitionsTo Fulfilled) (AllowedRoles Alice Bob))
)