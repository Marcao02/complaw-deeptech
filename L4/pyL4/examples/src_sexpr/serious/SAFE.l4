(Roles Investor Company)

(TimeUnit d)
(DefaultActionTimeLimit 2d)

(SortDefinitions
	(Δ$ := (Dimensioned Real "$"))
	($ := (Dimensioned NonnegReal "$"))
	(Pos$ := (Dimensioned PosReal "$"))
	(ShareCnt = (Dimensioned Nat "shares"))
	(ΔShareCnt = (Dimensioned Int "shares"))
	(PosShareCnt = (Dimensioned PosInt "shares"))
	(SharePrice = (Ratio $ PosShareCnt))
	(PosSharePrice = (Ratio Pos$ PosShareCnt))
)

(BlockMacro set_conversion_price (company_capitalization company_valuation)
	(ifflag HAS_CAP (
		(ifflag HAS_DISCOUNT (
			(writeout undiscounted_standard_preferred_stock_price : SharePrice = (company_valuation / company_capitalization))
			(writeout cap_price : SharePrice = (VALUATION_CAP / company_capitalization))
			(writeout discount_price : SharePrice = (undiscounted_standard_preferred_stock_price * DISCOUNT_RATE))
			(conversion_price' = (min cap_price discount_price))
		)
		else (
			(writeout undiscounted_standard_preferred_stock_price : SharePrice = (company_valuation / company_capitalization))
			(writeout cap_price : SharePrice = (VALUATION_CAP / company_capitalization))
			(conversion_price' = (min cap_price undiscounted_standard_preferred_stock_price))
		))
	)
	else (
		(ifflag HAS_DISCOUNT (
			(writeout undiscounted_standard_preferred_stock_price : SharePrice = (company_valuation / company_capitalization))
			(conversion_price' = (undiscounted_standard_preferred_stock_price * DISCOUNT_RATE))
		)
		else (
			(conversion_price' = (company_valuation / company_capitalization))
		))
	))
)
; (Macro set_conversion_price (company_capitalization company_valuation)
; 	(ifflag HAS_CAP (
; 		(ifflag HAS_DISCOUNT (
; 			(if true (
; 				(writeout undiscounted_standard_preferred_stock_price : SharePrice = (company_valuation / company_capitalization))
; 				(writeout cap_price : SharePrice = (VALUATION_CAP / company_capitalization))
; 				(writeout discount_price : SharePrice = (undiscounted_standard_preferred_stock_price * DISCOUNT_RATE))
; 				(conversion_price' = (min cap_price discount_price))
; 			) else ())
; 		)
; 		else (
; 			(if true (
; 			(writeout undiscounted_standard_preferred_stock_price : SharePrice = (company_valuation / company_capitalization))
; 			(writeout cap_price : SharePrice = (VALUATION_CAP / company_capitalization))
; 			(conversion_price' = (min cap_price undiscounted_standard_preferred_stock_price))
; 			) else ())
; 		))
; 	)
; 	else (
; 		(ifflag HAS_DISCOUNT (
; 			(if true (
; 			(writeout undiscounted_standard_preferred_stock_price : SharePrice = (company_valuation / company_capitalization))
; 			(conversion_price' = (undiscounted_standard_preferred_stock_price * DISCOUNT_RATE))
; 			) else ())
; 		)
; 		else (
; 			(if true (
; 			(conversion_price' = (company_valuation / company_capitalization))
; 			) else ())
; 		))
; 	))
; )



; (ifflag HAS_CAP (
; 	(ifflag HAS_DISCOUNT (
; 		(writeout undiscounted_standard_preferred_stock_price : SharePrice = (company_valuation / company_capitalization))
; 		(writeout cap_price : SharePrice = (VALUATION_CAP / company_capitalization))
; 		(writeout discount_price : SharePrice = (undiscounted_standard_preferred_stock_price * DISCOUNT_RATE))
; 		(local conversion_price_temp : Pos$ = (min cap_price discount_price))
; 		(conversion_price' = conversion_price_temp)
; 	)
; 	else (
; 		(writeout undiscounted_standard_preferred_stock_price : SharePrice = (company_valuation / company_capitalization))
; 		(writeout cap_price : SharePrice = (VALUATION_CAP / company_capitalization))
; 		(local conversion_price : Pos$ = (min cap_price undiscounted_standard_preferred_stock_price))
; 		(conversion_price' = conversion_price_temp)
; 	))
; )
; else (
; 	(ifflag HAS_DISCOUNT (
; 		(writeout undiscounted_standard_preferred_stock_price : SharePrice = (company_valuation / company_capitalization))
; 		(local conversion_price : Pos$ = (undiscounted_standard_preferred_stock_price * DISCOUNT_RATE))
; 		(conversion_price' = conversion_price_temp)
; 	)
; 	else (
; 		(local conversion_price : Pos$ = (company_valuation / company_capitalization))
; 		(conversion_price' = conversion_price_temp)
; 	))
; ))



(NLGNames
	(PURCHASE_AMOUNT "Purchase Amount")
	(DISCOUNT_RATE "Discount Rate")
	(VALUATION_CAP "Valuation Cap")
	(investor_Common_Stock_delta "Change in Investor's Common Stock")
	(investor_SAFE_Stock_delta "Change in Investor's SAFE Stock")
	(investor_cash_delta "Change in Investor's Cash" )
	(unconverted_investment "Unconverted Investment")
	(conversion_price "Conversion Price")
	(company_cash_delta "Change in Company's Cash")
	(liq_cashout "Liquidity Cashout")
	(dis_cashout "Dissolution Cashout")
	(undiscounted_standard_preferred_stock_price "Undiscounted Preferred Stock Price")
	(cap_price "Cap Price")
	(discount_price "Discount Price")
	(investor_percent_of_cashout_investor_investments "Investor Cashout %")
	(investor_percent_of_dissolving_investor_investments "Investor Cashout %")
	(company_capitalization "Capitalization")
	(premoney_valuation "Valuation")
	(company_cash_at_liquidity_event "Total Cash Reserves")
	(company_cash_at_dissolution_event "Total Cash Reserves")
	(purchase_amount_reduction "Purchase Amount Reduction")
	(liquidity_capitalization "Liquidity Capitalization")
	(company_valuation "Valuation")
	(total_investments_of_cashout_investors "Total Investments of Cashout Investors")
	(reduction_needed_to_qualify_as_usa_tax_free_reorg "Reduction Needed to Qualify as USA Tax-free Reorganization")

	(?total_investments_of_cashout_investors "Total Investments of Cashout Investors")
)



(ContractParams
	(PURCHASE_AMOUNT : Pos$ = 100000)
	(ifflag HAS_DISCOUNT (
		(DISCOUNT_RATE : "Fraction(0,1]" = .9)
	))
	(ifflag HAS_CAP (
		(VALUATION_CAP : Pos$ = 100000000)
	))
)


(StateVars
	(writes≤1 investor_Common_Stock_delta : ΔShareCnt = 0)
	(writes≤1 investor_SAFE_Stock_delta : ΔShareCnt = 0)
	(writes≤1 investor_cash_delta : Δ$ = 0 )

	; in a later version of L4, the type of the following variable might be (Uninitialized $),
	; which behaves just like $ after the first write, and causes a type error if there's a read before the first write.
	(unconverted_investment : $ = 0)

	; this is wrong, but testing:
	(writes≤1 conversion_price : PosSharePrice)

	(company_cash_delta : $ = 0)

	; for Liquidity and Dissolution
	(writes≤1 company_cash_available_for_payout : $)

	; for Liquidity
	(writes≤1 liq_cashout : $ = 0) ; this needs to either be initialized to 0, or else changed to an Optional and some of the code rewritten a bit.

	; for Dissolution
	(writes≤1 dis_cashout : $)
)
; recall bug in a subcase of the case when the company cannot fully pay out all the investors who want to cash out.
(Invariants
	(liq_cashout ≤ unconverted_investment)
	(dis_cashout ≤ PURCHASE_AMOUNT)
)


(FormalContract "SAFE"
	; apply to all actions and states:
	; 	at-most-once ; static checker should verify that every action and state occurs at most once in any trace

	(StartSituation Signed)

	(Situation Signed
		(nlg "Investment Agreement Signed")
		(Investor may TransferInvestmentCash)
	)
	(Action TransferInvestmentCash (TransitionsTo InvestmentWaitingToConvert) (AllowedSubjects Investor)
		(nlg "Transfer Investment to Company")
		(StateTransform
			(investor_cash_delta' = (investor_cash_delta - PURCHASE_AMOUNT))
			(company_cash_delta' = (company_cash_delta + PURCHASE_AMOUNT))
			(unconverted_investment' = PURCHASE_AMOUNT)
		)
	)

	(Situation InvestmentWaitingToConvert
		(nlg "Investment Waiting to Convert")
		(Company may (CommitToEquityFinancing))
		(Company may (CommitToIPO ?1 ?2))
		(Company may (CommitToChangeOfControl ?1 ?2 ?total_investments_of_cashout_investors ?4)
						(where
							(?total_investments_of_cashout_investors ≥ PURCHASE_AMOUNT)


							))
		(Company may CommitToDissolution)
	)

	; ----------------- Equity Financing Event -------------------
	; NOTE: PRA abbreviates pro rata agreement

	(Action CommitToEquityFinancing (AllowedSubjects Company)
		(nlg "Initiate an Equity Financing Event")
		(nlgsection "Equity Events")
		(FollowingSituation
			(Company may DeliverTransactionDocsWithPRA)
			(Company may DeliverTransactionDocsWithoutPRA)
			(Breach_Company (after_split 1d))
		)
	)

	(Action DeliverTransactionDocsWithPRA (AllowedSubjects Company) (TransitionsTo AfterPRASigned)
		(nlg "Deliver Transaction Docs With Pro Rata Rights Agreement (PRA)")
		(nlgsection "Equity Events")
	)

	(Action DeliverTransactionDocsWithoutPRA (AllowedSubjects Company)
		(nlg "Deliver Transaction Docs (PRA to follow)")
		(nlgsection "Equity Events")
		(FollowingSituation
			(Company must SendProRataRightsAgreementForSigning)
		)
	)

	(Action SendProRataRightsAgreementForSigning  (AllowedSubjects Company)
		(nlg "Send PRA for Signing")
		(nlgsection "Equity Events")
		(FollowingSituation
			; TODO: Obviously this shouldn't be a *must*, since they ought to be
			; able to send it back with proposed amendments/corrections.
			; That seems like something we should have a reusable module for.
			(Investor must SignPRA)
		)
	)

	(Action SignPRA (AllowedSubjects Investor) (TransitionsTo AfterPRASigned)
		(nlg "Sign PRA")
		(nlgsection "Equity Events")
	)

	(Situation AfterPRASigned
		(nlg "After PRA Signed")
		(nlgsection "Equity Events")
		(Company must (IssueSAFEPreferredStock ?1 ?2))
	)

	(Action (IssueSAFEPreferredStock
				(company_capitalization : PosShareCnt)
				(company_valuation : Pos$) ) (AllowedSubjects Company)
		(nlg "Issue SAFE Preferred Stock")
		(nlgsection "Equity Events")
		(StateTransform
			(set_conversion_price (company_capitalization company_valuation))
			(investor_SAFE_Stock_delta' = (investor_SAFE_Stock_delta + (PURCHASE_AMOUNT ceil/ conversion_price')))
		)
		(FollowingSituation
			(Company must DoEquityFinancing)
		)
	)

	(Action DoEquityFinancing (AllowedSubjects Company) (TransitionsTo Fulfilled)
		(nlg "Execute Equity Financing")
		(nlgsection "Equity Events")
	)


	; ----------------- Liquidity Event -------------------

	(Situation InvestorToChooseMethodOfPayment
		(nlg "Investor to Choose Method of Payment")
		(nlgsection "Liquidity Events")
		; 1 week is totally made up by Dustin!
		(Investor may ChooseCashPayment [before_split 1w])
		(Investor may ChooseStockPayment [before_split 1w])
		(AutoChooseStockPayment [at_split 1w])
	)

	(Action (CommitToIPO (company_capitalization : PosShareCnt)
						 (company_valuation : Pos$)
			) (AllowedSubjects Company)  (TransitionsTo InvestorToChooseMethodOfPayment)
		(nlg "Initiate an IPO Liquidity Event")
		(nlgsection "Liquidity Events")
		(StateTransform
			(set_conversion_price (company_capitalization company_valuation))
		)
	)

	(Action (CommitToChangeOfControl (company_capitalization : PosShareCnt)
								     (company_valuation : Pos$)
								     (total_investments_of_cashout_investors: Pos$)
								     (reduction_needed_to_qualify_as_usa_tax_free_reorg : $)

			) (AllowedSubjects Company) (TransitionsTo InvestorToChooseMethodOfPayment)
		(nlg "Initiate a Change-of-Control Liquidity Event")
		(nlgsection "Liquidity Events")
		(StateTransform
			(set_conversion_price (company_capitalization company_valuation))
			(local investor_percent_of_cashout_investor_investments : "Fraction(0,1]" = (check "Fraction(0,1]" (PURCHASE_AMOUNT / total_investments_of_cashout_investors)))
		 	(local purchase_amount_reduction : $ = (investor_percent_of_cashout_investor_investments * reduction_needed_to_qualify_as_usa_tax_free_reorg))
			(investor_Common_Stock_delta' += (purchase_amount_reduction ceil/ conversion_price'))
			(unconverted_investment' = (check Pos$ (unconverted_investment - purchase_amount_reduction)))
			(company_cash_delta' = (check $ (company_cash_delta - purchase_amount_reduction)))
		)
	)

	(Action AutoChooseStockPayment (AllowedSubjects Company)
		(nlg "Stock Payment Option Chosen by Default")
		(nlgsection "Liquidity Events")
		(FollowingSituation
			; what this translates to depends on if DefaultActionTimeLimit is defined
			(Company must TransferCommonStock)
		)
	)

	(Action ChooseStockPayment (AllowedSubjects Investor)
		(nlg "Choose Payment in Common Stock")
		(nlgsection "Liquidity Events")
		(FollowingSituation
			(Company must TransferCommonStock)
		)
	)

	(Action TransferCommonStock (AllowedSubjects Company)
		(nlg "Transfer Common Stock")
		(nlgsection "Liquidity Events")
		(StateTransform
			(investor_Common_Stock_delta' += ((check $ (unconverted_investment - liq_cashout)) ceil/ conversion_price))
		)
		(FollowingSituation
			(Company must DoLiquidityEvent)
		)
	)

	(Action ChooseCashPayment (AllowedSubjects Investor)
		(nlg "Choose Payment in Cash")
		(nlgsection "Liquidity Events")
		(FollowingSituation
			(Company must (TransferCash_L ?1 ?2))
		)
	)

	(Action (TransferCash_L (company_cash_at_liquidity_event : $)
						    (total_investments_of_cashout_investors : Pos$)) (AllowedSubjects Company)
		(nlg "Transfer Cash (liquidity)")
		(nlgsection "Liquidity Events")
		(StateTransform
			(local investor_percent_of_cashout_investor_investments : "Fraction(0,1]" = (check "Fraction(0,1]" (PURCHASE_AMOUNT / total_investments_of_cashout_investors)))
			(liq_cashout' = (min unconverted_investment
								 (company_cash_at_liquidity_event * investor_percent_of_cashout_investor_investments))
			)
			(investor_cash_delta' += liq_cashout')
			(unconverted_investment' = (check $ (unconverted_investment - liq_cashout)))
			(company_cash_delta' = (check $ (company_cash_delta - liq_cashout')))
		)

		(FollowingSituation
			(if (liq_cashout < unconverted_investment)
				(Company must TransferCommonStock)
			)

			(if (liq_cashout == unconverted_investment)
				(Company must DoLiquidityEvent)
			)
		)
	)

	(Action DoLiquidityEvent (AllowedSubjects Company) (TransitionsTo Fulfilled)
		(nlg "Execute Liquidity Event")
		(nlgsection "Liquidity Events")
	)


	; ----------------- Dissolution Event -------------------

	(Action CommitToDissolution (AllowedSubjects Company)
		(nlg "Initiate a Dissolution Event")
		(nlgsection "Dissolution Events")
		(FollowingSituation
			(Company must
				(TransferCash_D ?company_cash_at_dissolution_event
								?investor_percent_of_dissolving_investor_investments)
			)
		)
	)


	(Action (TransferCash_D (company_cash_at_dissolution_event : $)
						    (investor_percent_of_dissolving_investor_investments : "Fraction(0,1]"))
		(AllowedSubjects Company)
		(nlg "Transfer Cash (dissolution)")
		(nlgsection "Dissolution Events")
		(StateTransform
			(dis_cashout' = (min
							PURCHASE_AMOUNT
							(company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments))
			)
			(investor_cash_delta' = dis_cashout')
		)

		(FollowingSituation
			(if (dis_cashout < PURCHASE_AMOUNT)
				(Company must (TransferAssets ?1 ?2))  )
			(if (dis_cashout == PURCHASE_AMOUNT)
				(Company must Dissolve)     )
		)
	)

	(Action (TransferAssets (company_capitalization : PosShareCnt)
							(company_valuation : Pos$) )
		(nlg "Transfer Assets")
		(nlgsection "Dissolution Events")
		(AllowedSubjects Company)
		(StateTransform
			(set_conversion_price (company_capitalization company_valuation))
			(investor_Common_Stock_delta' += ((check $ (PURCHASE_AMOUNT - dis_cashout)) ceil/ conversion_price'))
		)
		(FollowingSituation
			(Company must Dissolve)
		)
	)


	(Action Dissolve (AllowedSubjects Company) (TransitionsTo Fulfilled)
		(nlg "Execute Dissolution")
		(nlgsection "Dissolution Events")
	)

	(Situation Fulfilled)
)


; (EndOfTraceClaims
; If the contract ends with the investor having no change in stock and investor_cash_delta < 0, then there must have been a dissolution event.
; 	(((investor_Common_Stock_delta == 0) and ((investor_SAFE_Stock_delta == 0) and (investor_cash_delta < 0))) -> (last_event_name == Dissolve))
; )
