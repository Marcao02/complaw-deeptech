(Roles Investor Company)

(TimeUnit d)

(SortDefinitions
	($ := (Dimensioned NonnegReal "$"))
	(Pos$ := (Dimensioned PosReal "$"))
	(ShareCnt = (Dimensioned Nat "shares"))
	(PosShareCnt = (Dimensioned PosInt "shares"))
	(SharePrice = (Ratio $ PosShareCnt))
	(PosSharePrice = (Ratio Pos$ PosShareCnt))
)

(BlockMacro set_conversion_price (company_capitalization company_valuation)
	(ifflag HAS_CAP (
		(ifflag HAS_DISCOUNT (
			(local undiscounted_price_per_share_standard_preferred_stock : SharePrice = (company_valuation / company_capitalization))
			(local cap_price : SharePrice = (VALUATION_CAP / company_capitalization))
			(local discount_price : SharePrice = (undiscounted_price_per_share_standard_preferred_stock * DISCOUNT_RATE))
			(conversion_price' = (min cap_price discount_price))
		)
		else (
			(local undiscounted_price_per_share_standard_preferred_stock : SharePrice = (company_valuation / company_capitalization))
			(local cap_price : SharePrice = (VALUATION_CAP / company_capitalization))
			(conversion_price' = (min cap_price undiscounted_price_per_share_standard_preferred_stock))
		))
	)
	else (
		(ifflag HAS_DISCOUNT (
			(local undiscounted_price_per_share_standard_preferred_stock : SharePrice = (company_valuation / company_capitalization))
			(conversion_price' = (undiscounted_price_per_share_standard_preferred_stock * DISCOUNT_RATE))
		)
		else (
			(conversion_price' = (company_valuation / company_capitalization))
		))
	))
)

(NLGNames
	(PURCHASE_AMOUNT "Purchase Amount")
	(DISCOUNT_RATE "Discount Rate")
	(VALUATION_CAP "Valuation Cap")
	(investor_Common_Stock "Investor's Common Stock")
	(investor_SAFE_Preferred_Stock "Investor's SAFE Stock")
	(investor_cash "Investor's Cash" )
	(investor_cash_currently_unconverted "Unconverted Investment")
	(conversion_price "Conversion Price")
	(company_cash "Company's Cash")
	(liq_cashout "Liquidity Cashout")
	(dis_cashout "Dissolution Cashout")
	(undiscounted_price_per_share_standard_preferred_stock "Undiscounted Preferred Stock Price")
	(cap_price "Cap Price")
	(discount_price "Discount Price")
	(investor_percent_of_cashout_investor_investments "Investor Cashout %")
	(company_capitalization "Capitalization")
	(premoney_valuation "Valuation")
	(company_cash_at_liquidity_event "Total Cash Reserves")
	(liquidity_capitalization "Liquidity Capitalization")
	(company_valuation "Valuation")
	(total_investments_of_cashout_investors "Total Investments of Cashout Investors")
	(reduction_needed_to_qualify_as_usa_tax_free_reorg "Reduction Needed to Qualify as USA Tax-free Reorganization")
)

(ContractParams
	; (DEFAULT_ACTION_TIME_LIMIT : TimeDelta = 2d)

	(PURCHASE_AMOUNT : Pos$ = 100000)
	(ifflag HAS_DISCOUNT (
		(DISCOUNT_RATE : "Fraction(0,1]" = .9)
	))
	(ifflag HAS_CAP (
		(VALUATION_CAP : Pos$ = 100000000)
	))

	; (START_INVESTOR_COMMON_STOCKS : ShareCnt = 0)
	; (START_INVESTOR_SAFE_PREFERRED_STOCKS : ShareCnt = 0)
	; (START_INVESTOR_CASH : $ = PURCHASE_AMOUNT)
)


(StateVars
	; (writes≤1 investor_Common_Stock : ShareCnt = START_INVESTOR_COMMON_STOCKS)
	; (writes≤1 investor_SAFE_Preferred_Stock : ShareCnt = START_INVESTOR_SAFE_PREFERRED_STOCKS)
	(writes≤1 investor_Common_Stock : ShareCnt = 0)
	(writes≤1 investor_SAFE_Preferred_Stock : ShareCnt = 0)
	(writes≤1 investor_cash : $ = PURCHASE_AMOUNT )

	; note the type of the following variable will be (Uninitialized $), which behaves just like $
	; after the first write, and causes a type error if there's a read before the first write.
	(investor_cash_currently_unconverted : $ = 0)
	(writes≤1 conversion_price : SharePrice)

	(company_cash : $ = 0)

	; for Liquidity
	(writes≤1 liq_cashout : $ = 0) ; this needs to either be initialized to 0, or else changed to an Optional and some of the code rewritten a bit.
	; (writes≤1 investor_percent_of_cashout_investor_investments : "Fraction(0,1]")

	; for Dissolution
	(writes≤1 dis_cashout : $)
)
; recall bug in a subcase of the case when the company cannot fully pay out all the investors who want to cash out.
(Invariants
	(liq_cashout ≤ investor_cash_currently_unconverted)
	(dis_cashout ≤ PURCHASE_AMOUNT)
)


(FormalContract "SAFE"
	; apply to all actions and states:
	; 	at-most-once ; static checker should verify that every action and state occurs at most once in any trace

	(StartSituation Signed)

	(Situation Signed
		(nlg "Investment Agreement Signed")
		(Investor may TransferInvestmentCash)
	)
	(Action TransferInvestmentCash (TransitionsTo InvestmentWaitingToConvert) (AllowedSubjects Investor)
		(nlg "Transfer Investment to Company")
		(StateTransform
			(investor_cash' = (cast $ (investor_cash - PURCHASE_AMOUNT)))
			(company_cash' = (company_cash + PURCHASE_AMOUNT))
		)
	)

	(Situation InvestmentWaitingToConvert
		(nlg "Investment Waiting to Convert")
		(Company may (CommitToEquityFinancing))
		(Company may (CommitToIPO ?1 ?2 ?3))
		(Company may (CommitToChangeOfControl ?1 ?2 ?3 ?total_investments_of_cashout_investors ?5)
						(where (?total_investments_of_cashout_investors ≥ PURCHASE_AMOUNT)))
		(Company may CommitToDissolution)
	)

	; ----------------- Equity Financing Event -------------------
	; NOTE: PRA abbreviates pro rata agreement

	(Action CommitToEquityFinancing (AllowedSubjects Company)
		(nlg "Initiate an Equity Financing Event")
		(nlgsection "Equity Events")
		(FollowingSituation
			(Company may DeliverTransactionDocsWithPRA)
			(Company may DeliverTransactionDocsWithoutPRA)
			(Breach_Company (after_split 1d))
		)
	)

	(Action DeliverTransactionDocsWithPRA (AllowedSubjects Company) (TransitionsTo AfterPRASigned)
		(nlg "Deliver Transaction Docs With Pro Rata Rights Agreement (PRA)")
		(nlgsection "Equity Events")
	)

	(Action DeliverTransactionDocsWithoutPRA (AllowedSubjects Company)
		(nlg "Deliver Transaction Docs (PRA to follow)")
		(nlgsection "Equity Events")
		(FollowingSituation
			(Company must SendProRataRightsAgreementForSigning)
		)
	)

	(Action SendProRataRightsAgreementForSigning  (AllowedSubjects Company)
		(nlg "Send PRA for Signing")
		(nlgsection "Equity Events")
		(FollowingSituation
			; TODO: Obviously this shouldn't be a *must*, since they ought to be
			; able to send it back with proposed amendments/corrections.
			; That seems like something we should have a reusable module for.
			(Investor must SignPRA)
		)
	)

	(Action SignPRA (AllowedSubjects Investor) (TransitionsTo AfterPRASigned)
		(nlg "Sign PRA")
		(nlgsection "Equity Events")
	)

	(Situation AfterPRASigned
		(nlg "After PRA Signed")
		(nlgsection "Equity Events")
		(Company must (IssueSAFEPreferredStock ?1 ?2))
	)

	(Action (IssueSAFEPreferredStock
				(company_capitalization : PosShareCnt)
				(premoney_valuation : Pos$) ) (AllowedSubjects Company)
		(nlg "Issue SAFE Preferred Stock")
		(nlgsection "Equity Events")
		(StateTransform
			(set_conversion_price (company_capitalization premoney_valuation))
			(investor_SAFE_Preferred_Stock' += (PURCHASE_AMOUNT ceil/ conversion_price'))
		)
		(FollowingSituation
			(Company must DoEquityFinancing)
		)
	)

	(Action DoEquityFinancing (AllowedSubjects Company) (TransitionsTo Fulfilled)
		(nlg "Execute Equity Financing")
		(nlgsection "Equity Events")
	)


	; ----------------- Liquidity Event -------------------

	(Situation InvestorToChooseMethodOfPayment
		(nlg "Investor to Choose Method of Payment")
		(nlgsection "Liquidity Events")
		; 1 week is totally made up by Dustin!
		(Investor may ChooseCashPayment [before_split 1w])
		(Investor may ChooseStockPayment [before_split 1w])
		(AutoChooseStockPayment [at_split 1w])
	)

	(Action (CommitToIPO (company_cash_at_liquidity_event : $)
						 (liquidity_capitalization : PosShareCnt)
						 (company_valuation : Pos$)
			) (AllowedSubjects Company)  (TransitionsTo InvestorToChooseMethodOfPayment)
		(nlg "Initiate an IPO Liquidity Event")
		(nlgsection "Liquidity Events")
		(StateTransform
			(set_conversion_price (liquidity_capitalization company_valuation))
			(investor_cash_currently_unconverted' = PURCHASE_AMOUNT)
			(company_cash' = company_cash_at_liquidity_event)
		)
	)

	(Action (CommitToChangeOfControl (company_cash_at_liquidity_event : $)
								     (liquidity_capitalization : PosShareCnt)
								     (company_valuation : Pos$)
								     (total_investments_of_cashout_investors: Pos$)
								     (reduction_needed_to_qualify_as_usa_tax_free_reorg : $)

			) (AllowedSubjects Company) (TransitionsTo InvestorToChooseMethodOfPayment)
		(nlg "Initiate a Change-of-Control Liquidity Event")
		(nlgsection "Liquidity Events")
		(StateTransform
			(set_conversion_price (liquidity_capitalization company_valuation))
			(local investor_percent_of_cashout_investor_investments : "Fraction(0,1]" = (check "Fraction(0,1]" (PURCHASE_AMOUNT / total_investments_of_cashout_investors)))

		 	(local purchase_amount_reduction : $ = (investor_percent_of_cashout_investor_investments * reduction_needed_to_qualify_as_usa_tax_free_reorg))
			(investor_Common_Stock' += (purchase_amount_reduction ceil/ conversion_price'))
			(investor_cash_currently_unconverted' = (check $ (PURCHASE_AMOUNT - purchase_amount_reduction)))
			(company_cash' = (check $ (company_cash_at_liquidity_event - reduction_needed_to_qualify_as_usa_tax_free_reorg)))
		)
	)

	(Action AutoChooseStockPayment (AllowedSubjects Company)
		(nlg "Stock Payment Option Chosen by Default")
		(nlgsection "Liquidity Events")
		(FollowingSituation
			(Company must TransferCommonStock)
			; translates to:
			; (Company may TransferCommonStock)
			; (Arbiter may InterveneOnDelay_Company)
		)
	)

	(Action ChooseStockPayment (AllowedSubjects Investor)
		(nlg "Choose Payment in Common Stock")
		(nlgsection "Liquidity Events")
		(FollowingSituation
			(Company must TransferCommonStock)
		)
	)

	(Action TransferCommonStock (AllowedSubjects Company)
		(nlg "Transfer Common Stock")
		(nlgsection "Liquidity Events")
		(StateTransform
			(investor_Common_Stock' += ((check $ (investor_cash_currently_unconverted - liq_cashout)) ceil/ conversion_price))
		)
		(FollowingSituation
			(Company must DoLiquidityEvent)
		)
	)

	(Action ChooseCashPayment (AllowedSubjects Investor)
		(nlg "Choose Payment in Cash")
		(nlgsection "Liquidity Events")
		(FollowingSituation
			(Company must (TransferCash_L ?1))
		)
	)

	(Action (TransferCash_L (total_investments_of_cashout_investors : Pos$)) (AllowedSubjects Company)
		(nlg "Transfer Cash (liquidity)")
		(nlgsection "Liquidity Events")
		(StateTransform
			(local investor_percent_of_cashout_investor_investments : "Fraction(0,1]" = (check "Fraction(0,1]" (PURCHASE_AMOUNT / total_investments_of_cashout_investors)))
			(liq_cashout' = (min investor_cash_currently_unconverted
								 (company_cash * investor_percent_of_cashout_investor_investments))
			)
			(investor_cash' += liq_cashout')
			; (company_cash' = (check $ (company_cash - liq_cashout')))
		)

		(FollowingSituation
			(if (liq_cashout < investor_cash_currently_unconverted)
				(Company must TransferCommonStock)
			)

			(if (liq_cashout == investor_cash_currently_unconverted)
				(Company must DoLiquidityEvent)
			)
		)
	)

	(Action DoLiquidityEvent (AllowedSubjects Company) (TransitionsTo Fulfilled)
		(nlg "Execute Liquidity Event")
		(nlgsection "Liquidity Events")
	)


	; ----------------- Dissolution Event -------------------

	(Action CommitToDissolution (AllowedSubjects Company)
		(nlg "Initiate a Dissolution Event")
		(nlgsection "Dissolution Events")
		(FollowingSituation
			(Company must
				(TransferCash_D ?company_cash_at_dissolution_event
								?investor_percent_of_dissolving_investor_investments)
			)
		)
	)


	(Action (TransferCash_D (company_cash_at_dissolution_event : $)
						    (investor_percent_of_dissolving_investor_investments : "Fraction(0,1]"))
		(AllowedSubjects Company)
		(nlg "Transfer Cash (dissolution)")
		(nlgsection "Dissolution Events")
		(StateTransform
			(dis_cashout' = (min
							PURCHASE_AMOUNT
							(company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments))
			)
			(investor_cash' = dis_cashout')
		)

		(FollowingSituation
			(if (dis_cashout < PURCHASE_AMOUNT)
				(Company must (TransferAssets ?1 ?2))  )
			(if (dis_cashout == PURCHASE_AMOUNT)
				(Company must Dissolve)     )
		)
	)

	(Action (TransferAssets (liquidity_capitalization : PosShareCnt)
							(company_valuation : Pos$) )
		(nlg "Transfer Assets")
		(nlgsection "Dissolution Events")
		(AllowedSubjects Company)
		(StateTransform
			(set_conversion_price (liquidity_capitalization company_valuation))
			(investor_Common_Stock' += ((check $ (PURCHASE_AMOUNT - dis_cashout)) ceil/ conversion_price'))
		)
		(FollowingSituation
			(Company must Dissolve)
		)
	)


	(Action Dissolve (AllowedSubjects Company) (TransitionsTo Fulfilled)
		(nlg "Execute Dissolution")
		(nlgsection "Dissolution Events")
	)

	(Situation Fulfilled)
)