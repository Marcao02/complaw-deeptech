; This L4 contract uses the boolean precompilation flags HAS_DISCOUNT and HAS_CAP.

; Need notation for

(Roles Investor Company)

(TimeUnit d)
(DefaultActionTimeLimit 2d)

(Ontology
	(Sort Power)
	(Sort Date)
	(Sort Group)
	(Sort CompanyApproval)
	(Sort Act)
	(Fn is_issue_shares_power (Power → Bool))
	(Fn ☐_exercises_☐_on_☐ (Group Power Date → Act))
	(Fn ☐_is_an_approval_given_on_☐_to_☐ (CompanyApproval Date Group → Bool))
	(Fn act_approved_during_interval (DateSpan Act → Bool))
	; (Fn _approval_given_on_☐_to_☐ (CompanyApproval Date Group → Bool))
	(Fn before_date)
	(Fn violation (Act → Bool))

	; An exercising of a Power is a kind of Act. Exercising a Power must be approved over a date range. The approval can be revoked at any time before the Power is exercised, or if the power can be exercised multiple times, then it can be revoked at any time.
	; Q: Can an Approval be revoked retroactively?
	;
	; (Axiom
	; 	(∀ (DG : Group) (POW : Power) (ACT : Act) (D2 : Date)
	; 		(
	; 			(	∧
	; 				(is_issue_shares_power POW)
	; 				(ACT = (☐_exercises_☐_on_☐ DG POW D2))
	; 				(¬ ( ∃ (APP : CompanyApproval) (D1 : Date)
	; 					((before_date D1 D2) ∧ (☐_is_an_approval_given_on_☐_for_☐_to_☐ APP D1 ACT ))
	; 				))
	; 			)
	; 		→
	; 			(violation ACT)
	; 		)
	; 	)
	; )

	(BeforeStart ((Completed preemptive_waiver) and (Completed members_resolution)))

	(SortDefn OrdinraryResolutinPassMathod = (AGM EGM Written))
)



(ContractParams
	(Purchase_Amount : Pos$ = 100000)
	(Discount_Rate : "Fraction(0,1]" = .9)
	(Discount : "Fraction[0,1)" = (1 - Discount_Rate))
	(Valuation_Cap : Pos$ = 100000000)
)


(NonoperativeContractParams
	(Governing_Law_Jurisdiction "Singapore")
	(State_of_Incorporation "Singapore")
	(Date_of_Safe "1 July 2018")
	(Investor "CryptoBoy")
	(Company "Legalese")
)

(SortDefinitions
	; (ResolutionPassMethod = (Enum ))
	($ := (Dimensioned NonnegReal "$"))
	(Pos$ := (Dimensioned PosReal "$"))
	(ShareCnt = (Dimensioned Nat "shares"))
	(PosShareCnt = (Dimensioned PosInt "shares"))
	(SharePrice = (Ratio $ PosShareCnt))
	(PosSharePrice = (Ratio Pos$ PosShareCnt))
	(Liquidity_Event_Type = (Enum Change_of_Control Initial_Public_Offering))
)

(NLGNames
	(Purchase_Amount "Purchase Amount")
	(Discount_Rate "Discount Rate")
	(Valuation_Cap "Valuation Cap")
	(investor_Common_Stock "Investor's Common Stock")
	(investor_SAFE_Stock "Investor's SAFE Stock")
	(investor_cash "Investor's Cash" )
	(unconverted_investment "Unconverted Investment")
	(Conversion_Price "Conversion Price")
	(company_cash "Company's Cash")
	(liq_cashout "Liquidity Cashout")
	(dis_cashout "Dissolution Cashout")
	(undiscounted_standard_preferred_stock_price "Undiscounted Preferred Stock Price")
	(Safe_Price "Cap Price")
	(Discount_Price "Discount Price")
	(investor_percent_of_cashout_investor_investments "Investor Cashout %")
	(investor_percent_of_dissolving_investor_investments "Investor Cashout %")
	(company_capitalization "Capitalization")
	(premoney_valuation "Valuation")
	(company_cash_available_for_payout "Company Cash Available for Payout")
	(company_cash_at_liquidity_event "Total Cash Reserves")
	(company_cash_at_dissolution_event "Total Cash Reserves")
	(purchase_amount_reduction "Purchase Amount Reduction")
	(liquidity_capitalization "Liquidity Capitalization")
	(company_valuation "Valuation")
	(total_investments_of_cashout_investors "Total Investments of Cashout Investors")
	(reduction_needed_to_qualify_as_usa_tax_free_reorg "Reduction Needed to Qualify as USA Tax-free Reorganization")

	(?total_investments_of_cashout_investors "Total Investments of Cashout Investors")
)

	; <br/>
	; SAFE <br/>
	; (Simple Agreement for Future Equity)
	; <br/>

(PASTE "examples/src_sexpr/serious/SAFE_cap_discount_faithful_nlg.l4")



(StateVars
	(writes≤1 investor_Common_Stock: ShareCnt = 0)
	(writes≤1 investor_SAFE_Stock : ShareCnt = 0)
	(writes≤1 investor_cash : $ = Purchase_Amount )
	; for Liquidity and Dissolution
	(writes≤1 company_cash_available_for_payout : $)

	; in a later version of L4, the type of the following variable might be (Uninitialized $),
	; which behaves just like $ after the first write, and causes a type error if there's a read before the first write.
	(unconverted_investment : $ = 0)
	(company_cash : $ = 0)

	(writes≤1 Conversion_Price : PosSharePrice)

	; for Liquidity
	(writes≤1 liq_cashout : $ = 0) ; this needs to either be initialized to 0, or else changed to an Optional and some of the code rewritten a bit.

	; for Dissolution
	(writes≤1 dis_cashout : $)
)
; recall bug in a subcase of the case when the company cannot fully pay out all the investors who want to cash out.
(Invariants
	(liq_cashout ≤ unconverted_investment)
	(dis_cashout ≤ Purchase_Amount)
)


; (ActionPredicate Notice (a)
; 	"(b)	Any notice required or permitted by this instrument will be deemed sufficient when delivered personally or by overnight courier or sent by email to the relevant address listed on the signature page, or {48 hours} after being deposited in the U.S. mail as certified or registered mail with postage prepaid, addressed to the party to be notified at such party’s address listed on the signature page, as subsequently modified by written notice."
	; Every off-chain message should have a send event and a receive event.
	; But, in most cases in an L4 contract, that detail should be hidden.
	; DeliveredByEmail
	; DeliveredByCourier
	; ISentByMail48HoursAgo

	; A Notice is either:
	; a pair of a send event and receive event, or
	; a blockchain send event only? or the receive event is when it's written to the chain
	; But L4 contract benefit from a happy path abstraction, which is like an instant verified direct message delivery.
	; idea:
	; (Company may (Send TransactionDocsWithPRA method))
; )

(Dynamics "SAFE"
	; apply to all actions and states:
	; 	at-most-once ; static checker should verify that every action and state occurs at most once in any trace

	(StartSituation Signed)

	(Action ExternalShareCntChange
		(nlglogicsection "Events/Scenarios Relevant in All Cases")
	)
	(Action ExternalShareCntChange
		(nlglogicsection "Events/Scenarios Relevant in All Cases")
	)
	(Action ExternalShareCntChange
		(nlglogicsection "Events/Scenarios Relevant in All Cases")
	)


	(Situation Signed
		(nlg "Investment Agreement Signed")
		(nlglogicsection "Events/Scenarios Relevant in All Cases")
		(Investor may TransferInvestmentCash)
	)
	(Action TransferInvestmentCash (TransitionsTo InvestmentWaitingToConvert) (AllowedSubjects Investor)
		(nlg "Transfer Investment to Company")
		(nlglogicsection "Events/Scenarios Relevant in All Cases")
		(StateTransform
			(investor_cash' = (investor_cash - Purchase_Amount))
			(company_cash' = (company_cash + Purchase_Amount))
			(unconverted_investment' = Purchase_Amount)
		)
	)

	(Situation InvestmentWaitingToConvert
		(nlg "Investment Waiting to Convert")
		(nlglogicsection "Events/Scenarios Relevant in All Cases")
		(Company may (CommitToEquityFinancing))
		(Company may (CommitToIPO ?1 ?2))
		(Company may (CommitToChangeOfControl ?1 ?2 ?total_investments_of_cashout_investors ?4)
						(where (?total_investments_of_cashout_investors ≥ Purchase_Amount) )
		)
		(Company may CommitToDissolution)
	)

	; ----------------- {Equity_Financing} Event -------------------
	; NOTE: PRA abbreviates pro rata agreement

	(Action CommitToEquityFinancing (AllowedSubjects Company)
		(nlg "Initiate an Equity Financing Event")
		(nlglogicsection "Equity Financing")
		(FollowingSituation
			(Company may DeliverTransactionDocsWithPRA)
			(Company may DeliverTransactionDocsWithoutPRA)
			(Breach_Company (after_split 1d))
		)
	)

	(Action DeliverTransactionDocsWithPRA (AllowedSubjects Company) (TransitionsTo AfterPRASigned)
		(nlg "Deliver Transaction Docs With Pro Rata Rights Agreement (PRA)")
		(nlglogicsection "Equity Financing")
		(sideeffects
			(Company sends Transaction_Documents_related_to_Equity_Financing to Investor)
		)
	)

	(Action DeliverTransactionDocsWithoutPRA (AllowedSubjects Company)
		(nlg "Deliver Transaction Docs (PRA to follow)")
		(nlglogicsection "Equity Financing")
		(FollowingSituation
			(Company must SendProRataRightsAgreementForSigning)
		)
	)

	(Action SendProRataRightsAgreementForSigning  (AllowedSubjects Company)
		(nlg "Send PRA for Signing")
		(nlglogicsection "Equity Financing")
		(FollowingSituation
			; TODO: Obviously this shouldn't be a *must*, since they ought to be
			; able to send it back with proposed amendments/corrections.
			; That seems like something we should have a reusable module for.
			(Investor must SignPRA)
		)
	)

	(Action SignPRA (AllowedSubjects Investor) (TransitionsTo AfterPRASigned)
		(nlg "Sign PRA")
		(nlglogicsection "Equity Financing")
	)

	(Situation AfterPRASigned
		(nlg "After PRA Signed")
		(nlglogicsection "Equity Financing")
		(Company must (IssueSAFEPreferredStock ?1 ?2))
	)

	(Action (IssueSAFEPreferredStock
				(Company_Capitalization : PosShareCnt)
				(company_valuation : Pos$) ) (AllowedSubjects Company)
		(nlg "Issue SAFE Preferred Stock")
		(nlglogicsection "Equity Financing")
		(StateTransform
			(writeout undiscounted_standard_preferred_stock_price : SharePrice = (company_valuation / Company_Capitalization))
			(writeout Safe_Price : SharePrice = (Valuation_Cap / Company_Capitalization))
			(writeout Discount_Price : SharePrice = (undiscounted_standard_preferred_stock_price * Discount_Rate))
			(Conversion_Price' = (min Safe_Price Discount_Price))
			(investor_SAFE_Stock' = (investor_SAFE_Stock + (Purchase_Amount ceil/ Conversion_Price')))
		)
		(FollowingSituation
			(Company must Equity_Financing)
		)
	)

	(Action Equity_Financing (AllowedSubjects Company) (TransitionsTo Fulfilled)
		(nlg "Execute Equity Financing")
		(nlglogicsection "Equity Financing")
	)


	; ----------------- Liquidity Event -------------------

	(Situation InvestorToChooseMethodOfPayment
		(nlg "Investor to Choose Method of Payment")
		(nlglogicsection "IPO or Change of Control")
		(Investor may ChooseCashPayment [before_split 1w])
		(Investor may ChooseStockPayment [before_split 1w])
		(AutoChooseStockPayment [at_split 1w])
	)

	(Action (CommitToIPO (Liquidity_Capitalization : PosShareCnt)
						 (company_valuation : Pos$)
			) (AllowedSubjects Company)  (TransitionsTo InvestorToChooseMethodOfPayment)
		(nlg "Initiate an IPO Liquidity Event")
		(nlglogicsection "IPO or Change of Control")
		(StateTransform
			(writeout undiscounted_standard_preferred_stock_price : SharePrice = (company_valuation / Liquidity_Capitalization))
			(writeout Safe_Price : SharePrice = (Valuation_Cap / Liquidity_Capitalization))
			(writeout Discount_Price : SharePrice = (undiscounted_standard_preferred_stock_price * Discount_Rate))
			(Conversion_Price' = (min Safe_Price Discount_Price))
		)
	)

	(Action (CommitToChangeOfControl (Company_Capitalization : PosShareCnt)
								     (company_valuation : Pos$)
								     (total_investments_of_cashout_investors: Pos$)
								     (reduction_needed_to_qualify_as_usa_tax_free_reorg : $)

			) (AllowedSubjects Company) (TransitionsTo InvestorToChooseMethodOfPayment)
		(nlg "Initiate a Change-of-Control Liquidity Event")
		(nlglogicsection "IPO or Change of Control")
		(StateTransform
			(writeout undiscounted_standard_preferred_stock_price : SharePrice = (company_valuation / Company_Capitalization))
			(writeout Safe_Price : SharePrice = (Valuation_Cap / Company_Capitalization))
			(writeout Discount_Price : SharePrice = (undiscounted_standard_preferred_stock_price * Discount_Rate))
			(Conversion_Price' = (min Safe_Price Discount_Price))
			(local investor_percent_of_cashout_investor_investments : "Fraction(0,1]" = (check "Fraction(0,1]" (Purchase_Amount / total_investments_of_cashout_investors)))
		 	(local purchase_amount_reduction : $ = (investor_percent_of_cashout_investor_investments * reduction_needed_to_qualify_as_usa_tax_free_reorg))
			(investor_Common_Stock' += (purchase_amount_reduction ceil/ Conversion_Price'))
			(unconverted_investment' = (check Pos$ (unconverted_investment - purchase_amount_reduction)))
			(company_cash' = (check $ (company_cash - purchase_amount_reduction)))
		)
	)

	(Action AutoChooseStockPayment (AllowedSubjects Company)
		(nlg "Stock Payment Option Chosen by Default")
		(nlglogicsection "IPO or Change of Control")
		(FollowingSituation
			; what this translates to depends on if DefaultActionTimeLimit is defined
			(Company must TransferCommonStock)
		)
	)

	(Action ChooseStockPayment (AllowedSubjects Investor)
		(nlg "Choose Payment in Common Stock")
		(nlglogicsection "IPO or Change of Control")
		(FollowingSituation
			(Company must TransferCommonStock)
		)
	)

	(Action TransferCommonStock (AllowedSubjects Company)
		(nlg "Transfer Common Stock")
		(nlglogicsection "IPO or Change of Control")
		(StateTransform
			(investor_Common_Stock' += ((check $ (unconverted_investment - liq_cashout)) ceil/ Conversion_Price))
		)
		(FollowingSituation
			(Company must DoLiquidityEvent)
		)
	)

	(Action ChooseCashPayment (AllowedSubjects Investor)
		(nlg "Choose Payment in Cash")
		(nlglogicsection "IPO or Change of Control")
		(FollowingSituation
			(Company must (TransferCash_L ?1 ?2))
		)
	)

	(Action (TransferCash_L (company_cash_at_liquidity_event : $)
						    (total_investments_of_cashout_investors : Pos$)) (AllowedSubjects Company)
		(nlg "Transfer Cash (liquidity)")
		(nlglogicsection "IPO or Change of Control")
		(StateTransform
			(local investor_percent_of_cashout_investor_investments : "Fraction(0,1]" = (check "Fraction(0,1]" (Purchase_Amount / total_investments_of_cashout_investors)))
			(liq_cashout' = (min unconverted_investment
								 (company_cash_at_liquidity_event * investor_percent_of_cashout_investor_investments))
			)
			(investor_cash' += liq_cashout')
			(unconverted_investment' = (check $ (unconverted_investment - liq_cashout)))
			(company_cash' = (check $ (company_cash - liq_cashout')))
		)

		(FollowingSituation
			(if (liq_cashout < unconverted_investment)
				(Company must TransferCommonStock)
			)

			(if (liq_cashout == unconverted_investment)
				(Company must DoLiquidityEvent)
			)
		)
	)

	(Action DoLiquidityEvent (AllowedSubjects Company) (TransitionsTo Fulfilled)
		(nlg "Execute Liquidity Event")
		(nlglogicsection "IPO or Change of Control")
	)


	; ----------------- Dissolution Event -------------------

	(Action CommitToDissolution (AllowedSubjects Company)
		(nlg "Initiate a Dissolution Event")
		(nlglogicsection "Dissolution")
		(FollowingSituation
			(Company must
				(TransferCash_D ?company_cash_at_dissolution_event
								?investor_percent_of_dissolving_investor_investments)
			)
		)
	)


	(Action (TransferCash_D (company_cash_at_dissolution_event : $)
						    (investor_percent_of_dissolving_investor_investments : "Fraction(0,1]"))
		(AllowedSubjects Company)
		(nlg "Transfer Cash (dissolution)")
		(nlglogicsection "Dissolution")
		(StateTransform
			(dis_cashout' = (min
							Purchase_Amount
							(company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments))
			)
			(investor_cash' = dis_cashout')
		)

		(FollowingSituation
			(if (dis_cashout < Purchase_Amount)
				(Company must (TransferAssets ?1 ?2))  )
			(if (dis_cashout == Purchase_Amount)
				(Company must Dissolution_Event)     )
		)
	)

	(Action (TransferAssets (Company_Capitalization : PosShareCnt)
							(company_valuation : Pos$) )
		(nlg "Transfer Assets")
		(nlglogicsection "Dissolution")
		(AllowedSubjects Company)
		(StateTransform
			(writeout undiscounted_standard_preferred_stock_price : SharePrice = (company_valuation / Company_Capitalization))
			(writeout Safe_Price : SharePrice = (Valuation_Cap / Company_Capitalization))
			(writeout Discount_Price : SharePrice = (undiscounted_standard_preferred_stock_price * Discount_Rate))
			(Conversion_Price' = (min Safe_Price Discount_Price))
			(investor_Common_Stock' += ((check $ (Purchase_Amount - dis_cashout)) ceil/ Conversion_Price'))
		)
		(FollowingSituation
			(Company must Dissolution_Event)
		)
	)


	(Action Dissolution_Event (AllowedSubjects Company) (TransitionsTo Fulfilled)
		(nlg "Execute Dissolution")
		(nlglogicsection "Dissolution")
	)

	(Situation Fulfilled)
)


; (EndOfTraceClaims
; If the contract ends with the investor having no change in stock and investor_cash < 0, then there must have been a dissolution event.
; 	(((investor_Common_Stock'== 0) and ((investor_SAFE_Stock == 0) and (investor_cash < 0))) -> (last_event_name == Dissolution_Event))
; )
