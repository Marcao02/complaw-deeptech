; in addition to what safe_remote_purchase.l4 introduces, this introduces
; the set `contractActors`, which is a set of pairs <role, actor id within role>.
; actor ids in actions rules, e.g. ((Voter vAddr)       may (DirectVote propId)      (where !(voted vAddr)))
; Struct type (no big deal, but requires some work)
; atomic sorts NonzeroBytesN, BytesN, DecimalFixedWidth

(Roles Chairperson Voter)
(TimeUnit s)

(TypeDefinitions
	; The type Address excludes the first ethereum address 0x0, so that we can use it for a
	; NONE_ADDRESS.
	; Address probably needs to be more-particular than just a NonzeroBytes20. We probably don't
	; want to permit arithmetic on them, for example.
	(Address = (Dimensioned NonzeroBytes20 "Address"))
	(ProposalName = (Dimensioned Bytes32 "ProposalName"))
	(VoteWeight = (DecimalFixedWidth NonnegReal 8 4)) ; 8 integer digits and 4 fractional digits
	(Proposal = (Struct
		(name : ProposalName)
		(vote_count : VoteWeight)
	))
	(ProposalId = (PosIntâ‰¤ NUM_PROPOSALS))
	(Voter = (Struct
		(weight : VoteWeight)
		(voted : Bool)
		(delegate : (Option Address NONE_ADDRESS))
		(vote : (Option ProposalId NONE_PROPOSAL_ID))
		; Option is a new sort operator, which yields a copy of the given sort (first argument).
		; The second argument gives the value used for the none-object.
	))
)
(ContractParams
	(CHAIRPERSON_ADDR : Address)
	(PROPOSALS : (List Proposal))
)

(Definitions
	(NUM_PROPOSALS = (len PROPOSALS))
	(NONE_ADDRESS = (Address 0x00000000000000000000))
	(NONE_PROPOSAL_ID = 0)
)

(StateVars
	(voter_count : Nat = 0)
	(voters : (Map Address Voter))
)

; Types are optional for macro parameters, since type checking will always be performed post-expansion.
; The only advantage to typing macro parameters is more-readable type checking errors.
(Macro delegated (addr:Address)
	((get voters addr) != 0x0)
)

(Macro directly_voted (addr:Address)
	(
		(has voters addr) and
		((get (get voters addr) voted) and (get (get voters addr) delegate) == 0x0)
	)
	; note that the previous line is not what the concrete syntax will look like. it'd be more like:
	; (voters[addr].voted and (voters[addr].delegate == 0x0))
)

(Macro registered (vAddr:Address) (vAddr in voters))

(Macro voted (vAddr:Address) ((registered vAddr) and ((get voters vAddr) voted)) )


(Situation VotingInProgress
	(Next
		(Chairperson         may (GiveRightToVote vAddr)  (where !registered vAddr))
		((Voter vAddr)       may (DirectVote propId)      (where !(voted vAddr)))
		((Voter gives_vAddr) may (Delegate to_vAddr)      (where !(voted gives_vAddr)))
		; Note the Delegate rule means you can delegate to someone before they are given the right to vote.
		; Change the `where` clause to `((registered vAddr) and (not (voted vAddr)))` to require that your
		; delegate was registered first.
	)
)

(Action Delegate (to_vAddr:Address)
	(AllowedSubjectRoles Voter)
	(Pre (not (voted subject)))
	(StateTransform
		(voters = (update voters subject
			{
				(voted true)
				(delegate to_vAddr)
			}
		))
	)
)

(Action DirectVote (propid:ProposalId)
	(AllowedSubjectRoles Voter)
	(Pre (not (voted subject)))
	(StateTransform
		(voters = (update voters subject
			{
				(voted true)
				(vote propid)
			}
		))
	)
)

(Action GiveRightToVote (vAddr:Address)
	(AllowedSubjectRoles Chairperson)
	; The following precondition is the same as the guard on the GiveRightToVote action rule
	; in VotingInProgress, BUT it is not redundant. Preconditions are not present at runtime; they are
	; statically proved to always hold when a legal GiveRightToVote action occurs. In this case,
	; the proof is trivial, since there is only one GiveRightToVote action rule whose guard is
	; exactly the precondition.
	; Though not illustrated here, this feature allows one to fearlessly write minimal, maximally-efficient guards,
	; whose correctness (in terms of ensuring preconditions are satisfied) relies on constraints imposed by
	; the surrounding context.
	(Pre (not (has voters vAddr)))
	(StateTransform
		(voters = (set voters vAddr {
			(weight 1)
			(voted false)
			(delegate NONE_ADDRESS)
			(vote NONE_PROPOSAL_ID)
		}))
		(contractActors = (add contractActors (Voter vAddr)))
	)
)