(Actors Lender Borrower)
(TimeUnit days)

(SortDefinitions
	($ := (Dimensioned NonnegReal "$"))
	(Pos$ := (Dimensioned PosReal "$"))
)

(ContractParams
	(LOAN_AMOUNT    : Pos$     = 1000)
	(INTEREST_RATE	: "Fraction(0,1)"  = .05)
	(PAYMENT1_AMOUNT	: Pos$ = 550)
	(PAYMENT2_AMOUNT	: Pos$ = 525)
)

(StartDatetime "Jan 1, 2014")

(Definitions
	(REQUEST_DATE		= (str2dt "June 1, 2014"))
	(ADVANCE_DUE_DATE	= (str2dt "June 2, 2014"))
	(PAYMENT1_DUE_DATE	= (str2dt "June 1, 2015"))
	(PAYMENT2_DUE_DATE	= (str2dt "June 1, 2016"))
	(STATUTE_OF_LIM_DATE = (str2dt "June 1, 2020"))
	(MAX_CURES = 1)
)

(StateVars
	(writeonly paid_to_lender : $ := 0)
	(writeonly paid_to_borrower : $ := 0)
	(cures : Nat := 0)
)

(Dynamics "Goodenough Flood Loan"
	(StartSituation ActiveContract)

	(Situation ActiveContract
		(Borrower may RequestPrinciple (on REQUEST_DATE))
		(RequestDeadlinePasses (after REQUEST_DATE))
	)

	(Action RequestPrinciple (TransitionsTo PrincipleRequested)
		(StateTransform
			(prove (PAYMENT1_AMOUNT == ((LOAN_AMOUNT / 2) + (LOAN_AMOUNT * INTEREST_RATE))))
			(prove (PAYMENT2_AMOUNT == ((LOAN_AMOUNT / 2) + ((LOAN_AMOUNT / 2) * INTEREST_RATE))))
		)
	)
	(Situation PrincipleRequested
        (Lender may AdvancePrinciple (on ADVANCE_DUE_DATE))
        (AdvanceDeadlinePasses (after ADVANCE_DUE_DATE))
	)

	(Action AdvancePrinciple (TransitionsTo Pmt1Accruing)
		(StateTransform (paid_to_borrower' = LOAN_AMOUNT))
	)

	(Action AdvanceDeadlinePasses (TransitionsTo DefaultLender))
	(Situation DefaultLender
		(Borrower may FileLawsuit (before STATUTE_OF_LIM_DATE))
		(StatuteOfLimitations (on STATUTE_OF_LIM_DATE))
	)


	; ============Payment 1============

	(Situation Pmt1Accruing
		(Pmt1DuedateArrives (on PAYMENT1_DUE_DATE))
		(Borrower may RepsWarr1 (before PAYMENT1_DUE_DATE))
		(Borrower may Convenant1 (before PAYMENT1_DUE_DATE))
		(Borrower may Bankruptcy1 (before PAYMENT1_DUE_DATE))
	)

	(Action RepsWarr1 (TransitionsTo BorrowerDefaultRepsWarr1) )
	(Situation BorrowerDefaultRepsWarr1
		(Lender ~must GiveNoticeOfGeneralDefault1 immediately)
	)

	(Action Convenant1 (TransitionsTo BorrowerDefaultConvenant1) )
	(Situation BorrowerDefaultConvenant1
		(Lender ~must GiveNoticeOfGeneralDefault1 immediately)
	)

	(Action Bankruptcy1 (TransitionsTo BorrowerDefaultBankruptcy1) )
	(Situation BorrowerDefaultBankruptcy1
		(Lender ~must GiveNoticeOfGeneralDefault1 immediately)
	)

	(Action GiveNoticeOfGeneralDefault1 (TransitionsTo BorrowerNotifiedOfGeneralDefault1))
	(Situation BorrowerNotifiedOfGeneralDefault1
		(if (cures < MAX_CURES)
			(Borrower may CureDefault1 (within_split 2d))
			; (Borrower may CureDefault1 (when ((next_event_td >= (last_situation_td + 1)) and (next_event_td <= (last_situation_td + 2d)))))
		)
		(AcceleratePayments12 (after_split 2d))
	)
	(Action CureDefault1 (TransitionsTo Pmt1Accruing)
		(StateTransform
			(cures' = (cures + 1))
		)
	)

	(Action Pmt1DuedateArrives (TransitionsTo Pmt1Due))
	(Situation Pmt1Due
		(Borrower may MakePmt1 (within_split 1d))
		(MissPmt1 (after_split 1d))
	)

	(Action MissPmt1 (TransitionsTo BorrowerDefaultMissedPmt1))
	(Situation BorrowerDefaultMissedPmt1
		(Lender ~must GiveBorrowerNotice1 (at last_situation_td))
	)

	(Action GiveBorrowerNotice1 (TransitionsTo BorrowerNotifiedOfPmt1Default))


	(Situation BorrowerNotifiedOfPmt1Default
		(Borrower may MakePmt1 (within_split 1d))
		(AcceleratePayments12 (after_split 1d))
	)
	(Action MakePmt1 (TransitionsTo Pmt2Accruing)
		(StateTransform (paid_to_lender' = PAYMENT1_AMOUNT))
	)
	(Action AcceleratePayments12 (TransitionsTo Payments1and2Accelerating))
	(Situation Payments1and2Accelerating
		(Borrower may MakePmt12 immediately)
		(AcceleratedPaymentFailure1 (after_split 1d))
	)

	(Action MakePmt12 (TransitionsTo Term)
		(StateTransform
			(paid_to_lender' = (PAYMENT2_AMOUNT + PAYMENT1_AMOUNT))
		)
	)

	(Action AcceleratedPaymentFailure1 (TransitionsTo Crisis1))
	(Situation Crisis1
		(Borrower may MakePmt12 immediately) ; immediately?
		(Lender may FileLawsuit (before STATUTE_OF_LIM_DATE))
		(StatuteOfLimitations (on STATUTE_OF_LIM_DATE))
	)


	; ============Payment 2============

	(Situation Pmt2Accruing
		(Pmt2DueDateArrives (on PAYMENT2_DUE_DATE))
		(Borrower may RepsWarr2 (before PAYMENT2_DUE_DATE))
		(Borrower may Convenant2 (before PAYMENT2_DUE_DATE))
		(Borrower may Bankruptcy2 (before PAYMENT2_DUE_DATE))
	)

	(Action RepsWarr2 (TransitionsTo BorrowerDefaultRepsWarr2) )
	(Situation BorrowerDefaultRepsWarr2
		(Lender ~must GiveNoticeOfGeneralDefault2 immediately)
	)

	(Action Convenant2 (TransitionsTo BorrowerDefaultConvenant2) )
	(Situation BorrowerDefaultConvenant2
		(Lender ~must GiveNoticeOfGeneralDefault2 immediately)
	)

	(Action Bankruptcy2 (TransitionsTo BorrowerDefaultBankruptcy2) )
	(Situation BorrowerDefaultBankruptcy2
		(Lender ~must GiveNoticeOfGeneralDefault2 immediately)
	)

	(Action GiveNoticeOfGeneralDefault2
		(TransitionsTo BorrowerNotifiedOfGeneralDefault2)
	)
	(Situation BorrowerNotifiedOfGeneralDefault2
		(if (cures < MAX_CURES)
			(Borrower may CureDefault2 (within_split 2d))
			; (Borrower may CureDefault2 (when ((next_event_td >= (last_situation_td + 1)) and (next_event_td <= (last_situation_td + 2d)))))
		)
		(Borrower may AcceleratePayment2 (after_split 2d))
	)
	(Action CureDefault2 (TransitionsTo Pmt2Accruing)
		(StateTransform
			(cures' = (cures + 1))
		)
	)

	(Action Pmt2DueDateArrives (TransitionsTo Pmt2Due))
	(Situation Pmt2Due
		(Borrower may MakePmt2 immediately)
		(MissPmt2 (after_split 1d))
	)
	(Action MissPmt2 (TransitionsTo BorrowerDefaultMissedPmt2))
	(Situation BorrowerDefaultMissedPmt2
		(Lender ~must GiveBorrowerNotice2 (at last_situation_td))
	)
	(Action GiveBorrowerNotice2 (TransitionsTo BorrowerNotifiedOfPmt2Default))
	(Situation BorrowerNotifiedOfPmt2Default
		(Borrower may MakePmt2 (within_split 2d))
		(AcceleratePayment2 (after_split 2d))
	)

	(Action AcceleratePayment2 (TransitionsTo Payment2Accelerating))
	(Situation Payment2Accelerating
		(Borrower may MakePmt2 immediately)
		(AcceleratedPaymentFailure2 (after_split 1d))
	)

	(Action AcceleratedPaymentFailure2 (TransitionsTo Crisis2))
	(Situation Crisis2
		(Borrower may MakePmt2 immediately) ; immediately?
		(Lender may FileLawsuit (before STATUTE_OF_LIM_DATE))
		(StatuteOfLimitations (on STATUTE_OF_LIM_DATE))
	)

	(Action MakePmt2 (TransitionsTo Term)
		(StateTransform
			(paid_to_lender' = (paid_to_lender + PAYMENT2_AMOUNT))
			(prove (paid_to_lender' == (PAYMENT1_AMOUNT + PAYMENT2_AMOUNT)))
		)
	)


	; ============Termination============

	(Action StatuteOfLimitations (TransitionsTo Canc))
	(Action FileLawsuit (TransitionsTo Lit))

	(Action RequestDeadlinePasses (TransitionsTo Term))
	(Situation Term (EnterFulfilled immediately))
	(Situation Canc (EnterFulfilled immediately))
	(Situation Lit (EnterFulfilled immediately))
	(Action EnterFulfilled (TransitionsTo Fulfilled))
)

