
(Roles Buyer Seller)

(TimeUnit d)

(SortDefinitions
	(Pos$ := (Dimensioned PosReal "$"))
	($ := (Dimensioned NonnegReal "$"))
)


(ContractParams
	(INTEREST_RATE : PosReal = .1)
	(TOTAL_DUE_BEFORE_CLOSING : Pos$ = 9500)
	(MIN_PAYMENT : Pos$ = 500)
	(DUE_AT_CLOSING : Pos$ = 500)
)

(StateVars
	(balance_remaining : $ = TOTAL_DUE_BEFORE_CLOSING)
	(next_payment_month : Nat = 0)  )

(ProseContract
	(P1 'Buyer agrees to pay to Seller the total sum e10000, in the manner following:')
	(P2 'e500 is to be paid at closing, and the remaining balance of e9500 shall be paid as follows:')
	(P3 'e500 or more per month on the first day of each and every month, and continuing until the entire balance, including both principal and interest, shall be paid in full -- provided, however, that the entire balance due plus accrued interest and any other amounts due here-under shall be paid in full on or before 24 months.')
	(P4 'Monthly payments shall include both principal and interest with interest at the rate of 10%, computed monthly on the remaining balance from time to time unpaid.')  )

(FormalContract
	"Instalment Sale Hvitved"
	(StartSituation WaitingForFirstDayOfNextMonth)

	(Situation WaitingForFirstDayOfNextMonth

		; note contract says payments happen on the first day of the month, not on-or-before.
		; so I am being lazy and interpreting it literally.

		; Can make a non-final payment, provided it's at least MIN_PAYMENT
		; and it's before the final month of the contract.
		(if ( (MIN_PAYMENT ≤ balance_remaining) and (next_payment_month < 23) )
			(Buyer may (PayInstallment ?amount)
				(at_split 30d)
				(where (MIN_PAYMENT ≤ ?amount ) and (?amount ≤ balance_remaining))
			)
		)

		(Buyer may (PayLastInstallment (balance_remaining + DUE_AT_CLOSING))
			(at_split 30d)
		)

		(Breach_Buyer (after last_situation_td + 30d))
	)

	(Action (PayInstallment(amount:Pos$)) (TransitionsTo WaitingForFirstDayOfNextMonth)
		(Pre (amount ≤ balance_remaining)) ; overpaying is forbidden. this is checked statically.
		(StateTransform
			(local before_interest : $ := (check $ (balance_remaining - amount)))
			(balance_remaining' = (before_interest * (1 + INTEREST_RATE)))
			(next_payment_month' += 1)
		)
	)


	(Action (PayLastInstallment(amount:Pos$)) (TransitionsTo Fulfilled)
		(Pre (amount == (balance_remaining + DUE_AT_CLOSING)))
		(StateTransform ; statement isn't necessary
			(balance_remaining' = ($ 0))    )))