-------------------------
file: serious/SAFE_mfn.l4

roles: Env, Arbiter, Investor, Company

contract params:
    PURCHASE_AMOUNT : Pos$ := 100000

state vars:
    writes≤1 investor_Common_Stock_delta : ΔShareCnt := 0
    writes≤1 investor_SAFE_Stock_delta : ΔShareCnt := 0
    writes≤1 investor_cash_delta : Δ$ := 0
    unconverted_investment : $ := 0
    writes≤1 conversion_price : SharePrice
    company_cash_delta : $ := 0
    writes≤1 company_cash_available_for_payout : $
    writes≤1 liq_cashout : $ := 0
    writes≤1 dis_cashout : $

situation Signed:
    Investor may TransferInvestmentCash

action TransferInvestmentCash()  transitions to InvestmentWaitingToConvert:
    transform:
        investor_cash_delta := (investor_cash_delta - PURCHASE_AMOUNT)
        company_cash_delta := (company_cash_delta + PURCHASE_AMOUNT)
        unconverted_investment := PURCHASE_AMOUNT

situation InvestmentWaitingToConvert:
    Company may CommitToChangeOfControl(?1, ?2, ?total_investments_of_cashout_investors, ?4) where (?total_investments_of_cashout_investors ≥ PURCHASE_AMOUNT)
    Company may CommitToDissolution
    Company may CommitToEquityFinancing
    Company may CommitToIPO(?1, ?2)

action CommitToEquityFinancing()  transitions to AfterCommitToEquityFinancing
    following situation:
        Company may DeliverTransactionDocsWithPRA
        Company may DeliverTransactionDocsWithoutPRA
        Breach_Company (next_event_td > (last_situation_td + 1d))

action DeliverTransactionDocsWithPRA()  transitions to AfterPRASigned

action DeliverTransactionDocsWithoutPRA()  transitions to AfterDeliverTransactionDocsWithoutPRA
    following situation:
        Company may SendProRataRightsAgreementForSigning (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action SendProRataRightsAgreementForSigning()  transitions to AfterSendProRataRightsAgreementForSigning
    following situation:
        Breach_Investor (next_event_td > (last_situation_td + 1d))
        Investor may SignPRA (next_event_td ≤ (last_situation_td + 1d))

action SignPRA()  transitions to AfterPRASigned

situation AfterPRASigned:
    Company may IssueSAFEPreferredStock(?1, ?2) (next_event_td ≤ (last_situation_td + 1d))
    Breach_Company (next_event_td > (last_situation_td + 1d))

action IssueSAFEPreferredStock(company_capitalization: PosShareCnt, premoney_valuation: Pos$) transitions to AfterIssueSAFEPreferredStock:
    transform:
        conversion_price := (premoney_valuation / company_capitalization)
        investor_SAFE_Stock_delta := (investor_SAFE_Stock_delta + (PURCHASE_AMOUNT ceil/ conversion_price'))
    following situation:
        Company may DoEquityFinancing (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action DoEquityFinancing()  transitions to Fulfilled

situation InvestorToChooseMethodOfPayment:
    AutoChooseStockPayment (next_event_td == (last_situation_td + 1w))
    Investor may ChooseCashPayment (next_event_td < (last_situation_td + 1w))
    Investor may ChooseStockPayment (next_event_td < (last_situation_td + 1w))

action CommitToIPO(liquidity_capitalization: PosShareCnt, company_valuation: Pos$) transitions to InvestorToChooseMethodOfPayment:
    transform:
        conversion_price := (company_valuation / liquidity_capitalization)

action CommitToChangeOfControl(liquidity_capitalization: PosShareCnt, company_valuation: Pos$, total_investments_of_cashout_investors: Pos$, reduction_needed_to_qualify_as_usa_tax_free_reorg: $) transitions to InvestorToChooseMethodOfPayment:
    transform:
        conversion_price := (company_valuation / liquidity_capitalization)
        investor_percent_of_cashout_investor_investments : Fraction(0,1] := (check Fraction(0,1] (PURCHASE_AMOUNT / total_investments_of_cashout_investors))
        purchase_amount_reduction : $ := (investor_percent_of_cashout_investor_investments * reduction_needed_to_qualify_as_usa_tax_free_reorg)
        investor_Common_Stock_delta := (investor_Common_Stock_delta + (purchase_amount_reduction ceil/ conversion_price'))
        unconverted_investment := (check $ (unconverted_investment - purchase_amount_reduction))
        company_cash_delta := (check $ (company_cash_delta - purchase_amount_reduction))

action AutoChooseStockPayment()  transitions to AfterAutoChooseStockPayment
    following situation:
        Company may TransferCommonStock (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action ChooseStockPayment()  transitions to AfterChooseStockPayment
    following situation:
        Company may TransferCommonStock (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action TransferCommonStock()  transitions to AfterTransferCommonStock:
    transform:
        investor_Common_Stock_delta := (investor_Common_Stock_delta + ((check $ (unconverted_investment - liq_cashout)) ceil/ conversion_price))
    following situation:
        Company may DoLiquidityEvent (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action ChooseCashPayment()  transitions to AfterChooseCashPayment
    following situation:
        Company may TransferCash_L(?1, ?2) (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action TransferCash_L(company_cash_at_liquidity_event: $, total_investments_of_cashout_investors: Pos$) transitions to AfterTransferCash_L:
    transform:
        investor_percent_of_cashout_investor_investments : Fraction(0,1] := (check Fraction(0,1] (PURCHASE_AMOUNT / total_investments_of_cashout_investors))
        liq_cashout := (min unconverted_investment (company_cash_at_liquidity_event * investor_percent_of_cashout_investor_investments))
        investor_cash_delta := (investor_cash_delta + liq_cashout')
        unconverted_investment := (check $ (unconverted_investment - liq_cashout))
        company_cash_delta := (check $ (company_cash_delta - liq_cashout'))
    following situation:
        if (liq_cashout == unconverted_investment):
            Company may DoLiquidityEvent (next_event_td ≤ (last_situation_td + 1d))
        if (liq_cashout < unconverted_investment):
            Company may TransferCommonStock (next_event_td ≤ (last_situation_td + 1d))
        if (liq_cashout < unconverted_investment):
            Breach_Company (next_event_td > (last_situation_td + 1d))
        if (liq_cashout == unconverted_investment):
            Breach_Company (next_event_td > (last_situation_td + 1d))

action DoLiquidityEvent()  transitions to Fulfilled

action CommitToDissolution()  transitions to AfterCommitToDissolution
    following situation:
        Company may TransferCash_D(?company_cash_at_dissolution_event, ?investor_percent_of_dissolving_investor_investments) (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action TransferCash_D(company_cash_at_dissolution_event: $, investor_percent_of_dissolving_investor_investments: Fraction(0,1]) transitions to AfterTransferCash_D:
    transform:
        dis_cashout := (min PURCHASE_AMOUNT (company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments))
        investor_cash_delta := dis_cashout'
    following situation:
        if (dis_cashout == PURCHASE_AMOUNT):
            Company may Dissolve (next_event_td ≤ (last_situation_td + 1d))
        if (dis_cashout < PURCHASE_AMOUNT):
            Company may TransferAssets(?1, ?2) (next_event_td ≤ (last_situation_td + 1d))
        if (dis_cashout < PURCHASE_AMOUNT):
            Breach_Company (next_event_td > (last_situation_td + 1d))
        if (dis_cashout == PURCHASE_AMOUNT):
            Breach_Company (next_event_td > (last_situation_td + 1d))

action TransferAssets(liquidity_capitalization: PosShareCnt, company_valuation: Pos$) transitions to AfterTransferAssets:
    transform:
        conversion_price := (company_valuation / liquidity_capitalization)
        investor_Common_Stock_delta := (investor_Common_Stock_delta + ((check $ (PURCHASE_AMOUNT - dis_cashout)) ceil/ conversion_price'))
    following situation:
        Company may Dissolve (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action Dissolve()  transitions to Fulfilled

situation Fulfilled:
