-------------------------
file: serious/SAFE_cap.l4

roles: Env, Arbiter, Investor, Company

contract params:
    PURCHASE_AMOUNT : Pos$ := 100000
    VALUATION_CAP : Pos$ := 10000000
    START_INVESTOR_COMMON_STOCKS : ShareCnt := 0
    START_INVESTOR_SAFE_PREFERRED_STOCKS : ShareCnt := 0

state vars:
    writes≤1 investor_Common_Stock : ShareCnt := START_INVESTOR_COMMON_STOCKS
    writes≤1 investor_SAFE_Preferred_Stock : ShareCnt := START_INVESTOR_SAFE_PREFERRED_STOCKS
    writes≤1 investor_cash : $ := PURCHASE_AMOUNT
    cash_currently_unconverted : $ := PURCHASE_AMOUNT
    writes≤1 conversion_price : SharePrice
    company_cash : $ := 0
    writes≤1 cap_price : SharePrice
    writes≤1 undiscounted_price_per_share_standard_preferred_stock : SharePrice
    writes≤1 liq_cashout : $ := 0
    writes≤1 investor_percent_of_cashout_investor_investments : Fraction(0,1]
    writes≤1 dis_cashout : $

situation Signed:
    Investor may TransferInvestmentCash

action TransferInvestmentCash()  transitions to InvestmentWaitingToConvert:
    transform:
        investor_cash := (cast $ (investor_cash - PURCHASE_AMOUNT))
        company_cash := (company_cash + PURCHASE_AMOUNT)

situation InvestmentWaitingToConvert:
    Company may CommitToChangeOfControl(?1, ?2, ?3, ?total_investments_of_cashout_investors, ?5) where (?total_investments_of_cashout_investors ≥ PURCHASE_AMOUNT)
    Company may CommitToDissolution
    Company may CommitToEquityFinancing
    Company may CommitToIPO(?1, ?2, ?3)

action CommitToEquityFinancing()  transitions to AfterCommitToEquityFinancing
    following situation:
        Arbiter may InterveneOnDelay_Company
        Company may DeliverTransactionDocsWithPRA
        Company may DeliverTransactionDocsWithoutPRA

action DeliverTransactionDocsWithPRA()  transitions to AfterDeliverTransactionDocsWithPRA
    following situation:
        Company may IssueSAFEPreferredStock(?1, ?2) (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action DeliverTransactionDocsWithoutPRA()  transitions to AfterDeliverTransactionDocsWithoutPRA
    following situation:
        Company may SubmitProRataRightsAgreementForSigning (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action SubmitProRataRightsAgreementForSigning()  transitions to AfterSubmitProRataRightsAgreementForSigning
    following situation:
        Breach_Investor (next_event_td > (last_situation_td + 1d))
        Investor may SignPRA (next_event_td ≤ (last_situation_td + 1d))

action SignPRA()  transitions to AfterSignPRA
    following situation:
        Company may IssueSAFEPreferredStock(?1, ?2) (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action IssueSAFEPreferredStock(company_capitalization: PosShareCnt, premoney_valuation: Pos$) transitions to AfterIssueSAFEPreferredStock:
    transform:
        undiscounted_price_per_share_standard_preferred_stock := (premoney_valuation / company_capitalization)
        cap_price := (VALUATION_CAP / company_capitalization)
        if (cap_price' < undiscounted_price_per_share_standard_preferred_stock'):
            conversion_price := cap_price'
        else:
            conversion_price := undiscounted_price_per_share_standard_preferred_stock'

        investor_SAFE_Preferred_Stock := (investor_SAFE_Preferred_Stock + (PURCHASE_AMOUNT round/ conversion_price'))
    following situation:
        Company may DoEquityFinancing (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action DoEquityFinancing()  transitions to Fulfilled

action CommitToIPO(company_cash_at_liquidity_event: $, liquidity_capitalization: PosShareCnt, company_valuation: Pos$) transitions to AfterCommitToIPO:
    transform:
        undiscounted_price_per_share_standard_preferred_stock := (company_valuation / liquidity_capitalization)
        cap_price := (VALUATION_CAP / liquidity_capitalization)
        if (cap_price' < undiscounted_price_per_share_standard_preferred_stock'):
            conversion_price := cap_price'
        else:
            conversion_price := undiscounted_price_per_share_standard_preferred_stock'

        cash_currently_unconverted := PURCHASE_AMOUNT
        company_cash := company_cash_at_liquidity_event
    following situation:
        Company may AutoChooseStockPayment (next_event_td == (last_situation_td + 1w))
        Breach_Company (next_event_td > (last_situation_td + 1w))
        Investor may ChooseCashPayment (next_event_td < (last_situation_td + 1w))
        Investor may ChooseStockPayment (next_event_td < (last_situation_td + 1w))

action CommitToChangeOfControl(company_cash_at_liquidity_event: $, liquidity_capitalization: PosShareCnt, company_valuation: Pos$, total_investments_of_cashout_investors: Pos$, reduction_needed_to_qualify_as_usa_tax_free_reorg: $) transitions to AfterCommitToChangeOfControl:
    transform:
        undiscounted_price_per_share_standard_preferred_stock := (company_valuation / liquidity_capitalization)
        cap_price := (VALUATION_CAP / liquidity_capitalization)
        if (cap_price' < undiscounted_price_per_share_standard_preferred_stock'):
            conversion_price := cap_price'
        else:
            conversion_price := undiscounted_price_per_share_standard_preferred_stock'

        investor_percent_of_cashout_investor_investments := (check Fraction(0,1] (PURCHASE_AMOUNT / total_investments_of_cashout_investors))
        investor_Common_Stock := (investor_Common_Stock + ((investor_percent_of_cashout_investor_investments' * reduction_needed_to_qualify_as_usa_tax_free_reorg) round/ conversion_price'))
        cash_currently_unconverted := (check $ (PURCHASE_AMOUNT - (investor_percent_of_cashout_investor_investments' * reduction_needed_to_qualify_as_usa_tax_free_reorg)))
        company_cash := (check $ (company_cash_at_liquidity_event - reduction_needed_to_qualify_as_usa_tax_free_reorg))
    following situation:
        Company may AutoChooseStockPayment (next_event_td == (last_situation_td + 1w))
        Breach_Company (next_event_td > (last_situation_td + 1w))
        Investor may ChooseCashPayment (next_event_td < (last_situation_td + 1w))
        Investor may ChooseStockPayment (next_event_td < (last_situation_td + 1w))

action AutoChooseStockPayment()  transitions to AfterAutoChooseStockPayment
    following situation:
        Company may TransferCommonStock (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action ChooseStockPayment()  transitions to AfterChooseStockPayment
    following situation:
        Company may TransferCommonStock (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action TransferCommonStock()  transitions to AfterTransferCommonStock:
    transform:
        investor_Common_Stock := (investor_Common_Stock + ((check $ (cash_currently_unconverted - liq_cashout)) round/ conversion_price))
    following situation:
        Company may DoLiquidityEvent (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action ChooseCashPayment()  transitions to AfterChooseCashPayment
    following situation:
        Company may TransferCash_L(?1) (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action TransferCash_L(total_investments_of_cashout_investors: Pos$) transitions to AfterTransferCash_L:
    transform:
        investor_percent_of_cashout_investor_investments := (check Fraction(0,1] (PURCHASE_AMOUNT / total_investments_of_cashout_investors))
        if (cash_currently_unconverted < (company_cash * investor_percent_of_cashout_investor_investments')):
            liq_cashout := cash_currently_unconverted
        else:
            liq_cashout := (company_cash * investor_percent_of_cashout_investor_investments')

        investor_cash := (investor_cash + liq_cashout')
    following situation:
        if (liq_cashout == cash_currently_unconverted):
            Company may DoLiquidityEvent (next_event_td ≤ (last_situation_td + 1d))
        if (liq_cashout < cash_currently_unconverted):
            Company may TransferCommonStock (next_event_td ≤ (last_situation_td + 1d))
        if (liq_cashout < cash_currently_unconverted):
            Breach_Company (next_event_td > (last_situation_td + 1d))
        if (liq_cashout == cash_currently_unconverted):
            Breach_Company (next_event_td > (last_situation_td + 1d))

action DoLiquidityEvent()  transitions to Fulfilled

action CommitToDissolution()  transitions to AfterCommitToDissolution
    following situation:
        Company may TransferCash_D(?company_cash_at_dissolution_event, ?investor_percent_of_dissolving_investor_investments) (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action TransferCash_D(company_cash_at_dissolution_event: $, investor_percent_of_dissolving_investor_investments: Fraction(0,1]) transitions to AfterTransferCash_D:
    transform:
        if (PURCHASE_AMOUNT < (company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments)):
            dis_cashout := PURCHASE_AMOUNT
        else:
            dis_cashout := (company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments)

        investor_cash := dis_cashout'
    following situation:
        if (dis_cashout == PURCHASE_AMOUNT):
            Company may Dissolve (next_event_td ≤ (last_situation_td + 1d))
        if (dis_cashout < PURCHASE_AMOUNT):
            Company may TransferAssets(?1, ?2) (next_event_td ≤ (last_situation_td + 1d))
        if (dis_cashout < PURCHASE_AMOUNT):
            Breach_Company (next_event_td > (last_situation_td + 1d))
        if (dis_cashout == PURCHASE_AMOUNT):
            Breach_Company (next_event_td > (last_situation_td + 1d))

action TransferAssets(liquidity_capitalization: PosShareCnt, company_valuation: Pos$) transitions to AfterTransferAssets:
    transform:
        undiscounted_price_per_share_standard_preferred_stock := (company_valuation / liquidity_capitalization)
        cap_price := (VALUATION_CAP / liquidity_capitalization)
        if (cap_price' < undiscounted_price_per_share_standard_preferred_stock'):
            conversion_price := cap_price'
        else:
            conversion_price := undiscounted_price_per_share_standard_preferred_stock'

        investor_Common_Stock := (investor_Common_Stock + ((check $ (PURCHASE_AMOUNT - dis_cashout)) round/ conversion_price'))
    following situation:
        Company may Dissolve (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action Dissolve()  transitions to Fulfilled
