---------------------
file: serious/KISS.l4

roles: Env, Arbiter, Investor, Company

contract params:
    PURCHASE_AMOUNT : Pos$ := 100000
    TIME_TILL_MATURITY : TimeDelta := (days 547)
    VALUATION_CAP : Pos$ := 1000000000000
    DISCOUNT_RATE : Fraction(0,1] := 1
    INTEREST_RATE : Fraction[0,1] := 0.04
    DEBT_VERSION : Bool := True
    START_INVESTOR_COMMON_STOCK : ShareCnt := 0
    START_INVESTOR_PREFERRED_STOCK : ShareCnt := 0
    START_INVESTOR_SERIES_SEED_PREFERRED_STOCK : ShareCnt := 0
    START_INVESTOR_CASH : $ := 0
    START_COMPANY_CASH : $ := 0

state vars:
    investor_cash : $ := START_INVESTOR_CASH
    investor_Common_Stock : ShareCnt := START_INVESTOR_COMMON_STOCK
    investor_PreferredStock : ShareCnt := START_INVESTOR_PREFERRED_STOCK
    investor_SeriesSeedPreferredStock : ShareCnt := START_INVESTOR_SERIES_SEED_PREFERRED_STOCK
    company_cash : $ := START_COMPANY_CASH
    writes≤1 pay_interest_in_cash : Bool := False

situation InvestorInvests:
    Company may CommitToAcquisition(?1) (next_event_td < TIME_TILL_MATURITY)
    Company may CommitToFinancing(?1) (next_event_td < TIME_TILL_MATURITY)
    ReachMaturity (next_event_td ≥ TIME_TILL_MATURITY)

action CommitToFinancing(qualifying_round_new_money: $) transitions to AfterCommitToFinancing:
    pre: (qualifying_round_new_money ≥ (units $ 1000000))
    following situation:
        Company may NotifyInvestorOfNextEquityFinancingTerms (next_event_td ≤ (last_situation_td + 1d))
        Breach_Company (next_event_td > (last_situation_td + 1d))

action NotifyInvestorOfNextEquityFinancingTerms()  transitions to After_NotifyInvestorOfNextEquityFinancingTerms

situation After_NotifyInvestorOfNextEquityFinancingTerms:
    Company may CloseEquityFinancingSale(?1, ?2) (next_event_td > (last_situation_td + 5d))
    Investor may choose_cash_interest_repayment

action choose_cash_interest_repayment()  non-transitioning:
    transform:
        pay_interest_in_cash := True

action CloseEquityFinancingSale(qualifying_round_price: SharePrice, company_capitalization: PosShareCnt) transitions to Fulfilled:
    transform:
        cap_price : SharePrice := (VALUATION_CAP / company_capitalization)
        discount_price : SharePrice := (qualifying_round_price * DISCOUNT_RATE)
        conversion_price : SharePrice := (min discount_price cap_price)
        if pay_interest_in_cash:
            change : $ := (min (ifthenelse (last_event_td ≤ 365d) (check Pos$ ((PURCHASE_AMOUNT + ((PURCHASE_AMOUNT * INTEREST_RATE) * (last_event_td / 365d))) - PURCHASE_AMOUNT)) (check Pos$ (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) + (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) * INTEREST_RATE) * ((trust PosTimeDelta (last_event_td - 365d)) / 365d))) - PURCHASE_AMOUNT))) company_cash)            company_cash := (check $ (company_cash - change))            investor_cash := (investor_cash + change)            investor_PreferredStock := (investor_PreferredStock + (PURCHASE_AMOUNT round/ conversion_price))
        else:
            accrued_interest : $ := (ifthenelse (last_event_td ≤ 365d) (check Pos$ ((PURCHASE_AMOUNT + ((PURCHASE_AMOUNT * INTEREST_RATE) * (last_event_td / 365d))) - PURCHASE_AMOUNT)) (check Pos$ (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) + (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) * INTEREST_RATE) * ((trust PosTimeDelta (last_event_td - 365d)) / 365d))) - PURCHASE_AMOUNT)))
            investor_PreferredStock := (investor_PreferredStock + ((PURCHASE_AMOUNT + accrued_interest) round/ conversion_price))


action CommitToAcquisition(company_capitalization: PosShareCnt) transitions to AfterCommitToAcquisition
    following situation:
        Arbiter may InterveneOnDelay_Investor
        Investor may ChooseConvertToCommonStock(company_capitalization)
        Investor may ChooseMultipleRepayment

action ChooseMultipleRepayment()  transitions to Fulfilled:
    transform:
        change : $ := (min ((ifthenelse (last_event_td ≤ 365d) (check Pos$ ((PURCHASE_AMOUNT + ((PURCHASE_AMOUNT * INTEREST_RATE) * (last_event_td / 365d))) - PURCHASE_AMOUNT)) (check Pos$ (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) + (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) * INTEREST_RATE) * ((trust PosTimeDelta (last_event_td - 365d)) / 365d))) - PURCHASE_AMOUNT))) + (2 * PURCHASE_AMOUNT)) company_cash)
        company_cash := (check $ (company_cash - change))
        investor_cash := (investor_cash + change)

action ChooseConvertToCommonStock(company_capitalization: PosShareCnt) transitions to Fulfilled:
    transform:
        cap_price : SharePrice := (VALUATION_CAP / company_capitalization)
        investor_Common_Stock := (investor_Common_Stock + (PURCHASE_AMOUNT round/ cap_price))

action ReachMaturity()  transitions to AfterReachMaturity
    following situation:
        Arbiter may InterveneOnDelay_Investor
        if DEBT_VERSION:
            Investor may ChooseConversionToSeriesSeedPreferredStock(?1)
        Investor may ChooseMaturityRepayment

action ChooseMaturityRepayment()  transitions to Fulfilled:
    transform:
        change : $ := (min ((ifthenelse (last_event_td ≤ 365d) (check Pos$ ((PURCHASE_AMOUNT + ((PURCHASE_AMOUNT * INTEREST_RATE) * (last_event_td / 365d))) - PURCHASE_AMOUNT)) (check Pos$ (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) + (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) * INTEREST_RATE) * ((trust PosTimeDelta (last_event_td - 365d)) / 365d))) - PURCHASE_AMOUNT))) + PURCHASE_AMOUNT) company_cash)
        company_cash := (check $ (company_cash - change))
        investor_cash := (investor_cash + change)

action ChooseConversionToSeriesSeedPreferredStock(company_capitalization: PosShareCnt) transitions to Fulfilled:
    transform:
        cap_price : SharePrice := (VALUATION_CAP / company_capitalization)
        investor_SeriesSeedPreferredStock := (investor_SeriesSeedPreferredStock + (PURCHASE_AMOUNT round/ cap_price))
