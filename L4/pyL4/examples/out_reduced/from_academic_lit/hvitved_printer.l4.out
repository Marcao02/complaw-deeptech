------------------------------------------
file: from_academic_lit/hvitved_printer.l4

roles: Env, Arbiter, Buyer, Seller

contract params:
    CONTRACT_START : TimeDelta := 0d
    DELIVERY_TIME_ALLOWANCE : TimeDelta := 10d

state vars:
    nonoperative buyer_paid : Nat := 0
    nonoperative seller_refunded : Nat := 0
    writes≤1 delivery_td : TimeDelta

claims:
    ['MAX_TIME', '=', '44D']
    ['MAX_SITUATION_VISITS', '=', '6']

situation Awaiting_Delivery:
    Seller may Deliver when (next_event_td ≤ DELIVERY_TIME_ALLOWANCE)
    Breach_Seller after_td_contract DELIVERY_TIME_ALLOWANCE

action Deliver()  transitions to AfterDeliver:
    transform:
        delivery_td := last_event_td
    following situation:
        Buyer may Pay1stInstallment when (next_event_td == last_situation_td)
        Breach_Buyer after_td_contract last_situation_td

action Pay1stInstallment()  transitions to AfterPay1stInstallment:
    transform:
        prove (buyer_paid == 0)
        buyer_paid := 100
    following situation:
        Buyer may Pay2ndInstallment when (next_event_td ≤ (30d + delivery_td))
        Buyer may ReturnOnTime when (next_event_td ≤ (14d + delivery_td))
        EnterLate2ndInstallment after_td_contract (30d + delivery_td)

action EnterLate2ndInstallment()  transitions to Late2ndInstallment
    following situation:
        Buyer may PayLateFee when (next_event_td ≤ (44d + delivery_td))
        Breach_Buyer after_td_contract (44d + delivery_td)

action Pay2ndInstallment()  transitions to AfterPay2ndInstallment:
    transform:
        prove (buyer_paid == 100)
        buyer_paid := 200
    following situation:
        Buyer may ReturnOnTime when (next_event_td ≤ (14d + delivery_td))
        CompleteNormalSale after_td_contract (14d + delivery_td)

action ReturnOnTime()  transitions to AfterReturnOnTime
    following situation:
        Seller may DeliverRefund when (next_event_td ≤ (7d + last_situation_td))
        Breach_Seller after_td_contract (7d + last_situation_td)

action PayLateFee()  transitions to Fulfilled:
    transform:
        prove (buyer_paid == 100)
        buyer_paid := 220

action CompleteNormalSale()  transitions to Fulfilled

action DeliverRefund()  transitions to Fulfilled:
    transform:
        prove (seller_refunded == 0)
        prove (or (buyer_paid == 100) (buyer_paid == 200))
        seller_refunded := buyer_paid
