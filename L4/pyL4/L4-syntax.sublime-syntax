%YAML 1.2
---
# v1.0
name: L4
file_extensions: [l4]
scope: source.l4

variables:
  open_brack: '\(|\[|\{'
  close_brack: '\)|\]|\}'
  built_in_sort: '(Nat|PosInt|Int|NonnegReal|PosReal|Real|TimeDelta|DateTime|Bool|\$|Pos\$)'
  var_modifier: 'writeout|local|inconly|writes≤1|writeonce|writes1|nonoperative'
  time_unit: '(d|m|s|w|D|M|S|W)'

contexts:
  prototype:
    - include: comments

  main:

    - match: (\(|\[)\s*(ContractParams)\W
      captures:
          2: keyword.toplevel.l4
      push: ContractParams_toplevel

    - match: '\W(ContractParams|TimeUnit|Roles|ProseContract|StateVars|Macro|BlockMacro|Dynamics|SortDefinitions|DefaultActionTimeLimit|NLGNames|StartDatetime|Invariant|Invariants|Definitions|NLGSection|NonoperativeContractParams|Ontology|NLDefinitions)\W'
      captures:
        1: keyword.toplevel.l4

    - match: '\W{{built_in_sort}}\W'
      captures:
        1: support.type

    - match: '"'
      push: in_stringlit

    - match: \w+(')\W
      captures:
        1: keyword.operator

    - match: '\W(before_split|at_split|within|after_split|after_dt|before|at|after|on|by|immediately|last_situation_td|AllowedRoles|may-later|may|must-later|must|check|nlg|nlgsection|Action|nlglogicsection|Precond|Precondition|Pre|FollowingSituation|Situation|Future|Sort|Definition|Axiom|Fn|StartSituation|StateTransform|TransitionsTo|AllowedSubjects|when|where|{{var_modifier}})\W'
      captures:
        1: keyword.other

    - match: \W(ifflag|if|else)\W
      captures:
        1: keyword.control

    - match: \W(not|and|or|max|min|str2dt|after_dt)\W
      captures:
        1: keyword.operator

    - match: :=|:|=|\+=|\+|\*|ceil/|/|≤|≥|>=|<=|->|→|¬|∨|∧|∀|∃!|∃|<|>|\s-\s
      scope: keyword.operator

    - match: \W(last_situation_td|next_event_td|last_event_td|traversals|visits|Fulfilled)\W
      captures:
        1: variable.language

    - match: \?\w+
      scope: variable.parameter

    # timedelta literal
    - match: '(\d+{{time_unit}})[\W]'
      captures:
        1: constant.other
      # scope: constant.other

    # standalone timeunit
    - match: '[\W]({{time_unit}})[\W]'
      captures:
        1: keyword.other
      # scope: keyword.other

    - match: \W(\d+.\d+|\d+)\W
      captures:
        1: constant.numeric

    # - match: \(
    #   push: brackets
    # - match: \)
    #   scope: invalid.illegal.stray-bracket-end

  ContractParams_toplevel:
    - meta_scope: 'scope_ContractParams_toplevel'
    - include: main
    - match: '{{open_brack}}'
      push: ContractParams_depth1
    - match: '{{close_brack}}'
      pop: true

  ContractParams_depth1:
    - meta_scope: 'scope_ContractParams_depth1'
    - include: main
    # - match: '(\w+)\s*\:\s*\w+'
    #   captures:
    #     1: entity.name.function
    - match: '{{open_brack}}'
      push: ContractParams_depth2
    - match: '{{close_brack}}'
      pop: true

  ContractParams_depth2:
    - meta_scope: 'scope_ContractParams_depth2'
    - include: main
    - match: '{{open_brack}}'
      push: ContractParams_deeper
    - match: '{{close_brack}}'
      pop: true

  ContractParams_deeper:
    # - meta_scope: test
    - include: main
    - match: '{{open_brack}}'
      push: ContractParams_deeper
    - match: '{{close_brack}}'
      pop: true

  # namedefcontext:
  #   - match: \b\w+\b
  #     scope: entity.name.type
  #     pop: true

  # brackets:
  #   - match: \)
  #     pop: true
  #   - include: main

  in_stringlit:
    - match: \{
      set: in_template
    - match: '"'
      pop: true
    # - match: '[^"]*'
    - match: .
      scope: string.quoted.double.l4
    # - meta_scope:
    - meta_include_prototype: false

  in_template:
    - match: \}
      set: in_stringlit
    # - match: .
      # scope: string.regexp

    - meta_include_prototype: false

  comments:
    - match: ;.*\n
      scope: comment.line.semicolon
      pop: true



