(LSMVersion 3.0.0)

(GlobalVars
	(writeonce amount_invested : $ = 0)
	(inconly investor_SAFE_Preferred_Stocks : ℕ = 0)
	(inconly investor_Common_Stocks : ℕ = 0)
	(writeAtMostOnce liquidity_price : $ = None)
	(writeAtMostOnce li_cashout : $ = 0)
	; later maybe: subtypes of ℕ for units, e.g. Preferred Stocks in this case
)

(Actors Investor Company)

(ContractParams
	(PURCHASE_AMOUNT : $ := $100000)
	(VALUATION_CAP : $ := $100)
	(DISCOUNT_PERCENT : % := 20) ; must be < 100
)

(OracleVars
	; for Equity Financing
	(writeAtMostOnce COMPANY_CAPITALIZATION : ℕ)

	; for Liquidity
	(writeAtMostOnce LIQUIDITY_CAPITALIZATION : ℕ)
	(writeAtMostOnce INVESTOR_PERCENT_OF_CASHOUT_INVESTOR_INVESTMENTS : %)
	(writeAtMostOnce COMPANY_CASH_AT_LIQUIDITY_EVENT : $)

	; for StartDissolution
	(writeAtMostOnce COMPANY_CASH_AT_DISSOLUTION_EVENT : $)
	(writeAtMostOnce INVESTOR_PERCENT_OF_DISSOLVING_INVESTOR_INVESTMENTS : %)
)

(DefinedParams
	(DiscountRate = 100 - DISCOUNT_PERCENT)
	(LiquidityPrice = VALUATION_CAP / LIQUIDITY_CAPITALIZATION)
)

; (ProseContract  )

(FormalContract
	"SAFE"
	(StartState InvestorInvests)
	(Event&State InvestorInvests()
		(Entrance
			(amount_invested := PURCHASE_AMOUNT)
		)
		(ActorEvents
			(Company may
				(StartDissolution() nodeadline)
				(StartLiquidityEvent() nodeadline)
				(StartLiquidityEventWithChangeOfControl() nodeadline)
				(StartEquityFinancing() nodeadline)
			)
		)
	)

	(Action&State StartDissolution()
		(ActorEvents
			(Company must
				; actually, the English contract says this can happen before the dissolution event.
				(DissolutionTransferCash() prior_to_or_within discretionary )
			)
		)
	)

	(Action&State DissolutionTransferCash()
		(Entrance
			(dis_cashout := (
				ifthenelse (PURCHASE_AMOUNT ≤ (COMPANY_CASH_AT_DISSOLUTION_EVENT * INVESTOR_PERCENT_OF_DISSOLVING_INVESTOR_INVESTMENTS))
				 PURCHASE_AMOUNT
				 (COMPANY_CASH_AT_DISSOLUTION_EVENT * INVESTOR_PERCENT_OF_DISSOLVING_INVESTOR_INVESTMENTS)
			))
			(investor_cash += dis_cashout)
			(company_cash -= dis_cashout)
		)
		(ActorEvents
			(Company mustif (dis_cashout < PURCHASE_AMOUNT)
				(DissolutionTransferAssets() within discretionary)
			)
		)
		(Fallbacks
			(Fulfilled() if (dis_cashout == PURCHASE_AMOUNT) )
		)
	)


	(Action&State DissolutionTransferAssets()
		(Entrance
			(liquidity_price := (VALUATION_CAP / LIQUIDITY_CAPITALIZATION))
			(investor_Common_Stocks += ((PURCHASE_AMOUNT - li_cashout) / liquidity_price))
		)
		(Fallbacks
			(Fulfilled() )
		)
	)


	(Action&State StartLiquidityEvent()
		(ActorEvents
			(Investor may
				(LiquidityChooseCashPayment() within discretionary)
				(LiquidityChooseStockPayment() within discretionary)
			)
		)
		(Fallbacks
			(LiquidityChooseStockPayment())
		)
	)

	(Action&State LiquidityChooseStockPayment()
		(ActorEvents
			(Company must
				(LiquidityTransferCommonStock() within discretionary)
			)
		)
	)

	(Action&State LiquidityTransferCommonStock()
		(Entrance
			(liquidity_price := (VALUATION_CAP / LIQUIDITY_CAPITALIZATION))
			(investor_Common_Stocks += ((PURCHASE_AMOUNT - li_cashout) / liquidity_price))
		)
		(Fallbacks
			(Fulfilled() )
		)
	)

	(Action&State LiquidityChooseCashPayment()
		(ActorEvents
			(Company must
				(LiquidityTransferCash() within discretionary )
			)
		)
	)

	(Action&State LiquidityTransferCash()
		(Entrance
			(li_cashout := (
				ifthenelse (PURCHASE_AMOUNT ≤ (COMPANY_CASH_AT_LIQUIDITY_EVENT * INVESTOR_PERCENT_OF_CASHOUT_INVESTOR_INVESTMENTS))
				PURCHASE_AMOUNT
				(COMPANY_CASH_AT_LIQUIDITY_EVENT * INVESTOR_PERCENT_OF_CASHOUT_INVESTOR_INVESTMENTS)
			))
			(investor_cash += li_cashout)
			(company_cash -= li_cashout)
		)
		(ActorEvents
			(Company mustif (li_cashout < PURCHASE_AMOUNT)
				(LiquidityTransferCommonStock() within discretionary )
			)
		)
		(Fallbacks
			; TODO: should add assertion that li_cashout == PURCHASE_AMOUNT
			(Fulfilled())
		)
	)



	(Action&State StartLiquidityEventWithChangeOfControl()
		; todo

	)


	(Action&State StartEquityFinancing()
		(Description "Equity Financing Event begins")
		(ActorEvents
			(Company must
				(EquityDeliverDocsWithProRataAgreement() within discretionary)
				(EquityDeliverDocsWithoutProRataAgreement() within discretionary)
			)
		)
	)

	(Action&State EquityDeliverDocsWithProRataAgreement()
		(ActorEvents
			(Company must
				(EquityIssueSAFEPreferredStock() within discretionary)
			)
		)
	)

	(Action&State EquityDeliverDocsWithoutProRataAgreement()
		(ActorEvents
			(Company must
				(EquitySubmitProRataRightsAgreementForSigning() within discretionary)
			)
		)
	)

	(Action&State EquitySubmitProRataRightsAgreementForSigning()
		(ActorEvents
			(Investor must
				; TODO: obviously this shouldn't be a *must*. they ought to be able to send it back with proposed amendments/corrections
				(EquitySignProRataAgreement() within discretionary)
			)
		)
	)

	(Action&State EquitySignProRataAgreement()
		(ActorEvents
			(Company must
				(EquityIssueSAFEPreferredStock() within discretionary)
			)
		)
	)


	(Action&State EquityIssueSAFEPreferredStock()
		(Entrance
			( investor_SAFE_Preferred_Stocks += (PURCHASE_AMOUNT / COMPANY_CAPITALIZATION) )
		)
		(Fallbacks
			(Fulfilled())
		)
	)

)

(DotFileName 'SAFE.dot')
(ImgFileName 'SAFE.png')