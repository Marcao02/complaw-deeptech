#+Legalese Language Design Notes

https://en.wikipedia.org/wiki/Cognitive_dimensions_of_notations

* Goal

The L4 toolchain aims to offer technically-minded end-users a programming environment in which to draft, simulate, and [[http://legal-dictionary.thefreedictionary.com/engrossing][engross]] legally binding contracts, both on and off blockchain.

End-user personas include law students, technically minded lawyers, and programmers who want to produce their own contracts with minimal reliance on human consultancy. The latter category includes individuals filling the in-house counsel role within an enterprise; for example, the founder of an early-stage high tech startup faced with a situation requiring legal contracts, whose first instinct is not to reach for the phone, but to query a package manager.

The toolchain includes a multi-stage compiler, which transforms L4 source code in /narrative form/ into a sequence of intermediate representations (including /CSL/), and finally to one or more target languages such as CommonAccord, English, or Ethereum bytecode.

The toolchain includes a verifier which is responsible for assessing the validity of contracts. Yay automatic bugfinding!e

The toolchain does not include an IDE. Development of an Emacs mode is left as an exercise for the community. :)

It is envisioned that a library of L4 contracts will emerge to cover common scenarios faced by the user community.

Such scenarios are grouped by /vertical/: NDAs, employment contracts, investment agreements, ESOPs.

The library will also offer /horizontals/, organized by language, time, and jurisdiction. In the same way that a high level language modularizes and abstracts away the details of the underlying processor architecture, L4 makes it possible to adapt a contract to different languages or jurisdictions by changing a single ~import~ line. An employment contract should be able to import a horizontal for ~Quebec French 2017~, and compile; the same contract could import ~Singapore Chinese 2016~ or ~Delaware English 2015~, and produce different target representations that share essential semantics.

* Smart Contracts

We distinguish between on-blockchain smart contracts, and off-blockchain smart contracts.

What counts as an on-blockchain smart contract? An Ethereum contract is the obvious example.

What counts as an off-blockchain smart contract? An old-fashioned paper document, printed from a PDF, signed by hand with quill and ink, and subsequently scanned to Dropbox, is an off-blockchain smart contract, *if* the PDF ultimately originated in a specification written in a formal language, which was automatically transformed by software to the PDF, and could also be transformed by software into an alternative representation suitable for automated performance.

Automated performance includes integration with existing computer-based production operation systems. For example, a contract may require a vendor to provide 20 gigaflops of computing capacity between 9am and 5pm; that requirement could flow into some vendor script which brings Amazon EC2 instances up and down accordingly.

See also http://digitalchamber.org/assets/Smart-contracts-12-use-cases-for-business-and-beyond.pdf for a perspective on the smart contract spectrum.

* Insights

Lessig wrote: [[https://www.amazon.com/Code-Other-Laws-Cyberspace-Version/dp/0465039146/][code is law]]. Conversely, [[https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2511947][law is code]].

What is software? A representation, in formal language, of the specification and implementation of processes that operate in a distributed context, performed on computers communicating over an electronic network. (Some software may be standalone, but nowadays the vast majority of interesting software runs on a network in some way.)

What is a contract? A representation, in /informal/ language, of the specification and implementation of /business/ processes that operate in a distributed context, performed by parties communicating by registered mail, fax, or (nowadays) over an electronic network.

So, software and contracts are structurally very similar. They specify distributed processes, detailing the obligations of different parties, and mechanisms for communication. (It is no surprise that [[https://en.wikipedia.org/wiki/Design_by_contract][design-by-contract]] is a thing.)

What are the differences?

** Formal vs Informal

When lawyers draft contracts, they're trying to program, only they don't know any programming languages. So they program in English. And the history of corporate litigation can be read as a history of the problems with this approach. It is easy for parties to come to different interpretations, due to the absence of formal language. When parties want to get out of an agreement, they search for bugs that might invalidate the contract. And, when the relationships sours, they look for [[https://en.wiktionary.org/wiki/sploit][exploits]] which might confer some advantage.

** Automated vs Manual Execution

Business processes predate computers, so they historically ran on human labour. The "computer revolution" is a history of business processes switching from running on humans to running on machines. What industrial-era machines did to blue-collar jobs, post-industrial computers will do to white-collar jobs. The implications for the legal profession are described in [[https://www.amazon.com/Future-Professions-Technology-Transform-Experts/dp/0198713398][Susskind]].

Software processes, once executed, can run without human involvement, modulo the ops team valiantly carrying the pager.

Traditional, non-smart contracts specify business processes, with the assumption that humans are an integral component of governing and executing those processes.

Smart contracts offer the promise of specifying business processes in a form which invite largely or wholly automated implementation and execution.

** Snailmail vs Online Communication

Required advertisements in a newspaper can be mapped to timestamped blockchain notices.

Registered mail corresponds to a protocol for sending notices, with delivery confirmation: email or something like it.

If parties to a contract are [[https://en.wikipedia.org/wiki/Actor_model][actors]], contractually stipulated notices are messages.

* Claim

The deep correspondences between software and contracts suggest the possibility of a unification.

Unification can occur at several levels: from the underlying mathematics of modelling execution (a chip designer might say "ah, this is a problem in [[https://en.wikipedia.org/wiki/Communicating_sequential_processes][CSP]]; it reminds me of a Verilog plugin"), to formal language specification and natural language generation, to the social practices of offering opensource libraries.

Software is eating the world. And software is eating law. But software is eating law in a different way than how software is eating transportation, or medical diagnostics; the approach here is to interpret law itself as software. So all the tools and techniques available in the software world apply directly to the legal world.

* Programming in L4

The remainder of this document is a tutorial and user guide to L4, for programmers.

We begin by discussing the human practice of developing contracts.

* Using Precedents

Most traditional contracts are usually derived from other contracts, starting with copy-and-paste, followed by some manual editing. Programmers might be reminded of [[https://en.wikipedia.org/wiki/Cargo_cult_programming][cargo cult programming]].

Over the past 20 years, the document assembly industry has attempted to improve this state of affairs using contract templates and libraries of standard clauses, combined using wizard-based user interfaces. Early efforts included Hotdocs and ContractExpress. Recent, more Internet-era efforts include [[http://commonform.github.io/][CommonForm]] and [[http://www.commonaccord.org/][CommonAccord]].

These approaches are largely /syntactic/: they are competent template-based text planning systems, but there is no deep integration with the semantics of a contract: they will not tell you, for instance, if some inconsistency lies in wait in the future of a contract, triggered by some combination of events that require a party to do two incompatible things at the same time. They will not tell you if a proposed new contract violates some existing contract, or some existing legislation. Template systems depend on human smarts to anticipate these errors.

In L4, a model contract is a function that takes a bunch of parameters. The end-user particularizes the contract by giving the contract the parameters it wants. The result is an instantiation of the contract which is ready for signature.

In practice, the casual end-user is expected to choose a sample contract available in the repo; the sample contract imports a collection of libraries representing the relevant horizontal context and vertical domain; the end-user can then configure the contract in some visual IDE or old fashioned text editor, overriding default parameters as needed to particularize the contract for their situation; they can then compile the contract to the desired target language for execution.

In other words, ~sample/nda.l4~ says ~import lib/uk.l4~. Copy ~sample/nda.l4~ to ~build/nda.l4~. Run ~bin/l4~ on ~build/nda.l4~ and get ~out/myco-nda-uk.pdf~.

If the end-user wishes to specify a scenario which is not easily parameterized within the available sample contract, she may write code to represent the scenario, in the same way one might pass a first-class ~function~ as a parameter to another function. Such code has the full range of expressivity of a typical programming language: if/then/else, case statements, a variety of data types and built-in operators.

We believe it will be easier for parties to communicate and negotiate the terms of a contract using the high-level representation, than by arguing over the wordsmithing of the "compiled form" natural language. Negotiating the semantics and syntax at the same time is a double challenge.

A similar double challenge faces beginner drivers, who have to practice two things at once: externally, the rules of the road and interacting with other drivers, and internally, handling the clutch and the gearshift.

A triple challenge was [[http://dev.stephendiehl.com/hask/][noted by Stephen Diehl]]: "In my opinion the fundamental fallacy of monad tutorials is not that intuition for monads is hard to convey ( nor are metaphors required! ), but that novices often come to monads with an incomplete understanding of points (1), (2), and (3) and then trip on the simple fact that monads are the first example of a Haskell construct that is the confluence of all three."

Of course, we aren't getting rid of the double challenge entirely: instead of arguing about the expression in English, parties will argue about the expression in L4. And if L4 is hard to learn then we will have a huge adoption problem. We're gambling that most technically minded individuals will be able to grasp L4 /narrative syntax/ quickly enough to hit payoff, especially when the payoff is augmented by other useful tools like scenario visualization and automated bugfinding.

* Contract Evolution

Let's consider a situation where a contract is being drafted from scratch. Over time, during the course of editing, contract source code evolves through several stages:

1. well-formed
2. consistent
3. complete
4. compliant
5. correct

A *well-formed contract* has a list of parties, describes some consideration, describes the obligations-permissions-prohibitions of the parties, and contains a signature, or execution, component.

A *consistent contract*, in addition to being well-formed, is satisfiable and contains no internal contradictions. All states described by the contract are reachable: for every given state, there exists some combination of events and choices that would cause the contract to enter that state.

A *complete contract*, in addition to being consistent, is total: there does not exist any combination of events and choices that leads to an undefined state. An undefined state is a state where blame assignment is not determinable and decision rights have not been allocated.

A *compliant* contract, in addition to being complete, is /externally/ consistent with existing regulation and legislation, and with prior contracts.

A *correct* contract, in addition to being compliant, represents the intent of the parties well enough that they would be willing to sign it.

As a human "programmer" works on a contract, it usually evolves through the stages, usually by adding content, sometimes by taking away content.

* Narrative Form

A contract in /narrative form/ consists of one or more statements.

Statements fall into one of the following categories:
- Basic :: defines a term without reference to any other term.
- Simple :: defines a term with reference to another term in the current contract.
- External :: defines a term with reference only to an external definition, e.g. to a definition found in legislation. But without reference to any other term defined in the current contract.
- Complex :: refines or redefines a term defined elsewhere.
- Compound :: defines a term with reference to more than one of the above.

A complex term adds a *complication* to the contract. We borrow the word from horology: https://en.wikipedia.org/wiki/Complication_(horology).

* Compact Form

/Compact form/ offers an alternative representation to narrative form.

/Narrative form/ and /compact form/ are isomorphic. It is possible to losslessly convert from one form to the other, and back.

In compact form, multiple narrative statements may be combined with the help of /syntactic sugar/ into denser statement expressions.

* Normal Form

The compiler converts narrative/compact form into an intermediate representation called [[https://en.wikipedia.org/wiki/Normal_form_(abstract_rewriting)][normal form]]. Normal form preserves the semantics of the contract, but is organized in a different way that is easier for computers to perform validation, scenario exploration, and natural language generation on.

* Narrative Statements: Progressive Refinement

Imagine a progressive GIF or JPEG, layering in more and more detail as the file transfers. This is an example of progressive refinement.

Narrative form obeys the doctrine of progressive refinement, which is to say that the major points are given first in broad strokes, then 
revised in subsequent statements.

Why progressive refinement? Because of the limitations of human cognitive architecture: humans do not parse a text into symbol tables and syntax trees; they parse a text into characters and stories. Like buildings, stories have shape, texture, and detail: from a distance, only the outlines may be seen; as one approaches, finer details may appear, until eventually the mind grasps the whole.

Let's look at some examples.

** FizzBuzz

In the following pseudocode snippet, a rule is progressively refined to cover exceptions, and exceptions to exceptions.

#+BEGIN_SRC
Write a program that prints the numbers from 1 to 100.

But for multiples of three print "Fizz" instead of the number and for the multiples of five print "Buzz".

For numbers which are multiples of both three and five print "FizzBuzz".
#+END_SRC

This offers a good example of the weakness of informal language. Can you spot the bug in the specification?

Are the ~but~ and ~and~ operators of equal precedence? Are they left- or right-associative? Do we assume [[https://en.wikipedia.org/wiki/Ellipsis_(linguistics)][ellipsis]]?

If ~and~ binds tighter than ~but~, or if the operators are right-associative, then we interpret the statement (expanding the ellipsis) as

#+BEGIN_SRC
But (for multiples of three print "Fizz" instead of the number
     and
     for the multiples of five print "Buzz" instead of the number)
#+END_SRC

Here's an alternative interpretation:

#+BEGIN_SRC
(But for multiples of three print "Fizz" instead of the number)
(and for the multiples of five print "Buzz")
#+END_SRC

The first interpretation produces ~1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz~.

The second interpretation produces ~1 2 Fizz 4 5 Buzz Fizz 7 8 Fizz 10 Buzz 11 Fizz 13 14 15 FizzBuzz~.

Maybe FizzBuzz is a shibboleth: it [[http://wiki.c2.com/?FizzBuzzTest][purports to test programming skill]], but secretly tests whether you're a native speaker of English.

If you had no trouble following this argument, and you're now thinking about implicit bias, congratulations, you are an existence proof that programmers and lawyers think the same way about the same things.


** Narrative Example: Attendance Rule

This snippet illustrates L4's /rule syntax/ for an employment agreement.

*** Informal Version

Employees must start work by 9am every work day, excluding weekends and holidays, and excluding staff days off.

On Fridays, employees can turn up at 10:30am instead of at 9am.

But if the employee is management personnel, they don't get staff days off.

If the employee is security personnel, they don't get any days off. They also don't have to turn up at the same time as everybody else; instead, they run on shifts which are scheduled separately from other staff.

All employees can get the day off if they call in sick at least three hours prior to when they are supposed to start work.

But if they have called in sick for more than 10 out of the last 30 days, their contract will be subject to review and termination.

The stacking of one exception upon another may remind you of the "[[http://www.nyulawreview.org/issues/volume-83-number-4/critical-guide-vehicles-park][no vehicles in the park]]" problem; see also http://lesswrong.com/lw/ld/the_hidden_complexity_of_wishes/

But, even with the limitations and imperfections implied by these problems, we are able to produce useful contracts.

*** Narrative Form
#+BEGIN_SRC
data Employee = Employee { isStaffPersonnel      :: Bool
                         , isManagementPersonnel :: Bool
                         , isSecurityPersonnel   :: Bool
                         , sickDays              :: [ Date ]
                         , workDays              :: [ Date ]
                         }

action reportToWork Employee counterparty Company: push day Employee.workdays
action callInSick   Employee counterparty Company: push day Employee.sickdays

// the company is responsible for updating the contract with a shift roster,
// the contents of which are not fully determined at contract compile time.
// this is an example of contract incompleteness: the contract does not fully
// specify every possible future, but instead defers certain futures, allocating
// decision rights to one of the parties.
dynamic shiftHours <Company> :: Employee -> Date -> Time

rule "attendance" recurring daily: <employee> MUST reportToWork on day by starttime
  where starttime = if day isFriday then 10:30am else 9am ("lateFriday")

attendance exception "holiday": day isHoliday or day isSaturday or day isSunday
attendance exception "daysoff": employee isStaffPersonnel and day isCompanyDeclaredStaffDayOff

attendance.daysoff           exception "management": employee.isManagementPersonnel
attendance.{daysoff,holiday} exception   "security":   employee.isSecurityPersonnel

attendance modification "securityShifts": if Employee.isSecurityPersonnel
                                          then starttime = shiftHours()

attendance exception "sickleave": <employee> callInSick by starttime - 3h

function sickDays :: Employee -> Int
function sickDays = sum (\case True -> 1; False -> 0) filter \a -> a > (day - 30D)) (take 30 employee.sickDays)

rule "extended illness" recurring daily:
    IF   sickDays > 10 / 30
    THEN <company> MAY terminateContract

rule "too many shifts" recurring daily:
    IF   workDays > 25 / 30
    THEN <employee> MAY terminateContract

#+END_SRC

In humans, childhood is a relatively brief phase of rapid development; most of one's lifetime is spent in adulthood, growing increasingly decrepit, and attempting to stave off the ravages of time but inevitably accruing various forms of debt.

Similarly, [[https://pdfs.semanticscholar.org/7eee/629b22cd3db63296cac13a0c37cb0a7235f6.pdf][most of the costs of software lie in maintenance, not development]].

The same is true for contract templates: initial drafting is brief, but contracts run for years. People dip in and out of templates, adding rules and exceptions as the need arises, or as the lessons of experience are learned.

Therefore, narrative form optimizes for ease of modification.

By thinly smearing the semantics of a contract across a relatively flat landscape, we miminize [[https://en.wikipedia.org/wiki/Connascence_(computer_programming)][connascence]] and [[https://en.wikipedia.org/wiki/Coupling_(computer_programming)][coupling]]. To test if their change broke anything, the end-user may rely on the scenario visualization and test-suite components of L4.

*** Compact Form: Attendance Rule

By contrast, compact form stacks syntax trees deeper, and is more taxing on human working memory, but may be a more efficient venue for debug-time inspection.

L4's compiler transforms the narrative form into:

#+BEGIN_SRC
rule "attendance" periodic (every :: Date -> Bool, by :: Time) <employee>
     | isSecurityPersonnel Employee   = MUST reportToWork (by: shiftHours())
     | otherwise                      = MUST reportToWork (every: isWorkDay(), by: startTime(day))
  where isWorkDay (employee :: Employee, day :: Date) :: Bool
        | isManagementPersonnel employee = not (isHoliday day or isSaturday day or isSunday day)
        | isStaffPersonnel employee      = not (isHoliday day or isSaturday day or isSunday day or companyDeclaredStaffDayOff day)
        | isSecurityPersonnel employee   = const true
        startTime (day :: Day) :: Time
        | isFriday day   = 10:30am
        | otherwise      =  9:00am

dynamic shiftHours <Company> :: Employee -> Date -> Time

rule "sickleave" (day :: Date) modifies attendance
    if (attendance.isWorkDay())
       <employee>
       MAY   callInSick(date: day, by: reportToWork.by - 3h)
       HENCE <company> MUST waive( attendance ) for current day

rule "extended illness" recurring daily:
    IF   sickDays > 10 / 30
    THEN <company> MAY terminateContract

rule "too many shifts" recurring daily:
    IF   workDays > 25 / 30
    THEN <employee> MAY terminateContract

#+END_SRC


* Reasoning By Example

L4 statements may specify a set of specific examples, and then derive a rule generalizing those examples.

There are risks to this approach of course but this also serves as an easy embedding of a test suite within the contract itself.

* Completeness through Deferral

The complete contract, according to the winners of 2016's Nobel Economics prize, is impossible. A contract cannot anticipate every possible future, even with the help of default clauses. But a contract can specify how the parties will work through unanticipated futures.

In L4, it is possible for a contract to describe a scenario as /deferred/. A /deferred/ scenario specifies a resolution mechanism for handling that scenario.
