* The L4 Language Family
* Marketecture Diagram

| End-User                                                     |
|--------------------------------------------------------------|
| Application                                                  |
| User Interface Layer                                         |
|--------------------------------------------------------------|
| L6: ultracompact, human-read/writeable, very few variations, |
| heavy reliance on defaults                                   |
|--------------------------------------------------------------|
| L5: compact, human-read/writeable, full expressiveness of    |
| variation, limited expressiveness of inline code             |
|--------------------------------------------------------------|
| L4: human-read/writeable, all defaults explicit, full        |
| expressiveness of inline code                                |
|--------------------------------------------------------------|
| - underlying CSL                                             |
| - GF                                                         |
| - L3 XML                                                     |

* separate microlanguages to specify different objects

** Entity
- name
- address
- identifier type
- identifier
- home jurisdiction / country of citizenship
** Relation
- [Entity]
- Maybe [agreement]
** Agreement
- CSL / L4

* L6 examples

- yc safe ($3.5M cap, no discount)
- yc safe (no cap, no discount)
- yc safe (no cap, 20% discount)
- yc safe (no cap, no discount, mfn)

* L5 example

#+BEGIN_SRC yaml
  Instrument: YC Safe
  Cap: S$3.5M
  Discount: none
  Parties:
    Company:
      Name: Acme Pte. Ltd.
      Address: 71 Ayer Rajah Crescent, Singapore 139951
      UEN: 1234566
      State: Singapore
    Investors:
      - Name: Alice
        Address: 1 Honcho Lane
      - Name: Bob
        Address: 2 Honcho Lane
      - Name: Carol
        Address: 3 Honcho Lane

FulfilmentExpression: fulfilment

ObligationExppression:
  <party> MUST action(parameters)
        [ WHERE PlainExpression ]
          DUE ( (AFTER n1 WITHIN n2) | "immediately" )
        [ REMAINING z ]
          HENCE c1
          LEST c2
#+END_SRC

  the <party>, or ObParty, is responsible that the action occur, satisfying the conditions in the WHERE expression, within the time interval specified by the DUE part.

  if the action does not occur, or does not satisfy the conditions, then control passes to c2.

CONTROL FLOW KEYWORDS: UPON/HENCE/LEST

  one may think of the familiar IF/THEN/ELSE as parallel to UPON/HENCE/LEST.

  L4 uses IF/THEN/ELSE for data flow, and UPON/HENCE/LEST for control flow.

ABOUT LEST

  L4 introduces a keyword, LEST, which is not present in CSL. LEST is semantic sugar for a common pattern in contracts.

  In the real world, most contracts specify a normative path (what should happen) and a reparations path (which typically include penalties and remedies for straying from the normative path).

  CSL models such paths as clause disjunction, allowing a party to freely choose between the normative or the reparations path.

"Although we recognise the importance of reparation activities in contracts, we instead consider them ordinary choices, rather than choices with an implicit agreement to conform first and foremost with primary objectives." Hvitved p.59

  In the following examples the responsible <party> field has been omitted for clarity.

   clause = normative() due before d1
            OR
            reparation() due after d1

  If you have read Freakonomics, you might be reminded of the study in which daycare centers charged parents a penalty when they were late picking up their kids; the parents didn't see it as a penalty, just a fee for service, so they happily paid it and left their kids longer. http://thefilter.blogs.com/thefilter/2009/12/the-israeli-childcare-experiment.html
  http://rady.ucsd.edu/faculty/directory/gneezy/pub/docs/fine.pdf

   contract =      pick_up_child() due after 4:45pm before 5pm
              OR ( pick_up_child() due               after 5pm before 10pm
                   THEN
                   payment((pick_up_child.eventTime - 5pm) * $1/minute) due before contract.month_end )

  In CSL, ObExps only have a ~THEN~ part; if the clause is not met, then a Breach results.

  In L4, HENCE is equivalent to CSL's THEN keyword.

  Now, in the common pattern in the real world, the normative path and the reparations path are divided over a deadline: the normative path is supposed to happen before the deadline, and the reparations path takes effect only after the deadline.

  in L4, such a pattern is sugared by the LEST keyword:

   contract =       pick_up_child() due after 4:45pm before 5pm
              LEST (pick_up_child()                             before 10pm
                    HENCE
                    payment((pick_up_child.eventTime - 5pm) * $1/minute) due before contract.month_end )

  Note the omission of "after" in the second clause; it is automatically filled by the L4 compiler during desugaring.

  an L4 ObExp of the form

   (c1 ... due ... before d1) LEST (c2 ...)

  desugars to the CSL form

   (c1 ... due ... before d1)   OR (c2 ... after d1 ...)

  if the left-clause of LEST is a compound contract, what happens?

  if c1 = (c1a AND c1b) the due deadline d1 is resolved as the earlier deadline of c1a, c2a.

  if c1 = (c1a  OR c1b) the due deadline d1 is resolved as the later   deadline of c1a, c2a.

  the deadline resolution is recursive.

#+BEGIN_SRC yaml

ExternalChoice:
     UPON action(parameters)
        [ WHERE PlainExpression ]
          DUE ( (AFTER n1 WITHIN n2) | "immediately" )
        [ REMAINING z ]
          HENCE c

#+END_SRC

  an action's parameters in an UPON expression should be treated as accessors emitted by an external event -- they are read values, not write. so, something happens in the world, and the contract has to see if the event meets its criteria.

  in native CSL, a rather verbose WHERE syntax is used to match the
  conditions.

  in L4, WHERE is supported, but we improve conciseness in two ways.

  first, parameters are named and positional, in the way ruby 2.x offers both.

  second, the action parameters are partial applications e.g. (== 10).

  90% of the time you're just testing for equality, so you would say something like

     action Payment(sender: Party, receiver: Party, amount: Currency)

     UPON Payment(sender == Alice, receiver == Bob, amount > USD 1000)

     UPON Payment(Alice, Bob, > USD 1000)

  Proposed convention: the *default party* in an action is the first party named. if an action expression does not specify the default party, the default party is taken as the nearest enclosing ObParty. This may lead to some ambiguity if the action is evaluated in different contexts, where the nearest enclosing ObParties are different. This breaks purity so maybe we shouldn't do it.

#+BEGIN_SRC yaml

InternalChoice:
       IF PlainExpression
     THEN c1
     ELSE c2

Conjunction:
      c1 and c2

Disjunction:
      c1 or c2

Examples:

investor MUST pay(amount:$3000, to:company)
              AND
              notify(to:company,
                     subject:"section 2 notification",
                     body:complete,
                     via:email)
              due(within:_)
              remaining z
        HENCE c1
         LEST c2

#+END_SRC

** etymological note


then (adv.) Look up then at Dictionary.com
adverb of time, Old English þanne, þænne, þonne, from Proto-Germanic *thana- (source also of Old Frisian thenne, Old Saxon thanna, Dutch dan, Old High German danne, German dann), from PIE demonstrative pronoun root *to- (see the). 

As a conjunction, "in that case, therefore," in Old English. As an adjective, "being at that time," from 1580s. As a noun from early 14c. For further sense development, see than. Similar evolutions in other Germanic languages; Dutch uses dan in both senses, but German has dann (adv.) "then," denn (conj.) "than." Now and then "at various times" is attested from 1550s; earlier then and then (c. 1200).
thence (adv.) Look up thence at Dictionary.com
late 13c., from Old English þanone, þanon "from that place" + adverbial genitive -es. Old English þanone/þanon is from Proto-Germanic *thanana (source also of Old Saxon thanana, Old Norse þana, Old Frisian thana, Old High German danana, German von dannen), related obscurely to the root of then, and ultimately from PIE demonstrative base *to- (see the). Written with -c- to indicate a voiceless "s" sound. Meaning "from that time" is from late 14c.; sense of "for that reason" is from 1650s. From thence is redundant.

hence (adv.) Look up hence at Dictionary.com
"(away) from here," late 13c., hennes, with adverbial genitive -s + Old English heonan "away, hence," from West Germanic *hin- (source also of Old Saxon hinan, Old High German hinnan, German hinnen), from PIE *ki-, variant of root *ko- "this," the stem of the demonstrative pronoun (see here). 

The modern spelling (mid-15c.) is phonetic, to retain the breathy -s- (compare twice, once, since). Original "away from this place;" of time, "from this moment onward," late 14c.; meaning "from this (fact or circumstance)" first recorded 1580s. Wyclif (1382) uses hennys & þennys for "from here and there, on both sides."


* L4 example

#+BEGIN_SRC yaml
  # L4 version:1.0 format:yaml

  Agreement:
    title: YC Safe (Singapore)
    alias: Agreement
    locale: en
    template: standardAgreement
    jurisdiction: SG
    entry point: Conditions Precedent
  
  Visible Definitions:
    Agreement Date: 2016-12-31
      type: Date
      asString.format.en.default: 1 January, 1970
    Principal: 100000
      type: Nonzero Currency
      currency: SGD
    Cap: Just 3.5M
      type: Maybe Currency
      currency: SGD
    Discount: Nothing
      type: Maybe Percentage
      comment: the share price in the qualifying round will be reduced by this amount; see also DiscountComplement below.
    Lead Investor: Alice
      type: Entity
    Maturity Date: =(AgreementDate + 3Y)

  # the standardAgreement template could define the types and currency defaults, to reduce clutter in the visible definitions section,
  # also the standard sections that the template compiles
    
  Internal Definitions:
    CPExpiry: 1 Jan 2017
    DiscountComplement: =(100 - Discount)
    ClosingDate: =(latestOf([bananas.eventDate, CPExpiry + 2 months]))

  Parties:
    - Company: Startup Pte. Ltd.
      Address: 71 Ayer Rajah Crescent
    - Investor: Bob
      Address: 2 Honcho Lane

  Entities:
    - Alice: Alice the Menace
      Address: 1 Honcho Lane
  
  Conditions Precedent:
    Oracle: Alice
    Conditions: (allOf) # also anyOf
      - bananas:
          Heading.en: Bananas Delivered
          CSL4: <company> Deliver(item:bananas, amount:30000, units:pounds, to:investor)
                      due before =(CPExpiry)
                      --> hence Completion
                      --> lest Done

  Done:
    CSL4: Fulfilment
    asString.en: This Agreement shall expire with no further obligation on either party.

  Completion:
    CSL4: <investor> Payment(amount:Principal, to:company)
                 due before =(ClosingDate)
                 --> hence PreMaturity
                 --> lest RecoverBananas

  RecoverBananas:
    CSL4: <investor> Deliver(bananas.Deliver{to:company})
                 due before =(bananas.eventDate + 3 days)
                 --> hence Done
                 --> lest Breach

  PreMaturity:
    CSL4:      when (or (eventof CompanySale) (eventOf IPO))
          <company> IssueSecurities(to:investor)
                due before =(MaturityDate)
                --> hence Done
                --> lest PostMaturity

  PostMaturity:
    CSL4: <company> IssueSecurities(to:investor)
                due before =(3 days)
                --> hence Done
                --> lest Breach
  
#+END_SRC

