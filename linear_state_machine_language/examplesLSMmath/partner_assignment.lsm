; This example demonstrates the need for a kind of obligation that can be "relieved" by another
; participant doing a permitted action. See ../L4-LSM-Formal-Semantic-Latex/L4-LSM-semantics.pdf

; Alice and Bob sign a contract to do an assignment as a team. The assignment has two problems,
; ProbA and ProbB. It's Alice's responsibility to get ProbA done, and Bob's responsibility to
; get ProbB done, but either, if they wish, may do the work of their partner. We're assuming that
; problem solutions can't be checked automatically (say, they're Project Euler problems), so
; comparing different solutions isn't necessary. The assignment is due on DueDate, and the
; partners agree that either can submit the assignment early if it's finished, and that they
; are jointly responsible for submitting it by DueDate.

global vars:
	probAsolved : boolean = false
	probBsolved : boolean = false

state WorkingOnAssignment:
	Alice ~must SolveProbA by DueDate
	Bob   ~must SolveProbB by DueDate

	Alice may SolveProbB by DueDate
	Bob   may SolveProbA by DueDate

	(either Alice Bob) may if (probAsolved and probBsolved) Submit before DueDate
	Alice ~must Submit on DueDate
	Bob ~must Submit on DueDate

; No `by ‹role›` means any role can do the action.
action SolveProbA transitions to WorkingOnAssignment
	transform:
		probAsolved = true

action SolveProbB transitions to WorkingOnAssignment
	transform:
		probBsolved = true

action Submit:
	transitions to Fulfilled