actors: Investor, Company

contract params:
	PURCHASE_AMOUNT : $ = $100000
	VALUATION_CAP : $ = $100
	DISCOUNT_PERCENT : % = 20 ; must be < 100
	START_INVESTOR_COMMON_STOCKS : ℕ
	START_INVESTOR_PREFERRED_STOCKS : ℕ
	START_INVESTOR_CASH : $

global vars:
	investor_Preferred_Stocks : ℕ = START_INVESTOR_PREFERRED_STOCKS  ;# writeAtMostOnce
	investor_Common_Stocks : ℕ = START_INVESTOR_COMMON_STOCKS  ;# writeAtMostOnce
	liq_price : Option[$] = None 	;# writeAtMostOnce
	liq_cashout : $ = $0 ;# writeAtMostOnce
	investor_cash : $ = START_INVESTOR_CASH ;# writeAtMostOnce

oracle inputs:
	; These should be reducible to event parameters, e.g. the first is syntactic sugar
	; for COMPANY_CAPITALIZATION being an action parameter of IssueSAFEPreferredStock_E,
	; and in the global variables transform of that action, the value is saved in a
	; fresh global variable *IF* it's used somewhere else in the contract (in this case,
	; it isn't used anywhere else)

	; for Equity Financing
	COMPANY_CAPITALIZATION : ℕ

	; for Liquidity
	LIQUIDITY_CAPITALIZATION : ℕ
	INVESTOR_PERCENT_OF_CASHOUT_INVESTOR_INVESTMENTS : %
	COMPANY_CASH_AT_LIQUIDITY_EVENT : $

	; for Dissolution
	COMPANY_CASH_AT_DISSOLUTION_EVENT : $
	INVESTOR_PERCENT_OF_DISSOLVING_INVESTOR_INVESTMENTS : %
)

definitions:
	DiscountRate = 100 - DISCOUNT_PERCENT
	LiquidityPrice = VALUATION_CAP / LIQUIDITY_CAPITALIZATION


formal contract "SAFE"
	apply to all actions and states:
		at-most-once ; static checker should verify that every action and state occurs at most once in any trace

	start state InvestorInvests

	state InvestorInvests
		; Following syntax is shorthand for 4 "relievable must-next" edges that have the same
		; subject and deadline expression
		Company must-next by ∞ choose:
			CommitToEquityFinancing
			CommitToLiquidityEvent(false) ; IPO
			CommitToLiquidityEvent(true) ; change of control
			CommitToDissolution


	; ----------------- Equity Financing Event -------------------

	action CommitToEquityFinancing by Company
	state:
		Company must-next-choose within discretionary:
			DeliverDocsWithProRataAgreement_E
			DeliverDocsWithoutProRataAgreement_E

	action DeliverDocsWithProRataAgreement_E by Company
	following state
		Company must-next IssueSAFEPreferredStock_E within discretionary

	action DeliverDocsWithoutProRataAgreement_E by Company
	following state:
		Company must-next SubmitProRataRightsAgreementForSigning_E within discretionary

	action SubmitProRataRightsAgreementForSigning_E by Company
	following state:
		Investor must-next SignProRataAgreement_E within discretionary
		; TODO: Obviously this shouldn't be a *must*, since they ought to be able to send it back with proposed amendments/corrections
		; That seems like something we should have a reusable module for.

	action SignProRataAgreement_E by Investor:
	following state:
		Company must-next IssueSAFEPreferredStock_E within discretionary

	action IssueSAFEPreferredStock_E by Company:
		transform:
			investor_SAFE_Preferred_Stocks += PURCHASE_AMOUNT / COMPANY_CAPITALIZATION
	following state:
		Company must DoEquityFinancing within discretionary

	action DoEquityFinancing of Company transitions to Fulfilled


	; ----------------- Liquidity Event -------------------

	action CommitToLiquidityEvent(change_of_control:Bool) by Company:
		transform
			(if change_of_control
				; TODO "In connection with a Change of Control intended to qualify as a tax-free reorganization, the Company may reduce, pro rata, the Purchase Amounts payable to the Cash-Out Investors by the amount determined by its board of directors in good faith to be advisable for such Change of Control to qualify as a tax-free reorganization for U.S. federal income tax purposes, and in such case, the Cash-Out Investors will automatically receive the number of shares of Common Stock equal to the remaining unpaid Purchase Amount divided by the Liquidity Price."
			)
	following state:
		Investor may-next before discretionary₁:
			ChooseCashPayment_L
			ChooseStockPayment_L

		Company relievably-must-next AutoChooseStockPayment_L on discretionary_1

	action AutoChooseStockPayment_L by Company
	following state:
		Company must-next TransferCommonStock_L within discretionary

	action ChooseStockPayment_L by Investor:
	following state:
		Company must-next TransferCommonStock_L within discretionary

	action TransferCommonStock_L by Company:
		transform:
			liq_price = VALUATION_CAP / LIQUIDITY_CAPITALIZATION
			investor_Common_Stocks += (PURCHASE_AMOUNT - liq_cashout) / liq_price
	following state:
		Company must-next DoLiquidityEvent by discretionary

	action ChooseCashPayment_L by Investor
	following state:
		Company must-next TransferCash_L within discretionary

	action TransferCash_L by Company:
		transform:
			liq_cashout = (
				if (PURCHASE_AMOUNT ≤ (COMPANY_CASH_AT_LIQUIDITY_EVENT * INVESTOR_PERCENT_OF_CASHOUT_INVESTOR_INVESTMENTS))
				then PURCHASE_AMOUNT
				else (COMPANY_CASH_AT_LIQUIDITY_EVENT * INVESTOR_PERCENT_OF_CASHOUT_INVESTOR_INVESTMENTS)
			)
			investor_cash += liq_cashout
			company_cash -= liq_cashout
	following state:
		Company mustif (liq_cashout < PURCHASE_AMOUNT) TransferCommonStock_L within discretionary₃
		Company relievably-must-next DoLiquidityEvent on discretionary₃

	action DoLiquidityEvent of Company transitions to Fulfilled


	; ----------------- Dissolution Event -------------------

	action CommitToDissolution of Company
	following state:
		Company must-next TransferCash_D by discretionary

	action TransferCash_D by Company:
		transform:
			dis_cashout = (ifthenelse
				(PURCHASE_AMOUNT ≤ (COMPANY_CASH_AT_DISSOLUTION_EVENT * INVESTOR_PERCENT_OF_DISSOLVING_INVESTOR_INVESTMENTS))
				 PURCHASE_AMOUNT
				 (COMPANY_CASH_AT_DISSOLUTION_EVENT * INVESTOR_PERCENT_OF_DISSOLVING_INVESTOR_INVESTMENTS)
			)
			investor_cash = dis_cashout
			company_cash = COMPANY_CASH_AT_DISSOLUTION_EVENT - dis_cashout
	following state:
		Company relievably-must-next if (dis_cashout < PURCHASE_AMOUNT)
			TransferAssets_D within discretionary

		Company relievably-must-next if (dis_cashout == PURCHASE_AMOUNT)
			Dissolution within discretionary

	action TransferAssets_D by Company:
		transform:
			liq_price = VALUATION_CAP / LIQUIDITY_CAPITALIZATION
			investor_Common_Stocks += ((PURCHASE_AMOUNT - dis_cashout) / liq_price))
	following state:
		Company must-next Dissolve within discretionary

	action Dissolve of Company transitions to Fulfilled
