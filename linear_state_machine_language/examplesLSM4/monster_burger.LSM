(LSMVersion 4.0.0)

; NOTE TO MENG (24 Sep 2017)
; The comment block just inside each *&State declaration is not literal suggested concrete syntax.
; I am just keeping it in the same file while we are still discussing broad strokes stuff. 
; In the end:
; * some of it will be specified within a general-purpose English locale file. For example, the template "* ACTOR should ACTION DEADLINE_EXPRESSION"
; * some of it will be written in an English locale file specific for this program, e.g. what to replace {action:ServeMB} with.



; one day when we autogenerate BPMN we can just use something like
; https://www.researchgate.net/publication/221542866_A_Simple_Algorithm_for_Automatic_Layout_of_BPMN_Processes
; we should organize our temporal notation to be consistent with best practice
; documented at http://docs.oracle.com/cd/E25178_01/doc.1111/e15176/timers_bpmpd.htm

(GlobalVars 	
	(writeonce challenge_endlimit_time : Time )
	(amount_owing                      : Price = 0)
	(amount_paid                       : Price = 0)
)

(Actors Challenger Restaurant)

(ContractParams 
	(MB_PRICE                     : Price    = $50)
	(TIME_TO_EAT_BURGER           : Duration = 1H)
	(MAX_SERVE_DELAY              : Duration = 20M)
	(MAX_CLAIM_VERIFICATION_DELAY : Duration = 10M) 
	(MAX_REFUND_DELAY             : Duration = 10M)
)

(ProseContract 
	(P1 'A monster burger (MB) challenge is between a customer and the Restaurant.')
	(P2 'A customer can only enter one MB challenge per visit to the Restaurant.')
	(P3 'If the customer finishes the MB within {TIME_TO_EAT_BURGER} of being served, the burger is free. Otherwise, they owe {MB_PRICE} for the burger.')
	(P4 'When a customer orders a MB, the restaurant guarantees they will serve the burger within {MAX_SERVE_DELAY}. Otherwise, the customer is not obligated to pay for the burger (but the restaurant may still serve the burger late).')
	(P5 'The customer can claim to be finished early, upon which the restaurant must within ({MAX_CLAIM_VERIFICATION_DELAY}, or by the end of the {TIME_TO_EAT_BURGER} challenge period -- whichever comes first) confirm or reject the claim. If no such "early finish" claim is made, the restaurant checks after {TIME_TO_EAT_BURGER} from serving time')
	(P6 'Any other food or drink that the customer wishes to consume while doing the MB challenge must be ordered on a separate bill.')
)

(FormalContract	
	"Monster Burger"		
	(StartState MonsterBurgerOrdered)
	
	(Action&State MonsterBurgerOrdered 
		; Upon {Challenger} having just {actionPast:MonsterBurgerOrdered}:
		; * {amount_owing} is set to {MB_PRICE}, and
		; * {Restaurant} should {action:ServeMB} within {MAX_SERVE_DELAY}; otherwise {event:PromptServeGuaranteeViolated}.
		(Entrance 
			(amount_owing = MB_PRICE)
		)
		(ActorEvents
			(Restaurant should and (within MAX_SERVE_DELAY) 
				do (ServeMB)
			)
		)			
		(Fallbacks
			(PromptServeGuaranteeViolated)
		)
	)

	(Action&State (ServeMB) 
		; Upon {Restaurant} having just {actionPast:ServeMB}:
		; * {challenge_endlimit_time} is defined as {TIME_TO_EAT_BURGER} after {event_start_time}, and		
		; * then {event:EatingMB}
		(Entrance							
			(challenge_endlimit_time = (event_start_time + TIME_TO_EAT_BURGER))
		)			
		(Fallbacks
			(EatingMB)
		)
	)


	(Event&State (PromptServeGuaranteeViolated)
		; Upon {event:PromptServeGuaranteeViolated}
		; * {amount_owing} is set to 0, and
		; * then the contract is fulfilled.
		(Entrance
			(amount_owing = 0)
		)			
		(Fallbacks
			(Fulfilled)
		)

	)

	(Event&State (EatingMB)
		(ActorEvents
			(Challenger may and (before (challenge_endlimit_time))
				do (AnnounceMBFinished)
			)
			(Restaurant should and (between 
						(interval challenge_endlimit_time 
						(time+ challenge_endlimit_time MAX_CLAIM_VERIFICATION_DELAY)))
				do (CheckFinishedClaim)
			)
		)
		(Fallbacks			
			(LateCheck)
		)
	)	

	(Action&State AnnounceMBFinished  
		(ActorEvents
			(Restaurant should and (by (earliest (time+ (event_start) MAX_CLAIM_VERIFICATION_DELAY) challenge_endlimit_time))
				do (CheckFinishedClaim)
			)
		)
		(Fallbacks
			(LateCheck)
		)
	)

	(Event&State LateCheck  
		(Entrance
			(amount_owing = 0)
		)
		(Fallbacks
			(Fulfilled)
		)

	)

	(Action&State CheckFinishedClaim  
		(ActorEvents
			(mustchoose Restaurant
				(VerifyFinishedClaim immediately) 				
				(RejectFinishedClaim immediately)
			)			
		)		
	)

	(Action&State RejectFinishedClaim  
		(ActorEvents
			(if ((event_start) â‰¥ challenge_endlimit_time)
				(Customer must and immediately do (PayForMB)) )						
		)
		(Fallbacks
			(EatingMB)
		)
	)

	(Action&State PayForMB
		(Entrance
			(amount_paid = amount_owing)
			(amount_owing = 0)
		)			
		(Fallbacks
			(Fulfilled)
		)
	)

	(Action&State VerifyFinishedClaim  
		(Entrance
			(amount_owing = 0)
		)			
		(Fallbacks
			(Fulfilled)
		)			
	)
	
)

(DotFileName 'monster_burger.dot')
(ImgFileName 'monster_burger.png')