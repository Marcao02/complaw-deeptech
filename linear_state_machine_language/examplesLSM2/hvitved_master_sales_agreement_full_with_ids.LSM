(TypeDefs
	; either ids or ordering as in hvitved_master_sales_agreement_full.LSM are necessary to correctly handle the case when there are two orders on the same day for the same quantity. 
	(Id := ℕ)
	(Order := Tuple[ℕ,Deadline,Id])
)

(ContractParams 
	(MAX_UNITS : ℕ := 1000)
	(CONTRACT_LIFE : Date := 1Y)
	(PRICE_PER_UNIT : $ := 100)
)

(GlobalVars 	
	( inconly next_order_id : Id := 0 )
	( writeonce contract_ends : Date )	
	( 2Bdelivered : Set[Order] := (emptySet) )
	( 2Binvoiced : Set[Order] := (emptySet) )
	( 2Bpaid : Set[Order] := (emptySet) )

	( reactive orderable_units : ℕ := (MAX_UNITS - units_ordered))

	( nonoperative inconly units_ordered : ℕ := 0 )	
	( nonoperative inconly units_delivered : ℕ := 0 )
	( nonoperative inconly total_paid : $ := 0 )
)

(Actors Customer Vendor)

(ProseContract 
	(P1 'The master agreement between Vendor and Customer is for 1000 printers, with a unit price of e100. The agreement is valid for one year, starting 2011-01-01.')
	(P2 'The customer may at any time order an amount of printers (with the total not exceeding the threshold of 1000), after which the Vendor must deliver the goods before the maximum of (i) 14 days, or (ii) the number of ordered goods divided by ten days.')
	(P3 'After delivering the goods, Vendor may order the Customer within 1 month, after which the goods must be paid for by Customer within 14 days.')	
)
; (FOLContract THIS IS VERY EARLY WIP
; 	; deliver_deadline(d,q)
; 	; ∀x:AmountOfPrinters. Vendor needs to deliver that amount of _new_ printers. They should be distinct from any previously-delivered ;inters. 
; 	; What counts as a valid printer order delivery depends on the history or at least time.
; 	(P2 'The customer may at any time order an amount of printers (with the total not exceeding the threshold of 1000), after which the ;ndor must deliver the goods before the maximum of (i) 14 days, or (ii) the number of ordered goods divided by ten days.')
; )

; ignored currently:
(VerificationDefinition	
	( ∀k:ℕ. (UpperBoundOnDaysBtwDeliverAndInvoice k) iff (∀d₁:Date. ∀o:Order. (Deliver o d₁) ⟹ (∃d₂:Date. (d₂ ≤ d₁ + k) ∧ (Invoice o d₂))) )
)

; ignored currently:
(Conjecture
	( ∀k:ℕ. (UpperBoundOnDaysBtwDeliverAndInvoice k) ⟹ (∀d:Date (∀n:ℕ ((n = (units_delivered d)) ⟹ ((total_paid (d + k + 14D)) ≥ (n * PRICE_PER_UNIT)) ))) )
)

(FormalContract	
	"Master Sales Agreement"	
	(StartState Start)
	(EventStates
		(Start()
			(Entrance
				(contract_ends := ((contract_start_date) + 1Y))
			)
			(Fallbacks
				(ContractLive())
			)			
		)

		(ContractLive()
			(ActorEvents
				(Customer mayif (orderable_units > 0)
					(NewOrder(q) by contract_ends where ((q ≤ orderable_units) and (q > 0)))
				)
				(Vendor mustif (nonempty 2Bdelivered)
					; the `where (containedIn order 2Bdelivered)` expression constrains permitted values of the event parameter `order`. 
					; the static analyzer will check whether the constraint is solvable, and will issue a warning if not (since in this 
					; case that means there's an unfulfillable obligation).
					(Deliver(order) by (get order 1) where (containedIn order 2Bdelivered))
				)
				(Vendor mayif (nonempty 2Binvoiced)
					(SendInvoice(order₁) by (get order₁ 1) where (containedIn order₁ 2Binvoiced))	
				)
				(Customer mustif (nonempty 2Bpaid)					
					(PayBill(order₂) by (get order₂ 1) where (containedIn order₂ 2Bpaid))
				)
			)
			(Fallbacks
				; this will only be executed when both of the actions in ActorEvents are disabled
				(Fulfilled())
			)
		)

		(NewOrder(quantity : ℕ)			
			(Entrance
				(local delivery_deadline : Date := (dateplus (event_start_date) (days (max 14 (ceil (quantity / 10))))) )
				(units_ordered += quantity)
				(2Bdelivered := (setAdd 2Bdelivered (tuple quantity delivery_deadline next_order_id)))
				(next_order_id += 1)
			)						
			(Fallbacks
				(ContractLive())
			)
		)

		(Deliver(order : Order)
			(Entrance
				( conjecture (containedIn order 2Bdelivered) )
				( local quantity : ℕ := (get order 0) )
				( units_delivered += quantity )
				( 2Bdelivered := (setRemove 2Bdelivered order) )
				( 2Binvoiced := (setAdd 2Binvoiced (tuple quantity ((event_start_date) + 30D) (get order 2))) )
			)
			(Fallbacks
				(ContractLive())
			)
		)

		(SendInvoice(order : Invoice)
			(Entrance
				( conjecture (containedIn order 2Binvoiced) )
				( local quantity : ℕ := (get order 0) )
				( units_invoiced += quantity )
				( 2Binvoiced := (setRemove 2Binvoiced order) )
				( 2Bpaid := (setAdd 2Bpaid (tuple quantity ((event_start_date) + 14D) (get order 2))) )
			)
			(Fallbacks
				(ContractLive())
			)
		)

		(PayBill(order : Bill)
			(Entrance
				( conjecture (containedIn order 2Bpaid) )
				( local quantity : ℕ := (get order 0) )
				( total_paid += (quantity * PRICE_PER_UNIT) )
				( 2Bpaid := (setRemove 2Bpaid order) )
			)
			(Fallbacks
				(ContractLive())
			)
		)
	)
)

(DotFileName 'hvitved_master_sales_agreement_full_with_ids.dot')
(ImgFileName 'hvitved_master_sales_agreement_full_with_ids.png')