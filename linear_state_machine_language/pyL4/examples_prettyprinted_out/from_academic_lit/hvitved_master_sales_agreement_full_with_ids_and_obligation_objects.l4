----------------------------------------------------------------------------------------------
file: from_academic_lit/hvitved_master_sales_agreement_full_with_ids_and_obligation_objects.l4

roles: Env, Customer, Vendor

contract params:
    MAX_UNITS : ℕ := 1000
    CONTRACT_LIFE : TimeDelta := 365d
    PRICE_PER_UNIT : $ := 100

global vars:
    inconly next_order_id : ℕ := 0
    inconly units_ordered : ℕ := 0
    writeonce order_period_ends : TimeDelta := (contractStart_td + CONTRACT_LIFE)
    nonoperative inconly units_delivered : ℕ := 0
    nonoperative inconly units_invoiced : ℕ := 0
    nonoperative inconly total_paid : ℕ := 0
    this_delivery_deadline : TimeDelta
    this_orderid : ℕ

section VendorAcceptingOrders:
    if ((MAX_UNITS - units_ordered) > 0):
        Customer may SubmitNewOrder(?q) (next_event_td ≤ order_period_ends) where ((0 < ?q) and (?q ≤ (MAX_UNITS - units_ordered)))
    if ((MAX_UNITS - units_ordered) == 0):
        EnterFulfilled (next_event_td ≥ order_period_ends)

action SubmitNewOrder(quantity)  transitions to VendorAcceptingOrders:
    transform:
        this_delivery_deadline := (max (14d + event_td) ((days (ceil (quantity / 10))) + event_td))
        units_ordered := (units_ordered + quantity)
        this_orderid := next_order_id
        next_order_id := (next_order_id + 1)
    Vendor must-later Deliver(quantity, this_orderid) (future_event_td ≤ this_delivery_deadline)

action Deliver(quantity, orderid)  transitions to VendorAcceptingOrders:
    transform:
        units_delivered := (units_delivered + quantity)
        deadline : TimeDelta := (event_td + 30d)
    Vendor may-later EmailInvoice(quantity, orderid) (future_event_td ≤ deadline)

action EmailInvoice(quantity, orderid)  transitions to VendorAcceptingOrders:
    transform:
        units_invoiced := (units_invoiced + quantity)
        deadline : TimeDelta := (event_td + 14d)
    Customer must-later PayBill(quantity, orderid) (future_event_td ≤ deadline)

action PayBill(quantity, orderid)  transitions to VendorAcceptingOrders:
    transform:
        total_paid := (total_paid + (quantity * PRICE_PER_UNIT))

action EnterFulfilled()  transitions to Fulfilled
