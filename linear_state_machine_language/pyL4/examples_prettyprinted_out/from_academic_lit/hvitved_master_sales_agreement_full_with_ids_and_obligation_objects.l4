----------------------------------------------------------------------------------------------
file: from_academic_lit/hvitved_master_sales_agreement_full_with_ids_and_obligation_objects.l4

roles: Env, Customer, Vendor

contract params:
    MAX_UNITS : ℕ := 1000
    CONTRACT_LIFE : TimeStamp := 365d
    PRICE_PER_UNIT : $ := 100

global vars:
    inconly next_order_id : Id := 0
    inconly units_ordered : ℕ := 0
    writeonce contract_ends : TimeStamp := contractStartTimedelta + CONTRACT_LIFE
    nonoperative inconly units_delivered : ℕ := 0
    nonoperative inconly units_invoiced : ℕ := 0
    nonoperative inconly total_paid : $ := 0
    this_delivery_deadline : TimeStamp
    this_orderid : ℕ

section VendorAcceptingOrders:
    if MAX_UNITS - units_ordered > 0:
        Customer may SubmitNewOrder(q) event_ts ≤ contract_ends where 0 < q and q ≤ MAX_UNITS - units_ordered
    if MAX_UNITS - units_ordered == 0:
        EnterFulfilled event_ts ≥ contract_ends

action SubmitNewOrder(quantity)  transitions to VendorAcceptingOrders:
    transform:
        this_delivery_deadline := (max 14d + event_ts (days (ceil quantity / 10)) + event_ts)
        units_ordered += quantity
        this_orderid := next_order_id
        next_order_id += 1
    Vendor must-later Deliver(_1, _2) (by this_delivery_deadline) where _1 == quantity and _2 == this_orderid

action Deliver(quantity, orderid)  transitions to VendorAcceptingOrders:
    transform:
        units_delivered += quantity
    Vendor may-later EmailInvoice(_1, _2) (within 30d) where _1 == quantity and _2 == orderid

action EmailInvoice(quantity, orderid)  transitions to VendorAcceptingOrders:
    transform:
        units_invoiced += quantity
    Customer must-later PayBill(_1, _2) (within 14d) where _1 == quantity and _2 == orderid

action PayBill(quantity, orderid)  transitions to VendorAcceptingOrders:
    transform:
        total_paid += quantity * PRICE_PER_UNIT

action EnterFulfilled()  transitions to Fulfilled
