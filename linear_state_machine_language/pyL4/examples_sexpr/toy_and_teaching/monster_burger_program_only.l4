; See monster_burger.l4 for version of this with more comments and an NLG mockup.

(GlobalVars
	(writeonce challenge_endlimit_timestamp : Timestamp )
	(amount_owing                      		: Price = 0)
	(amount_paid                       		: Price = 0)
)

(Roles Challenger Restaurant)

(TimeUnit Minutes)

(ContractParams
	(MB_PRICE                     : Price    = 50)
	(TIME_TO_EAT_BURGER           : Duration = 60)
	(MAX_SERVE_DELAY              : Duration = 20)
	(MAX_CLAIM_VERIFICATION_DELAY : Duration = 10)
	(MAX_REFUND_DELAY             : Duration = 10)
)

(ProseContract
	(P1 'A monster burger (MB) challenge is between a customer and the Restaurant.')
	(P2 'A customer can only enter one MB challenge per visit to the Restaurant.')
	(P3 'If the customer finishes the MB within {TIME_TO_EAT_BURGER} of being served, the burger is free. Otherwise, they owe {MB_PRICE} for the burger.')
	(P4 'When a customer orders a MB, the restaurant guarantees they will serve the burger within {MAX_SERVE_DELAY}. Otherwise, the customer is not obligated to pay for the burger (but the restaurant may still serve the burger late).')
	(P5 'The customer can claim to be finished early, upon which the restaurant must within ({MAX_CLAIM_VERIFICATION_DELAY}, or by the end of the {TIME_TO_EAT_BURGER} challenge period -- whichever comes first) confirm or reject the claim. If no such "early finish" claim is made, the restaurant checks after {TIME_TO_EAT_BURGER} from serving time')
	(P6 'Any other food or drink that the customer wishes to consume while doing the MB challenge must be ordered on a separate bill.')
)

(FormalContract
	"Monster Burger"
	(StartSection MonsterBurgerUncooked)

	(Section MonsterBurgerUncooked
		(Next
			(Challenger must (RequestCookMB) (nonstrictly-within 30))
		)
	)

	(Action RequestCookMB
	    (TransitionsTo AfterRequestCookMB) ; LANG note: Optional; this is the default value.
	    ;  LANG note: static checker directive, which tells the static checker to prove that this action occurs exactly once in any execution that ends in Fulfilled
		(traversals == 1)
		(AllowedSubjects Challenger)


		(StateTransform
			(amount_owing = MB_PRICE)
		)
	)
	(Section AfterRequestCookMB
		(visits == 1) ; LANG note: Similar to (traversal == 1) but for Sections.
		(Next
            (deadlinesPartitionFuture
	            (Restaurant should (ServeMB) (strictly-within MAX_SERVE_DELAY))
	            (EnterPromptServeGuaranteeViolated (nonstrictly-after-ts MAX_SERVE_DELAY))
            )
        )
	)

	(Action ServeMB
		(TransitionsTo EatingMB)
		(0 ≤ traversals ≤ 1)
		(AllowedSubjects Restaurant)

		(StateTransform
			(challenge_endlimit_timestamp = (TIME_TO_EAT_BURGER unitsAfterEntrance))
		)
	)


	(Action EnterPromptServeGuaranteeViolated
		(TransitionsTo Fulfilled)
		(0 ≤ traversals ≤ 1)
		(AllowedSubjects Env)
		(StateTransform
			(amount_owing = 0)
		)
	)

	(Action EnterEatingMB
		(0 ≤ traversals ≤ nonconstant) ; LANG note: nonconstant means can't be bounded by any numeral
		(AllowedSubjects Env)
	)
	(Section EatingMB
		(0 ≤ visits ≤ nonconstant)

        (Next
            (deadlinesPartitionFuture ; LANG note: `deadlinesPartitionFuture` will tell the static checker to verify that the deadline expressions partition the future.
	            (Challenger may (AnnounceMBFinished) (strictly-before challenge_endlimit_timestamp))
	            (Restaurant should (CheckCompletionClaim) (nonstrictly-after-ts-and-within challenge_endlimit_timestamp MAX_CLAIM_VERIFICATION_DELAY))
	            (TimeToCheckCompletionExpires (at-ts (MAX_CLAIM_VERIFICATION_DELAY unitsAfter challenge_endlimit_timestamp)))
            )
        )
	)

	(Action AnnounceMBFinished
		(0 ≤ traversals ≤ nonconstant)
		(AllowedSubjects Challenger)
	)
	(Section AfterAnnounceMBFinished
		(0 ≤ visits ≤ nonconstant)
		(Next
            (deadlinesPartitionFuture
	            (Restaurant should (CheckCompletionClaim) (nonstrictly-within MAX_CLAIM_VERIFICATION_DELAY))
	            (TimeToCheckCompletionExpires (at-ts (MAX_CLAIM_VERIFICATION_DELAY unitsAfterEntrance)))
            )
        )
	)

	(Action TimeToCheckCompletionExpires
		(TransitionsTo Fulfilled)
		(0 ≤ traversals ≤ 1)
		(AllowedSubjects Env)
		(StateTransform
			(amount_owing = 0)
		)
	)

	(Action CheckCompletionClaim
		(0 ≤ traversals ≤ nonconstant)
		(AllowedSubjects Restaurant)
	)
	(Section AfterCheckCompletionClaim
		(0 ≤ visits ≤ nonconstant)
		(Next
		    (Restaurant weakly-must (VerifyCompletionClaim) immediately)
		    (Restaurant weakly-must (RejectCompletionClaim) immediately)
		)
	)


	(Action RejectCompletionClaim
		(0 ≤ traversals ≤ nonconstant)
		(AllowedSubjects Restaurant)
	)
	(Section AfterRejectCompletionClaim
        (0 ≤ visits ≤ nonconstant)
        (Next
        	; LANG note: `guardsDisjointExhaustive` will tell the static checker to verify that it is
            ; always the case that exactly one of the tests of the children conditionals is true.
            (guardsDisjointExhaustive
            	; I think we should encourage this style of order-insensitive conditionals.
	            (if (entranceTimeNoLaterThan-ts? challenge_endlimit_timestamp)
	                (EnterEatingMB immediately)
	            )
	            (if (entranceTimeAfter-ts? challenge_endlimit_timestamp)
	                (Customer must (PayForMB) immediately)
	            )
            )
        )
	)

	(Action PayForMB
		(TransitionsTo Fulfilled)
		(0 ≤ traversals ≤ 1)
		(AllowedSubjects Challenger)

		(StateTransform
			(amount_paid = amount_owing)
			(amount_owing = 0)
		)
	)


	(Action VerifyCompletionClaim
		(TransitionsTo Fulfilled)
		(0 ≤ traversals ≤ 1)
		(AllowedSubjects Restaurant)

		(StateTransform
			(amount_owing = 0)
		)
	)



)

; don't use these options for examples in the repo. a canonical name will be chosen.
; (DotFileName 'monster_burger.dot')
; (ImgFileName 'monster_burger.png')