; This example demonstrates the need for a kind of obligation that can be "relieved" by another
; participant doing a permitted action. See ../L4-LSM-Formal-Semantic-Latex/L4-LSM-semantics.pdf
; We are using "should" for that here.

; Alice and Bob sign a contract to do an assignment as a team. The assignment has two problems,
; ProbA and ProbB. It's Alice's responsibility to get ProbA done, and Bob's responsibility to
; get ProbB done, but either, if they wish, may do the work of their partner. We're assuming that
; problem solutions can't be checked automatically (say, they're Project Euler problems), so
; comparing different solutions isn't necessary. The assignment is due on DueDate, and the
; partners agree that either can submit the assignment early if it's finished, and that they
; are jointly responsible for submitting it by DueDate.

(ContractParams
	(DueDate : TimeStamp = 40)

)

(GlobalVars
	(probAsolved : boolean = false)
	(probBsolved : boolean = false)
)

(Roles Alice Bob)

(FormalContract
	"partner assignment demonstrating relievable obligations"
	(Section WorkingOnAssignment
		(Next
			(Alice weakly-must SolveProbA (by DueDate))
			(Bob   weakly-must SolveProbB (by DueDate))

			(Alice may SolveProbB (by DueDate))
			(Bob   may SolveProbA (by DueDate))

			(if (probAsolved and probBsolved)
				(Alice may Submit (by DueDate))
				(Bob may Submit (by DueDate))
			)
		)
	)

	; No `AllowedRoles` SHOULD mean any role can do the action.
	(Action SolveProbA (TransitionsTo WorkingOnAssignment) (AllowedRoles Alice Bob)
		(StateTransform
			(probAsolved = true)
		)
	)

	(Action SolveProbB (TransitionsTo WorkingOnAssignment) (AllowedRoles Alice Bob)
		(StateTransform
			(probBsolved = true)
		)
	)

	(Action Submit (Transitions to Fulfilled) (AllowedRoles Alice Bob))
)