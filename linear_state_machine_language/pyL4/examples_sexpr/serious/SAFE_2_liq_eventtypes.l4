; Should these 4 terms just be natural numbers?
; `Common Stock` ⊆ `Capital Stock`
; `Preferred Stock` ⊆ `Capital Stock`

; `Common Stock` + `Preferred Stock` ≤ `Capital Stock`

; `Company Capitalization` : ℕ
; `Conversion Price` := min(`Safe Price`, `Discount Price`)

; `EquityFinancingPrice` : ℕ

(Roles Investor Company)

(TimeUnit d)

(ContractParams
	(PURCHASE_AMOUNT : Pos$ = 100000)
	(VALUATION_CAP : Pos$ = inf)
	(DISCOUNT_RATE : "(0,1]" = 1)
	(START_INVESTOR_COMMON_STOCKS : ℕ = 0)
	(START_INVESTOR_SAFE_PREFERRED_STOCKS : ℕ = 0)
	(START_INVESTOR_CASH : $ = 0)
)

(GlobalVars
	(has_cap : Bool = (VALUATION_CAP < inf))
	(has_discount : Bool = (DISCOUNT_RATE < 1))

	(writeAtMostOnce investor_Common_Stocks : ℕ = START_INVESTOR_COMMON_STOCKS  )
	(writeAtMostOnce investor_SAFE_Preferred_Stocks : ℕ = START_INVESTOR_SAFE_PREFERRED_STOCKS)
	(writeAtMostOnce investor_cash : $ = START_INVESTOR_CASH )

	(cash_currently_unconverted : $ = PURCHASE_AMOUNT)

	; for Equity Financing
	(writeAtMostOnce safe_price : $/Shares)
	(writeAtMostOnce discount_price : $/Shares)
	(writeAtMostOnce conversion_price : $/Shares)
	(writeAtMostOnce initial_price_per_share_standard_preferred_stock : $/Shares)
	; don't need this because only used by the action that introduces it:
	; (writeAtMostOnce company_capitalization : ℕ)

	; for Liquidity
	(writeAtMostOnce liq_price : $/Shares )
	(writeAtMostOnce liq_cashout : $ = 0 )
	(writeAtMostOnce company_cash : $) ; maybe this should be an input.
	(writeAtMostOnce investor_liq_hypothetical_shares : ℕ)
	; (writeAtMostOnce liquidity_capitalization : ℕ)  ; don't need to store this. used by two actions, but they can't both occur in one trace.
	(writeAtMostOnce investor_percent_of_cashout_investor_investments : %)
	; (writeAtMostOnce company_cash_at_liquidity_event : $) ; don't need to store. action param only
	; (writeAtMostOnce reduction_needed_to_qualify_as_usa_tax_free_reorg : $) ; action param only

	; for Dissolution
	; (company_cash_at_dissolution_event : $) ; action param only
	; (investor_percent_of_dissolving_investor_investments : %)  ; action param only
	(writeAtMostOnce dis_cashout : $)
)

(FormalContract "SAFE"
	; apply to all actions and states:
	; 	at-most-once ; static checker should verify that every action and state occurs at most once in any trace

	(StartSection InvestorInvests)

	(Section InvestorInvests
		(Next
			(Company obligation-options-include CommitToEquityFinancing no_time_constraint)
			(Company obligation-options-include (CommitToLiquidityEvent ?1 ?2) no_time_constraint) ; IPO
			(Company obligation-options-include (CommitToLiquidityEventWithCoCTaxFreeReorg ?1 ?2 ?3) no_time_constraint) ; IPO
			(Company obligation-options-include CommitToDissolution no_time_constraint)
		)
	)

	; ----------------- Equity Financing Event -------------------
	; NOTE: PRA abbreviates pro rata agreement

	(Action CommitToEquityFinancing (AllowedSubjects Company)
		(FollowingSection
			(Next
				(Company obligation-options-include DeliverDocsWithPRA discretionary)
				(Company obligation-options-include DeliverDocsWithoutPRA discretionary)
			)
		)
	)

	(Action DeliverDocsWithPRA (AllowedSubjects Company)
		(FollowingSection
			(Next (Company must (IssueSAFEPreferredStock ?1 ?2) discretionary))
		)
	)

	(Action DeliverDocsWithoutPRA (AllowedSubjects Company)
		(FollowingSection
			(Next (Company must SubmitProRataRightsAgreementForSigning discretionary))
		)
	)

	(Action SubmitProRataRightsAgreementForSigning  (AllowedSubjects Company)
		(FollowingSection
			; TODO: Obviously this shouldn't be a *must*, since they ought to be
			; able to send it back with proposed amendments/corrections.
			; That seems like something we should have a reusable module for.
			(Next (Investor must SignPRA discretionary))  )
	)

	(Action SignPRA (AllowedSubjects Investor)
		(FollowingSection
			(Next (Company must (IssueSAFEPreferredStock ?1 ?2) discretionary))
		)
	)

	(Action (IssueSAFEPreferredStock
				(company_capitalization : PosShares)
				(premoney_valuation : Pos$) ) (AllowedSubjects Company)
		(StateTransform
			(safe_price = (VALUATION_CAP / company_capitalization))
			(initial_price_per_share_standard_preferred_stock = (premoney_valuation / company_capitalization))
			(discount_price = (initial_price_per_share_standard_preferred_stock * DISCOUNT_RATE))
			(conversion_price = (min safe_price discount_price))
			(investor_SAFE_Preferred_Stocks += (round (PURCHASE_AMOUNT / conversion_price)))
		)
		(FollowingSection
			(Next (Company must DoEquityFinancing discretionary))  )
	)

	(Action DoEquityFinancing (AllowedSubjects Company) (TransitionsTo Fulfilled))


	; ----------------- Liquidity Event -------------------

	(Action (CommitToLiquidityEvent (company_cash_at_liquidity_event:$)
								    (liquidity_capitalization:PosShares)
			) (AllowedSubjects Company)
		(StateTransform
			(liq_price = (VALUATION_CAP / liquidity_capitalization))
			(investor_liq_hypothetical_shares = (round (PURCHASE_AMOUNT / liq_price)))
			(investor_percent_of_cashout_investor_investments = (cast "(0,1]" ( investor_liq_hypothetical_shares / (liquidity_capitalization + investor_liq_hypothetical_shares) )))
			(cash_currently_unconverted = PURCHASE_AMOUNT)
			(company_cash = company_cash_at_liquidity_event)
		)

		(FollowingSection
			(Next
				(Investor may ChooseCashPayment discretionary)
				(Investor may ChooseStockPayment discretionary)
				(Company should AutoChooseStockPayment discretionary)
			)
		)
	)

	(Action (CommitToLiquidityEventWithCoCTaxFreeReorg
								    (company_cash_at_liquidity_event:$)
								    (liquidity_capitalization:PosShares)
								    (reduction_needed_to_qualify_as_usa_tax_free_reorg : $)
			) (AllowedSubjects Company)
		(StateTransform
			(liq_price = (VALUATION_CAP / liquidity_capitalization))
			(investor_liq_hypothetical_shares = (round (PURCHASE_AMOUNT / liq_price)))
			(investor_percent_of_cashout_investor_investments = (cast "(0,1]" ( investor_liq_hypothetical_shares / (liquidity_capitalization + investor_liq_hypothetical_shares) )))

		 	; "In ???? with a Change of Control intended to qualify as a tax-free reorganization, the Company may reduce, pro rata, the Purchase Amounts payable to the Cash-Out Investors by the amount determined by its board of directors in good faith to be advisable for such Change of Control to qualify as a tax-free reorganization for U.S. federal income tax purposes, and in such case, the Cash-Out Investors will automatically receive the number of Shares of Common Stock equal to the remaining unpaid Purchase Amount divided by the Liquidity Price."
		 	(local purchase_amount_reduction : $ = (investor_percent_of_cashout_investor_investments * reduction_needed_to_qualify_as_usa_tax_free_reorg))
			(investor_Common_Stocks += (round (purchase_amount_reduction / liq_price)))
			(cash_currently_unconverted = (cast $ (PURCHASE_AMOUNT - purchase_amount_reduction)))
			(company_cash = (cast $ (company_cash_at_liquidity_event - reduction_needed_to_qualify_as_usa_tax_free_reorg)))
		)

		(FollowingSection
			(Next
				(Investor may ChooseCashPayment [next_event_td < (sectionEntrance_td + 1W)])
				(Investor may ChooseStockPayment [next_event_td < (sectionEntrance_td + 1W)])
				(Company obligation-options-include AutoChooseStockPayment [next_event_td == (sectionEntrance_td + 1W)])
			)
		)
	)

	(Action AutoChooseStockPayment (AllowedSubjects Company)
		(FollowingSection (Next (Company must TransferCommonStock discretionary)))
	)

	(Action ChooseStockPayment (AllowedSubjects Investor)
		(FollowingSection (Next (Company must TransferCommonStock discretionary)))
	)

	(Action TransferCommonStock (AllowedSubjects Company)
		(StateTransform
			; TODO: should we round that division up, down, or to nearest?
			(investor_Common_Stocks += (round ((cast NonnegReal (cash_currently_unconverted - liq_cashout)) / liq_price)))
		)
		(FollowingSection
			(Next (Company must DoLiquidityEvent discretionary))
		)
	)

	(Action ChooseCashPayment (AllowedSubjects Investor)
		(FollowingSection
			(Next (Company must TransferCash_L discretionary))
		)
	)

	(Action TransferCash_L (AllowedSubjects Company)
		(StateTransform
			(if (cash_currently_unconverted ≤ (company_cash * investor_percent_of_cashout_investor_investments)) (
				(liq_cashout = cash_currently_unconverted)
			)
			else (
				(liq_cashout = (round (company_cash * investor_percent_of_cashout_investor_investments)))
			))
			(investor_cash += liq_cashout)
			; (company_cash -= liq_cashout)
		)

		(FollowingSection
			(Next
				(if (liq_cashout < cash_currently_unconverted)
					(Company must TransferCommonStock discretionary) )

				(if (liq_cashout == cash_currently_unconverted)
					(Company must DoLiquidityEvent discretionary)
				)
			)
		)
	)

	(Action DoLiquidityEvent (AllowedSubjects Company) (TransitionsTo Fulfilled))


	; ----------------- Dissolution Event -------------------

	(Action CommitToDissolution (AllowedSubjects Company)
		(FollowingSection (Next (Company must
			(TransferCash_D ?company_cash_at_dissolution_event
							?investor_percent_of_dissolving_investor_investments)
			discretionary))  )
	)


	(Action (TransferCash_D (company_cash_at_dissolution_event: $)
						    (investor_percent_of_dissolving_investor_investments : %))
		(AllowedSubjects Company)
		(StateTransform
			(if (PURCHASE_AMOUNT ≤ (company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments)) (
				(dis_cashout = PURCHASE_AMOUNT)
			)
			else (
				(dis_cashout = (round (company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments)) )
			))
			(investor_cash = dis_cashout)
			; (company_cash = (company_cash_at_dissolution_event - dis_cashout))
		)

		(FollowingSection
			; Don't need to specify that following two `must`s are verified disjoint exhaustive,
			; because that's a requirement of the semantics, and thus will be checked automatically.
			(Next
				(if (dis_cashout < PURCHASE_AMOUNT)
					(Company must (TransferAssets ?1) discretionary)  )
				(if (dis_cashout == PURCHASE_AMOUNT)
					(Company must Dissolve discretionary)     )
			)
		)
	)

	(Action (TransferAssets (liquidity_capitalization:PosShares))
		(AllowedSubjects Company)
		(StateTransform
			(liq_price = (VALUATION_CAP / liquidity_capitalization))
			(investor_Common_Stocks += (round ((cast NonnegReal (PURCHASE_AMOUNT - dis_cashout)) / liq_price)))
		)
		(FollowingSection  (Next (Company must Dissolve discretionary)))
	)


	(Action Dissolve (AllowedSubjects Company) (TransitionsTo Fulfilled))
)