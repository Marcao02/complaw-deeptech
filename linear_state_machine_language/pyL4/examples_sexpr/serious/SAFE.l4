; Should these 4 terms just be natural numbers?
; `Common Stock` ⊆ `Capital Stock`
; `Preferred Stock` ⊆ `Capital Stock`

; `Common Stock` + `Preferred Stock` ≤ `Capital Stock`

; `Company Capitalization` : ℕ
; `Conversion Price` := min(`Safe Price`, `Discount Price`)

; `EquityFinancingPrice` : ℕ

(Roles Investor Company)

(ContractParams
	(PURCHASE_AMOUNT : $ = 100000)
	(VALUATION_CAP : $ = 100)
	; TODO!!
	; (DISCOUNT_PERCENT : % = 20) ; must be < 100
	(START_INVESTOR_COMMON_STOCKS : ℕ = 0)
	(START_INVESTOR_PREFERRED_STOCKS : ℕ = 0)
	(START_INVESTOR_CASH : $ = 0 )
)

(GlobalVars
	(has_cap : Bool = (VALUATION_CAP > 0))
	; (has_discount : Bool = (DISCOUNT_PERCENT > 0))

	; this will only have a value in a liquidity event:
	(writeAtMostOnce investor_remaining_investment_L : $)
	(writeAtMostOnce investor_Preferred_Stocks : ℕ = START_INVESTOR_PREFERRED_STOCKS  )
	(writeAtMostOnce investor_Common_Stocks : ℕ = START_INVESTOR_COMMON_STOCKS  )
	(writeAtMostOnce liq_price : $ )
	(writeAtMostOnce liq_cashout : $ = 0 )
	(writeAtMostOnce investor_cash : $ = START_INVESTOR_CASH )

	; for Equity Financing
	; don't need this because only used by the action that introduces it
	; (writeAtMostOnce company_capitalization : ℕ)

	; for Liquidity
	(writeAtMostOnce company_cash_remaining : ℕ)
	; (writeAtMostOnce liquidity_capitalization : ℕ)  ; don't need this. used by two actions, but they can't both occur in one trace.
	(writeAtMostOnce investor_percent_of_cashout_investor_investments : %)
	; (writeAtMostOnce company_cash_at_liquidity_event : $) ; don't need for same reason as company_capitalization
	; (writeAtMostOnce reduction_needed_to_qualify_as_usa_tax_free_reorg : $) ; action param only

	; for dissolution
	; (company_cash_at_dissolution_event : $) ; action param only
	; (investor_percent_of_dissolving_investor_investments : %)  ; action param only
	; this could be a local variable if had ActionAndFollowingSection declarations:
	(writeAtMostOnce dis_cashout : $)
)

(Definitions  ; LANG node: These are substituted before construction of in-memory python L4 model
	; (discount_rate = (100 - DISCOUNT_PERCENT))
	(liq_price = (VALUATION_CAP / liquidity_capitalization))
	(purchase_amount_reduction = (_investor_percent_of_cashout_investor_investments * reduction_needed_to_qualify_as_usa_tax_free_reorg))
)

(FormalContract "SAFE"
	; apply to all actions and states:
	; 	at-most-once ; static checker should verify that every action and state occurs at most once in any trace

	(StartSection InvestorInvests)

	(Section InvestorInvests
		(Next
			(Company weakly-must CommitToEquityFinancing nodeadline)
			(Company weakly-must (CommitToLiquidityEvent false) nodeadline) ; IPO
			(Company weakly-must (CommitToLiquidityEvent true)  nodeadline)  ; change of control
			(Company weakly-must CommitToDissolution nodeadline)
		)
	)


	; ----------------- Equity Financing Event -------------------
	; NOTE: PRA abbreviates pro rata agreement
	; `_E` is just a redundant notational reminder that the action/section
	; is associated with the equity event case.

	(Action CommitToEquityFinancing (AllowedSubjects Company))
	(Section AfterCommitToEquityFinancing
		(Next
			(Company weakly-must DeliverDocsWithPRA_E discretionary)
			(Company weakly-must DeliverDocsWithoutPRA_E discretionary)
		)
	)

	(Action DeliverDocsWithPRA_E (AllowedSubjects Company))
	(Section AfterDeliverDocsWithPRA_E
		(Next (Company must IssueSAFEPreferredStock_E discretionary))  )

	(Action DeliverDocsWithoutPRA_E (AllowedSubjects Company))
	(Section AfterDeliverDocsWithoutPRA_E
		(Next (Company must SubmitProRataRightsAgreementForSigning_E discretionary))  )

	(Action SubmitProRataRightsAgreementForSigning_E  (AllowedSubjects Company))
	(Section AfterSubmitProRataRightsAgreementForSigning_E
		; TODO: Obviously this shouldn't be a *must*, since they ought to be
		; able to send it back with proposed amendments/corrections.
		; That seems like something we should have a reusable module for.
		(Next (Investor must SignPRA_E discretionary))  )

	(Action SignPRA_E (AllowedSubjects Investor))
	(Section AfterSignPRA_E
		(Next (Company must IssueSAFEPreferredStock_E discretionary))  )

	(Action (IssueSAFEPreferredStock_E(company_capitalization : ℕ)) (AllowedSubjects Company)
		(StateTransform  (investor_SAFE_Preferred_Stocks += (PURCHASE_AMOUNT / company_capitalization)))  )
	(Section AfterIssueSAFEPreferredStock_E
		(Next (Company must DoEquityFinancing discretionary))  )

	(Action DoEquityFinancing (AllowedSubjects Company) (TransitionsTo Fulfilled))


	; ----------------- Liquidity Event -------------------

	(Action (CommitToLiquidityEvent (change_of_control:Bool)
								    (_investor_percent_of_cashout_investor_investments:%)
								    (company_cash_at_liquidity_event:$)
								    (liquidity_capitalization:$)
								    (reduction_needed_to_qualify_as_usa_tax_free_reorg : $)
			) (AllowedSubjects Company)
		(StateTransform
			(liq_price = (VALUATION_CAP / liquidity_capitalization))
			(investor_percent_of_cashout_investor_investments = _investor_percent_of_cashout_investor_investments)
			(if  (change_of_control and (reduction_needed_to_qualify_as_usa_tax_free_reorg > 0)) (
			 	; "In connection with a Change of Control intended to qualify as a tax-free reorganization, the Company may reduce, pro rata, the Purchase Amounts payable to the Cash-Out Investors by the amount determined by its board of directors in good faith to be advisable for such Change of Control to qualify as a tax-free reorganization for U.S. federal income tax purposes, and in such case, the Cash-Out Investors will automatically receive the number of shares of Common Stock equal to the remaining unpaid Purchase Amount divided by the Liquidity Price."
			 	(investor_Common_Stocks += (round (purchase_amount_reduction / liq_price)))
				(investor_remaining_investment_L = (PURCHASE_AMOUNT - purchase_amount_reduction))
			)
			else (
				(investor_remaining_investment_L = PURCHASE_AMOUNT)
			))
			(company_cash_remaining = (company_cash_at_liquidity_event - reduction_needed_to_qualify_as_usa_tax_free_reorg))
		)
	)

	(Section AfterCommitToLiquidityEvent
		(Next
			(Investor may ChooseCashPayment_L discretionary)
			(Investor may ChooseStockPayment_L discretionary)
			(Company should AutoChooseStockPayment_L discretionary)
		)
	)

	(Action AutoChooseStockPayment_L (AllowedSubjects Company))
	(Section AfterAutoChooseStockPayment_L (Next (Company must TransferCommonStock_L discretionary)))

	(Action ChooseStockPayment_L (AllowedSubjects Investor))
	(Section AfterChooseStockPayment_L (Next (Company must TransferCommonStock_L discretionary)))

	(Action TransferCommonStock_L (AllowedSubjects Company)
		(StateTransform
			(investor_Common_Stocks += (round ((investor_remaining_investment_L - liq_cashout) / liq_price)))
		)
	)
			; TODO: should we round that division up, down, or to nearest?
	(Section AfterTransferCommonStock_L
		(Next (Company must DoLiquidityEvent discretionary))
	)

	(Action ChooseCashPayment_L (AllowedSubjects Investor))
	(Section AfterChooseCashPayment_L
		(Next (Company must TransferCash_L discretionary))
	)

	(Action TransferCash_L (AllowedSubjects Company)
		(StateTransform
			(if (investor_remaining_investment_L ≤ (company_cash_remaining * investor_percent_of_cashout_investor_investments)) (
				(liq_cashout = investor_remaining_investment_L)
			)
			else (
				(liq_cashout = (company_cash_remaining * investor_percent_of_cashout_investor_investments))
			))
			(investor_cash += liq_cashout)
			(company_cash -= liq_cashout)
		)
	)
	(Section AfterTransferCash_L
		(Next
			(if (liq_cashout < investor_remaining_investment_L)
				(Company must TransferCommonStock_L discretionary) )

			(if (liq_cashout == investor_remaining_investment_L)
				(Company must DoLiquidityEvent discretionary)
			)
		)
	)

	(Action DoLiquidityEvent (AllowedSubjects Company) (TransitionsTo Fulfilled))


	; ----------------- Dissolution Event -------------------

	(Action CommitToDissolution (AllowedSubjects Company))
	(Section AfterCommitToDissolution (Next (Company must TransferCash_D discretionary))  )


	(Action (TransferCash_D (company_cash_at_dissolution_event: $)
						    (investor_percent_of_dissolving_investor_investments : %))
		(AllowedSubjects Company)
		(StateTransform
			(if (PURCHASE_AMOUNT ≤ (company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments)) (
				(dis_cashout = PURCHASE_AMOUNT)


			)
			else (
				(dis_cashout = (company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments) )
			))
			(investor_cash = dis_cashout)
			(company_cash = (company_cash_at_dissolution_event - dis_cashout))
		)
	)
	(Section AfterTransferCash_D
		; Don't need to specify that following two `must`s are verified disjoint exhaustive,
		; becase it's implied by the definitions.
		(Next
			(if (dis_cashout < PURCHASE_AMOUNT)
				(Company must TransferAssets_D discretionary)  )
			(if (dis_cashout == PURCHASE_AMOUNT)
				(Company must Dissolve discretionary)     )
		)
	)

	(Action (TransferAssets_D (liquidity_capitalization:$))
		(AllowedSubjects Company)
		(StateTransform
			(liq_price = (VALUATION_CAP / liquidity_capitalization))
			(investor_Common_Stocks += ((PURCHASE_AMOUNT - dis_cashout) / liq_price))   ))
	(Section AfterTransferAssets_D (Next (Company must Dissolve discretionary)))


	(Action Dissolve (AllowedSubjects Company) (TransitionsTo Fulfilled))
)