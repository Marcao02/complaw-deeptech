(LSMVersion 4.0.0)

; NOTE TO MENG (24 Sep 2017)
; The comment block just inside each *&State declaration is not literal suggested concrete syntax.
; I am just keeping it in the same file while we are still discussing broad strokes stuff.
; In the end:
; - some of it will be specified within a general-purpose English locale file. For example, the template "* ACTOR should ACTION DEADLINE_EXPRESSION"
; - some of it will be written in an English locale file specific for this program, e.g. what to replace {action:ServeMB} with.

; within?, currentTimeLaterThanThisMuchAfterEntranceTime? : Duration → Bool
; e.g. (within? 10) means the current time is within 10 time units of the time when the current state was entered.

; currentTimeNoLaterThan?, currentTimeBefore?, currentTimeAfter? : Timestamp → Bool
; currentTimeBetween? : Timestamp → Timestamp → Bool

; one day when we autogenerate BPMN we can just use something like
; https://www.researchgate.net/publication/221542866_A_Simple_Algorithm_for_Automatic_Layout_of_BPMN_Processes
; we should organize our temporal notation to be consistent with best practice
; documented at http://docs.oracle.com/cd/E25178_01/doc.1111/e15176/timers_bpmpd.htm

(GlobalVars
	(writeonce challenge_endlimit_timestamp : Timestamp )
	(amount_owing                      		: Price = 0)
	(amount_paid                       		: Price = 0)
)

(Roles Challenger Restaurant)

(ContractParams
	(MB_PRICE                     : Price    = $50)
	(TIME_TO_EAT_BURGER           : Duration = 1H)
	(MAX_SERVE_DELAY              : Duration = 20M)
	(MAX_CLAIM_VERIFICATION_DELAY : Duration = 10M)
	(MAX_REFUND_DELAY             : Duration = 10M)
)

(ProseContract
	(P1 'A monster burger (MB) challenge is between a customer and the Restaurant.')
	(P2 'A customer can only enter one MB challenge per visit to the Restaurant.')
	(P3 'If the customer finishes the MB within {TIME_TO_EAT_BURGER} of being served, the burger is free. Otherwise, they owe {MB_PRICE} for the burger.')
	(P4 'When a customer orders a MB, the restaurant guarantees they will serve the burger within {MAX_SERVE_DELAY}. Otherwise, the customer is not obligated to pay for the burger (but the restaurant may still serve the burger late).')
	(P5 'The customer can claim to be finished early, upon which the restaurant must within ({MAX_CLAIM_VERIFICATION_DELAY}, or by the end of the {TIME_TO_EAT_BURGER} challenge period -- whichever comes first) confirm or reject the claim. If no such "early finish" claim is made, the restaurant checks after {TIME_TO_EAT_BURGER} from serving time')
	(P6 'Any other food or drink that the customer wishes to consume while doing the MB challenge must be ordered on a separate bill.')
)

(FormalContract
	"Monster Burger (this contract already signed)"
	(StartSection MonsterBurgerUncooked)

	(Section MonsterBurgerUncooked
		(Next
			(Challenger must (RequestCookMB) (by 8pm))
		)
	)

	(CompoundAsAction RequestCookMB
		; {actionPast:MonsterBurgerOrdered} is "ordered a Monster Burger"
		; Upon {Challenger} having just {actionPast:MonsterBurgerOrdered}:
		; * {amount_owing} is set to {MB_PRICE}
		; and then
		; * Within {MAX_SERVE_DELAY}, {Restaurant} should {action:ServeMB} within {MAX_SERVE_DELAY}
		; * Past {MAX_SERVE_DELAY}, {event:PromptServeGuaranteeViolated}
		; LANG note: static checker directive, which tells the static checker that this state
		; is visited exactly once in any execution.
		(visits == 1) ;
		(AllowedSubjects Challenger)

		(Entrance
			(amount_owing = MB_PRICE)
		)
		(Next
            (deadlinesDisjointExhaustive
            (Restaurant should (ServeMB) (within MAX_SERVE_DELAY))
            (Env transpires (PromptServeGuaranteeViolated) (after MAX_SERVE_DELAY))
            )
        )
	)

	(CompoundAsAction ServeMB
		; Upon {Restaurant} having just {actionPast:ServeMB}:
		; * {challenge_endlimit_timestamp} is defined as {TIME_TO_EAT_BURGER} after {event_start_time}, and
		; * then {event:EatingMB}
		; LANG note: static checker directive, which tells the static checker that the number of times
		; this state can be visited is 0 or 1, and that both endpoints are possible.
		(0 ≤ visits ≤ 1)
		(AllowedSubjects Restaurant)

		(Entrance
			(challenge_endlimit_timestamp = (TIME_TO_EAT_BURGER afterEntrance))
		)
		(Next
		    (Env transpires (EatingMB) immediately)
		)
	)


	(CompoundAsSection PromptServeGuaranteeViolated
		; {event:PromptServeGuaranteeViolated} is "{Restaurant}'s Prompt Serve Guarantee violated"
		; Upon {event:PromptServeGuaranteeViolated}, {amount_owing} is set to 0, and then the contract is fulfilled.
		(0 ≤ visits ≤ 1)
		(AllowedSubjects Env)

		(Entrance
			(amount_owing = 0)
		)
		(Next
		    (Env transpires (Fulfilled) immediately)
		)
	)

	(CompoundAsSection EatingMB
		; Whenever {event:EatingMB}
		; * if the time is no later than {challenge_endlimit_timestamp},
		;	* then {Challenger} may {action:AnnounceMBFinished}
		; * if the time is after {challenge_endlimit_timestamp} and within {MAX_CLAIM_VERIFICATION_DELAY} of {challenge_endlimit_timestamp}
		; 	* then {Restaurant} should {action:CheckFinishedClaim}
		; * if the time is past {MAX_CLAIM_VERIFICATION_DELAY} from {challenge_endlimit_timestamp}
		;	* then {event:LateCheck}
		; LANG note: static checker directive, which tells the static checker that the number of times
		; this state can be visited is possibly as small as 0, and can't be bounded by any constant number.
		(0 ≤ visits ≤ nonconstant)
		(AllowedSubjects Env)

        (Next
            ; LANG note: `verifiedDisjointExhaustive` will tell the static checker to verify that it is
            ; always the case that exactly one of the tests of the children conditionals is true.
            ; I think we should at least encourage this style of order-insensitive conditionals.
            (deadlinesDisjointExhaustive
            (Challenger may (AnnounceMBFinished) (beforeO challenge_endlimit_timestamp))
            (Restaurant should (CheckFinishedClaim) (afterC_withinC challenge_endlimit_timestamp MAX_CLAIM_VERIFICATION_DELAY))
            (Env transpires (LateCheck) (at (MAX_CLAIM_VERIFICATION_DELAY after challenge_endlimit_timestamp)))
            )
        )
	)

	(CompoundAsAction AnnounceMBFinished
		; Whenever {Challenger} has just {action:AnnounceMBFinished}
		; * Within {MAX_CLAIM_VERIFICATION_DELAY}:
		; 	* {Restaurant} should {action:CheckFinishedClaim}
		; * Past {MAX_CLAIM_VERIFICATION_DELAY}:
		;	* {LateCheck}
		(0 ≤ visits ≤ nonconstant)
		(AllowedSubjects Challenger)

        (Next
            (deadlinesDisjointExhaustive
            (Restaurant should (CheckFinishedClaim) (withinC MAX_CLAIM_VERIFICATION_DELAY))
            (Env transpires (LateCheck) (after_exactly MAX_CLAIM_VERIFICATION_DELAY))
            )
        )
	)

	(CompoundAsSection LateCheck
		; Upon {event:LateCheck}, {amount_owing} is set to 0, and then the contract is fulfilled.
		(0 ≤ visits ≤ 1)
		(AllowedSubjects Env)

		(Entrance
			(amount_owing = 0)
		)
		(Next
		    (Env transpires (Fulfilled))
		)
	)

	(CompoundAsAction CheckFinishedClaim
		; "either {VerifyFinishedClaim} or {RejectFinishedClaim}"
		(0 ≤ visits ≤ nonconstant)
		(AllowedSubjects Restaurant)

        (Next
		    (Restaurant weakly-must (VerifyFinishedClaim) immediately)
		    (Restaurant weakly-must (RejectFinishedClaim) immediately)
		)
	)

	(CompoundAsAction RejectFinishedClaim
		; Whenever {Restaurant} {action:RejectFinishedClaim}:
		; * if the time is no later than {challenge_endlimit_timestamp}
		;	* then {event:EatingMB}""
		; * if the time has passed {challenge_endlimit_timestamp}
		; 	* then {Customer} must immediately {PayForMB}
		(0 ≤ visits ≤ nonconstant)
		(AllowedSubjects Restaurant)

        (Next
            (guardsDisjointExhaustive
            (if (currentTimeNoLaterThan? challenge_endlimit_timestamp)
                (Env transpires (EatingMB) immediately)
            )
            (if (currentTimeAfter? challenge_endlimit_timestamp)
                (Customer must (PayForMB) immediately)
            )
            )
        )
	)

	(CompoundAsAction PayForMB
		; Upon {Customer} having just {action:PayForMB}:
		; * {amount_paid} is defined as {amount_owing}, and then
		; * {amount_owing} is set to 0", and then
		; * the contract is fulfilled

		(0 ≤ visits ≤ 1)
		(AllowedSubjects Challenger)

		(Entrance
			(amount_paid = amount_owing)
			(amount_owing = 0)
		)
		(Next
		    (Env transpires (Fulfilled) immediately)
		)
	)

	(CompoundAsAction VerifyFinishedClaim
		; Upon {Restaurant} having just {action:VerifyFinishedClaim}:
		; * {amount_owing} is set to 0", and then
		; * the contract is fulfilled

		(0 ≤ visits ≤ 1)
		(AllowedSubjects Restaurant)

		(Entrance
			(amount_owing = 0)
		)
		(Next
		    (Env transpires (Fulfilled) immediately)
		)
	)

)

(DotFileName 'monster_burger.dot')
(ImgFileName 'monster_burger.png')