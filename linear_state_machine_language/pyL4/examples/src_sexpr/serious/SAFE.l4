(Roles Investor Company)

(TimeUnit d)

(SortDefinitions
	($ := (Dimensioned NonnegReal "$"))
	(Pos$ := (Dimensioned PosReal "$"))
	(ShareCnt = (Dimensioned Nat "shares"))
	(PosShareCnt = (Dimensioned PosInt "shares"))
	(SharePrice = (Ratio $ PosShareCnt))
	(PosSharePrice = (Ratio Pos$ PosShareCnt))
)

; when there is no cap, typechecking should not even see VALUATION_CAP.
; and certainly nothing about valuation cap should appear in the NLG.
; when there is no discount, I COULD rely on partial evaluation to make discount
; stuff go away, but I could also just use the same tactic I do with cap (`Options` flags+macros).
; question: does  flags+macros better capture intent than making a bunch of
; parameters and write-once variables of Optional type, and then using partial eval?

; didn't end up using this...
; (Flags ; all boolean parameters
; 	HAS_CAP
; 	HAS_DISCOUNT
; )

(BlockMacro set_conversion_price (company_capitalization company_valuation)
	(ifflag HAS_CAP (
		(ifflag HAS_DISCOUNT (
			(undiscounted_price_per_share_standard_preferred_stock' = (company_valuation / company_capitalization))
			(cap_price' = (VALUATION_CAP / company_capitalization))
			(discount_price' = (undiscounted_price_per_share_standard_preferred_stock' * DISCOUNT_RATE))
			(conversion_price' = (min cap_price' discount_price'))

		)
		else (
			(undiscounted_price_per_share_standard_preferred_stock' = (company_valuation / company_capitalization))
			(cap_price' = (VALUATION_CAP / company_capitalization))
			(conversion_price' = (min cap_price' undiscounted_price_per_share_standard_preferred_stock'))
		))
	)
	else (
		(ifflag HAS_DISCOUNT (
			(undiscounted_price_per_share_standard_preferred_stock' = (company_valuation / company_capitalization))
			(conversion_price' = (undiscounted_price_per_share_standard_preferred_stock' * DISCOUNT_RATE))
		)
		else (
			(conversion_price' = (company_valuation / company_capitalization))
		))
	))
)

(ContractParams
	(PURCHASE_AMOUNT : Pos$ = 100000)
	(ifflag HAS_DISCOUNT (
		(DISCOUNT_RATE : "Fraction(0,1]" = .9)
	))
	(ifflag HAS_CAP (
		(VALUATION_CAP : Pos$ = 100000000)
	))
	(START_INVESTOR_COMMON_STOCKS : ShareCnt = 0)
	(START_INVESTOR_SAFE_PREFERRED_STOCKS : ShareCnt = 0)
	(START_INVESTOR_CASH : $ = 0)
)

(StateVars
	(writes≤1 investor_Common_Stocks : ShareCnt = START_INVESTOR_COMMON_STOCKS  )
	(writes≤1 investor_SAFE_Preferred_Stocks : ShareCnt = START_INVESTOR_SAFE_PREFERRED_STOCKS)
	(writes≤1 investor_cash : $ = START_INVESTOR_CASH )

	(cash_currently_unconverted : $ = PURCHASE_AMOUNT)
	(writes≤1 conversion_price : SharePrice)


	; for Equity and Liquidity
	(ifflag HAS_CAP (
		(writes≤1 cap_price : SharePrice)
		(writes≤1 undiscounted_price_per_share_standard_preferred_stock : SharePrice)

		(ifflag HAS_DISCOUNT (
			(writes≤1 discount_price : SharePrice)
		))
	)
	else (
		(ifflag HAS_DISCOUNT (
			(writes≤1 undiscounted_price_per_share_standard_preferred_stock : SharePrice)
			(writes≤1 discount_price : SharePrice)
		))
	))

	; for Liquidity
	(writes≤1 liq_cashout : $ = 0 ) ; this needs to either be initialized to 0, or else changed to an Optional and some of the code rewritten a bit.
	(company_cash : $) ; maybe this should be an input.
	(writes≤1 investor_percent_of_cashout_investor_investments : "Fraction(0,1]")

	; for Dissolution
	(writes≤1 dis_cashout : $)
)
; the bug was in a subcase of the case when the company cannot fully pay out all the investors who want to cash out.
(Invariants
	; should say IF defined
	(liq_cashout ≤ cash_currently_unconverted)
	(dis_cashout ≤ PURCHASE_AMOUNT)
)

(FormalContract "SAFE"
	; apply to all actions and states:
	; 	at-most-once ; static checker should verify that every action and state occurs at most once in any trace

	(StartSituation InvestorInvests)

	(Situation InvestorInvests
		(Company may CommitToEquityFinancing)
		(Company may (CommitToIPO ?1 ?2 ?3)) ; IPO
		(Company may (CommitToChangeOfControl ?1 ?2 ?3 ?4 ?5))
		(Company may CommitToDissolution)
		; (Breach_Company discretionary) ; actually company can remain in current state forever.
	)

	; ----------------- Equity Financing Event -------------------
	; NOTE: PRA abbreviates pro rata agreement

	(Action CommitToEquityFinancing (AllowedSubjects Company)
		(nlg "Initiate an Equity Financing Event")
		(FollowingSituation
			(Company may DeliverTransactionDocsWithPRA)
			(Company may DeliverTransactionDocsWithoutPRA)
			(Arbiter may InterveneOnDelay_Company)
		)
	)

	(Action DeliverTransactionDocsWithPRA (AllowedSubjects Company)
		(FollowingSituation
			(Company must (IssueSAFEPreferredStock ?1 ?2))
		)
	)

	(Action DeliverTransactionDocsWithoutPRA (AllowedSubjects Company)
		(FollowingSituation
			(Company must SubmitProRataRightsAgreementForSigning)
		)
	)

	(Action SubmitProRataRightsAgreementForSigning  (AllowedSubjects Company)
		(FollowingSituation
			; TODO: Obviously this shouldn't be a *must*, since they ought to be
			; able to send it back with proposed amendments/corrections.
			; That seems like something we should have a reusable module for.
			(Investor must SignPRA)
		)
	)

	(Action SignPRA (AllowedSubjects Investor)
		(FollowingSituation
			(Company must (IssueSAFEPreferredStock ?1 ?2))
		)
	)

	(Action (IssueSAFEPreferredStock
				(company_capitalization : PosShareCnt)
				(premoney_valuation : Pos$) ) (AllowedSubjects Company)
		(StateTransform
			(set_conversion_price (company_capitalization premoney_valuation))
			(investor_SAFE_Preferred_Stocks' += (PURCHASE_AMOUNT round/ conversion_price'))
		)
		(FollowingSituation
			(Company must DoEquityFinancing)
		)
	)

	(Action DoEquityFinancing (AllowedSubjects Company) (TransitionsTo Fulfilled))


	; ----------------- Liquidity Event -------------------

	(Action (CommitToIPO (company_cash_at_liquidity_event : $)
						 (liquidity_capitalization : PosShareCnt)
						 (company_valuation : Pos$)
			) (AllowedSubjects Company)
		(nlg "Initiate an IPO Liquidity Event")
		(StateTransform
			(set_conversion_price (liquidity_capitalization company_valuation))
			(cash_currently_unconverted' = PURCHASE_AMOUNT)
			(company_cash' = company_cash_at_liquidity_event)
		)

		(FollowingSituation
			; 1W is totally made up by Dustin!
			(Investor may ChooseCashPayment [when next_event_td < (situation_entrance_td + 1W)])
			(Investor may ChooseStockPayment [when next_event_td < (situation_entrance_td + 1W)])
			(Company may AutoChooseStockPayment [when next_event_td == (situation_entrance_td + 1W)])
			(Breach_Company [after situation_entrance_td + 1W])
		)
	)

	(Action (CommitToChangeOfControl (company_cash_at_liquidity_event : $)
								     (liquidity_capitalization : PosShareCnt)
								     (company_valuation : Pos$)
								     (total_investments_of_cashout_investors: Pos$)
								     (reduction_needed_to_qualify_as_usa_tax_free_reorg : $)

			) (AllowedSubjects Company)
		(nlg "Initiate a Change of Control Liquidity Event")
		(StateTransform
			(set_conversion_price (liquidity_capitalization company_valuation))
			(investor_percent_of_cashout_investor_investments' = (check "Fraction(0,1]" (PURCHASE_AMOUNT / total_investments_of_cashout_investors)))

		 	; "In connection with a Change of Control intended to qualify as a tax-free reorganization, the Company may reduce, pro rata, the Purchase Amounts payable to the Cash-Out Investors by the amount determined by its board of directors in good faith to be advisable for such Change of Control to qualify as a tax-free reorganization for U.S. federal income tax purposes, and in such case, the Cash-Out Investors will automatically receive the number of Shares of Common Stock equal to the remaining unpaid Purchase Amount divided by the Liquidity Price."
		 	(local purchase_amount_reduction : $ = (investor_percent_of_cashout_investor_investments' * reduction_needed_to_qualify_as_usa_tax_free_reorg))
			(investor_Common_Stocks' += (purchase_amount_reduction round/ conversion_price'))
			(cash_currently_unconverted' = (check $ (PURCHASE_AMOUNT - purchase_amount_reduction)))
			(company_cash' = (check $ (company_cash_at_liquidity_event - reduction_needed_to_qualify_as_usa_tax_free_reorg)))
		)

		(FollowingSituation
			; 1W is totally made up by Dustin!
			(Investor may ChooseCashPayment [when next_event_td < (situation_entrance_td + 1W)])
			(Investor may ChooseStockPayment [when next_event_td < (situation_entrance_td + 1W)])
			(Company may AutoChooseStockPayment [when next_event_td == (situation_entrance_td + 1W)])
			(Breach_Company [after (situation_entrance_td + 1W)])
		)
	)

	(Action AutoChooseStockPayment (AllowedSubjects Company)
		(FollowingSituation
			(Company must TransferCommonStock)
			; translates to:
			; (Company may TransferCommonStock)
			; (Arbiter may InterveneOnDelay_Company)
		)
	)

	(Action ChooseStockPayment (AllowedSubjects Investor)
		(FollowingSituation
			(Company must TransferCommonStock)
		)
	)

	(Action TransferCommonStock (AllowedSubjects Company)
		(StateTransform
			(investor_Common_Stocks' += ((check $ (cash_currently_unconverted - liq_cashout)) round/ conversion_price))
		)
		(FollowingSituation
			(Company must DoLiquidityEvent)
		)
	)

	(Action ChooseCashPayment (AllowedSubjects Investor)
		(FollowingSituation
			(Company must (TransferCash_L ?1))
		)
	)

	(Action (TransferCash_L (total_investments_of_cashout_investors : Pos$)) (AllowedSubjects Company)
		(StateTransform
			(investor_percent_of_cashout_investor_investments' = (check "Fraction(0,1]" (PURCHASE_AMOUNT / total_investments_of_cashout_investors)))
			(liq_cashout' = (min
				cash_currently_unconverted
				(company_cash * investor_percent_of_cashout_investor_investments')
			))
			(investor_cash' += liq_cashout')
			; (company_cash' = (check $ (company_cash - liq_cashout')))
		)

		(FollowingSituation
			(if (liq_cashout < cash_currently_unconverted)
				(Company must TransferCommonStock)
			)

			(if (liq_cashout == cash_currently_unconverted)
				(Company must DoLiquidityEvent)
			)
		)
	)

	(Action DoLiquidityEvent (AllowedSubjects Company) (TransitionsTo Fulfilled))


	; ----------------- Dissolution Event -------------------

	(Action CommitToDissolution (AllowedSubjects Company)
		(nlg "Initiate a Dissolution Event")
		(FollowingSituation
			(Company must
				(TransferCash_D ?company_cash_at_dissolution_event
								?investor_percent_of_dissolving_investor_investments)
			)
		)
	)


	(Action (TransferCash_D (company_cash_at_dissolution_event : $)
						    (investor_percent_of_dissolving_investor_investments : "Fraction(0,1]"))
		(AllowedSubjects Company)
		(StateTransform
			(dis_cashout' = (min
				PURCHASE_AMOUNT
				(company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments)
			))
			(investor_cash' = dis_cashout')
		)

		(FollowingSituation
			(if (dis_cashout < PURCHASE_AMOUNT)
				(Company must (TransferAssets ?1 ?2))  )
			(if (dis_cashout == PURCHASE_AMOUNT)
				(Company must Dissolve)     )
		)
	)

	(Action (TransferAssets (liquidity_capitalization : PosShareCnt)
							(company_valuation : Pos$) )
		(AllowedSubjects Company)
		(StateTransform
			(set_conversion_price (liquidity_capitalization company_valuation))
			(investor_Common_Stocks' += ((check $ (PURCHASE_AMOUNT - dis_cashout)) round/ conversion_price'))
		)
		(FollowingSituation
			(Company must Dissolve)
		)
	)


	(Action Dissolve (AllowedSubjects Company) (TransitionsTo Fulfilled))
)