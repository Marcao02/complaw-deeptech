; Should these 4 terms just be natural numbers?
; `Common Stock` ⊆ `Capital Stock`
; `Preferred Stock` ⊆ `Capital Stock`

; `Common Stock` + `Preferred Stock` ≤ `Capital Stock`

; `Company Capitalization` : Nat
; `Conversion Price` := min(`Safe Price`, `Discount Price`)

; `EquityFinancingPrice` : Nat

(Roles Investor Company)

(TimeUnit d)

(SortDefinitions
	($ := (Dimensioned NonnegReal "$"))
	(Pos$ := (Dimensioned PosReal "$"))
	(ShareCnt = (Dimensioned Nat "shares"))
	(PosShareCnt = (Dimensioned PosInt "shares"))
	(SharePrice = (Ratio $ PosShareCnt))
	(PosSharePrice = (Ratio Pos$ PosShareCnt))
)

; (Macro theprice
; 	(safe_price' = (VALUATION_CAP / company_capitalization))
; 	(undiscounted_price_per_share_standard_preferred_stock' = (premoney_valuation / company_capitalization))
; 	(discount_price' = (undiscounted_price_per_share_standard_preferred_stock' * DISCOUNT_RATE))
; 	(conversion_price' = (min safe_price' discount_price'))
; )

; when there is no cap, typechecking should not even see VALUATION_CAP.
; and certainly nothing about valuation cap should appear in the NLG.
; when there is no discount, I COULD rely on partial evaluation to make discount
; stuff go away, but I could also just use the same tactic I do with cap (`Options` section+ macros).
; question: does `Options` section + macros better capture intent than making a bunch of
; parameters and write-once variables of Optional type, and then using partial eval?

(Flags
	; this section can ONLY have boolean parameters
	(HAS_CAP : Bool)
	(HAS_DISCOUNT : Bool)
)

(Macro (set_conversion_price company_capitalization company_valuation)
	(ifflag HAS_CAP (
		(ifflag HAS_DISCOUNT (
			(undiscounted_price_per_share_standard_preferred_stock' = (company_valuation / company_capitalization))
			(safe_price' = (VALUATION_CAP / company_capitalization))
			(discount_price' = (undiscounted_price_per_share_standard_preferred_stock' * DISCOUNT_RATE))
			(conversion_price' = (min safe_price' discount_price'))
			(investor_SAFE_Preferred_Stocks' += (PURCHASE_AMOUNT round/ conversion_price'))
		)
		else (
			(undiscounted_price_per_share_standard_preferred_stock' = (company_valuation / company_capitalization))
			(safe_price' = (VALUATION_CAP / company_capitalization))
			(conversion_price' = (min safe_price' undiscounted_price_per_share_standard_preferred_stock'))
			(investor_SAFE_Preferred_Stocks' += (PURCHASE_AMOUNT round/ conversion_price'))
		))
	)
	else (
		(ifflag HAS_DISCOUNT
			(undiscounted_price_per_share_standard_preferred_stock' = (company_valuation / company_capitalization))
			(conversion_price' = (undiscounted_price_per_share_standard_preferred_stock' * DISCOUNT_RATE))
			(investor_SAFE_Preferred_Stocks' += (PURCHASE_AMOUNT round/ conversion_price'))

		)
		(ifnotflag HAS_DISCOUNT
			(conversion_price' = (company_valuation / company_capitalization))
			(investor_SAFE_Preferred_Stocks' += (PURCHASE_AMOUNT round/ conversion_price'))
		)
	))

)

(ContractParams
	(PURCHASE_AMOUNT : Pos$ = 100000)
	(ifflag HAS_DISCOUNT
		(DISCOUNT_RATE : "Fraction(0,1]" = .9)
	)
	(ifflag HAS_CAP
		(VALUATION_CAP : Pos$ = 100000000)
	)
	(START_INVESTOR_COMMON_STOCKS : ShareCnt = 0)
	(START_INVESTOR_SAFE_PREFERRED_STOCKS : ShareCnt = 0)
	(START_INVESTOR_CASH : $ = 0)
)

(StateVars
	(has_cap : Bool = (VALUATION_CAP < (Pos$ VALCAP_STRICT_UPPERBOUND)))
	(has_discount : Bool = (DISCOUNT_RATE < 1))

	(writes≤1 investor_Common_Stocks : ShareCnt = START_INVESTOR_COMMON_STOCKS  )
	(writes≤1 investor_SAFE_Preferred_Stocks : ShareCnt = START_INVESTOR_SAFE_PREFERRED_STOCKS)
	(writes≤1 investor_cash : $ = START_INVESTOR_CASH )

	(cash_currently_unconverted : $ = PURCHASE_AMOUNT)

	; for Equity and Liquidity
	(ifflag HAS_CAP
		(writes≤1 safe_price : SharePrice)
	)
	(ifflag HAS_DISCOUNT
		(writes≤1 undiscounted_price_per_share_standard_preferred_stock : SharePrice)
		(writes≤1 discount_price : SharePrice)
	)
	(writes≤1 conversion_price : SharePrice)

	; for Equity Financing
	; (writes≤1 conversion_price : SharePrice)

	; for Liquidity
	; (writes≤1 liq_price : SharePrice )
	(writes≤1 liq_cashout : $ = 0 ) ; this needs to either be initialized to 0, or else changed to an Optional and some of the code rewritten a bit.
	(writes≤1 company_cash : $) ; maybe this should be an input.
	(writes≤1 investor_liq_hypothetical_shares : ShareCnt)
	(writes≤1 investor_percent_of_cashout_investor_investments : "Fraction[0,1)")

	; for Dissolution
	(writes≤1 dis_cashout : $)
)

(Invariants
	; should say IF defined
	(liq_cashout ≤ cash_currently_unconverted)
	(dis_cashout ≤ PURCHASE_AMOUNT)
)

(FormalContract "SAFE"
	; apply to all actions and states:
	; 	at-most-once ; static checker should verify that every action and state occurs at most once in any trace

	(StartSituation InvestorInvests)

	(Situation InvestorInvests
		(Next
			(Company may CommitToEquityFinancing)
			(Company may (CommitToIPO ?1 ?2 ?3)) ; IPO
			(Company may (CommitToChangeOfControl ?1 ?2 ?3 ?4))
			(Company may CommitToDissolution)
			; (Breach_Company discretionary) ; actually company can remain in current state forever.
		)
	)

	; ----------------- Equity Financing Event -------------------
	; NOTE: PRA abbreviates pro rata agreement

	(Action CommitToEquityFinancing (AllowedSubjects Company)
		(FollowingSituation
			(Next
				(Company may DeliverDocsWithPRA discretionary)
				(Company may DeliverDocsWithoutPRA discretionary)
				(Breach_Company discretionary)
			)
		)
	)

	(Action DeliverDocsWithPRA (AllowedSubjects Company)
		(FollowingSituation
			(Next (Company must (IssueSAFEPreferredStock ?1 ?2) discretionary))
		)
	)

	(Action DeliverDocsWithoutPRA (AllowedSubjects Company)
		(FollowingSituation
			(Next (Company must SubmitProRataRightsAgreementForSigning discretionary))
		)
	)

	(Action SubmitProRataRightsAgreementForSigning  (AllowedSubjects Company)
		(FollowingSituation
			; TODO: Obviously this shouldn't be a *must*, since they ought to be
			; able to send it back with proposed amendments/corrections.
			; That seems like something we should have a reusable module for.
			(Next (Investor must SignPRA discretionary))
		)
	)

	(Action SignPRA (AllowedSubjects Investor)
		(FollowingSituation
			(Next (Company must (IssueSAFEPreferredStock ?1 ?2) discretionary))
		)
	)

	(Action (IssueSAFEPreferredStock
				(company_capitalization : PosShareCnt)
				(premoney_valuation : Pos$) ) (AllowedSubjects Company)
		(StateTransform
			(set_conversion_price (company_capitalization premoney_valuation))
			(investor_SAFE_Preferred_Stocks' += (PURCHASE_AMOUNT round/ conversion_price'))
		)
		(FollowingSituation
			(Next (Company must DoEquityFinancing discretionary))  )
	)

	(Action DoEquityFinancing (AllowedSubjects Company) (TransitionsTo Fulfilled))


	; ----------------- Liquidity Event -------------------

	(Action (CommitToIPO (company_cash_at_liquidity_event : $)
						 (liquidity_capitalization : PosShareCnt)
						 (company_valuation : Pos$)
			) (AllowedSubjects Company)
		(StateTransform
			(set_conversion_price (liquidity_capitalization company_valuation))
			(investor_liq_hypothetical_shares' = (PURCHASE_AMOUNT round/ conversion_price'))
			(investor_percent_of_cashout_investor_investments' = (fraction-of-sum investor_liq_hypothetical_shares' liquidity_capitalization))
			(cash_currently_unconverted' = PURCHASE_AMOUNT)
			(company_cash' = company_cash_at_liquidity_event)
		)

		(FollowingSituation
			(Next
				; 1W is totally made up by Dustin!
				(Investor may ChooseCashPayment [when next_event_td < (situation_entrance_td + 1W)])
				(Investor may ChooseStockPayment [when next_event_td < (situation_entrance_td + 1W)])
				(Company may AutoChooseStockPayment [when next_event_td == (situation_entrance_td + 1W)])
				(Breach_Company [after situation_entrance_td + 1W])
			)
		)
	)

	(Action (CommitToChangeOfControl (company_cash_at_liquidity_event : $)
								     (liquidity_capitalization : PosShareCnt)
								     (company_valuation : Pos$)
								     (reduction_needed_to_qualify_as_usa_tax_free_reorg : $)

			) (AllowedSubjects Company)
		(StateTransform
			(set_conversion_price (liquidity_capitalization company_valuation))
			(investor_liq_hypothetical_shares' = (PURCHASE_AMOUNT round/ conversion_price'))
			(investor_percent_of_cashout_investor_investments' = (fraction-of-sum investor_liq_hypothetical_shares' liquidity_capitalization))

		 	; "In connection with a Change of Control intended to qualify as a tax-free reorganization, the Company may reduce, pro rata, the Purchase Amounts payable to the Cash-Out Investors by the amount determined by its board of directors in good faith to be advisable for such Change of Control to qualify as a tax-free reorganization for U.S. federal income tax purposes, and in such case, the Cash-Out Investors will automatically receive the number of Shares of Common Stock equal to the remaining unpaid Purchase Amount divided by the Liquidity Price."
		 	(local purchase_amount_reduction : $ = (investor_percent_of_cashout_investor_investments' * reduction_needed_to_qualify_as_usa_tax_free_reorg))
			(investor_Common_Stocks' += (purchase_amount_reduction round/ conversion_price'))
			(cash_currently_unconverted' = (check $ (PURCHASE_AMOUNT - purchase_amount_reduction)))
			(company_cash' = (check $ (company_cash_at_liquidity_event - reduction_needed_to_qualify_as_usa_tax_free_reorg)))
		)

		(FollowingSituation
			(Next
				; 1W is totally made up by Dustin!
				(Investor may ChooseCashPayment [when next_event_td < (situation_entrance_td + 1W)])
				(Investor may ChooseStockPayment [when next_event_td < (situation_entrance_td + 1W)])
				(Company may AutoChooseStockPayment [when next_event_td == (situation_entrance_td + 1W)])
				(Breach_Company [after (situation_entrance_td + 1W)])
			)
		)
	)

	(Action AutoChooseStockPayment (AllowedSubjects Company)
		(FollowingSituation (Next (Company must TransferCommonStock discretionary)))
	)

	(Action ChooseStockPayment (AllowedSubjects Investor)
		(FollowingSituation (Next (Company must TransferCommonStock discretionary)))
	)

	(Action TransferCommonStock (AllowedSubjects Company)
		(StateTransform
			(investor_Common_Stocks' += ((check $ (cash_currently_unconverted - liq_cashout)) round/ liq_price))
		)
		(FollowingSituation
			(Next (Company must DoLiquidityEvent discretionary))
		)
	)

	(Action ChooseCashPayment (AllowedSubjects Investor)
		(FollowingSituation
			(Next (Company must TransferCash_L discretionary))
		)
	)

	(Action TransferCash_L (AllowedSubjects Company)
		(StateTransform
			(liq_cashout' = (min
				cash_currently_unconverted
				(company_cash * investor_percent_of_cashout_investor_investments)
			))
			(investor_cash' += liq_cashout')
		)

		(FollowingSituation
			(Next
				(if (liq_cashout < cash_currently_unconverted)
					(Company must TransferCommonStock discretionary) )

				(if (liq_cashout == cash_currently_unconverted)
					(Company must DoLiquidityEvent discretionary)
				)
			)
		)
	)

	(Action DoLiquidityEvent (AllowedSubjects Company) (TransitionsTo Fulfilled))


	; ----------------- Dissolution Event -------------------

	(Action CommitToDissolution (AllowedSubjects Company)
		(FollowingSituation (Next (Company must
			(TransferCash_D ?company_cash_at_dissolution_event
							?investor_percent_of_dissolving_investor_investments)
			discretionary))  )
	)


	(Action (TransferCash_D (company_cash_at_dissolution_event : $)
						    (investor_percent_of_dissolving_investor_investments : "Fraction(0,1]"))
		(AllowedSubjects Company)
		(StateTransform
			(dis_cashout' = (min
				PURCHASE_AMOUNT
				(company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments)
			))
			(investor_cash' = dis_cashout')
		)

		(FollowingSituation
			; Don't need to specify that following two `must`s are verified disjoint exhaustive,
			; because that's a requirement of the semantics, and thus will be checked automatically.
			(Next
				(if (dis_cashout < PURCHASE_AMOUNT)
					(Company must (TransferAssets ?1 ?2) discretionary)  )
				(if (dis_cashout == PURCHASE_AMOUNT)
					(Company must Dissolve discretionary)     )
			)
		)
	)

	(Action (TransferAssets (liquidity_capitalization : PosShareCnt)
							(company_valuation : Pos$) )
		(AllowedSubjects Company)
		(StateTransform
			(set_conversion_price (liquidity_capitalization company_valuation))
			(liq_price' = (VALUATION_CAP / liquidity_capitalization))
			(investor_Common_Stocks' += ((check $ (PURCHASE_AMOUNT - dis_cashout)) round/ liq_price'))
		)
		(FollowingSituation  (Next (Company must Dissolve discretionary)))
	)


	(Action Dissolve (AllowedSubjects Company) (TransitionsTo Fulfilled))
)