(TimeUnit d)
(Roles Customer Vendor)

(SortDefinitions
	(Pos$ := (Dimensioned PosReal "Pos$"))
	($ := (Dimensioned NonnegReal "$"))
	(Order = (Tuple Nat Nat))
	(TDMap_Order = (TDMap (Tuple Nat Nat)))
)

(ContractParams
	(MAX_UNITS : Nat := 1000)
	(CONTRACT_LIFE : TimeDelta := 52W)
	(PRICE_PER_UNIT : $ := ($ 100))
)


(StateVars
	( writeonce order_period_ends : TimeDelta := CONTRACT_LIFE )
	( furthest_invoice_deadline : TimeDelta := 0D )

	( inconly next_order_id : Nat := 0 )
	( 2Bdelivered : TDMap_Order := (emptyTDMap) )
	( 2Binvoiced : TDMap_Order := (emptyTDMap) )
	( 2Bpaid : TDMap_Order := (emptyTDMap) )

	( nonoperative inconly units_ordered : Nat := 0 )
	( nonoperative inconly units_delivered : Nat := 0 )
	( nonoperative inconly units_invoiced : Nat := 0 )
	( nonoperative inconly total_paid : $ := 0 )
)

(Definitions
	(orderable_units = (MAX_UNITS - units_ordered))

	; either ids (approach taken here) or ordering are necessary to correctly handle the case when there are two orders on the same day for the same quantity.
	(Id = Nat)
	(Order = [Tuple Nat Id])

)

(ProseContract
	(P1 'The master agreement between Vendor and Customer is for {MAX_UNITS} printers, with a unit price of e100. The agreement is valid for one year, starting 2011-01-01.')
	(P2 'The customer may at any time order an amount of printers (with the total not exceeding the threshold of {MAX_UNITS}), after which the Vendor must deliver the goods before the maximum of (i) 14 days, or (ii) the number of ordered goods divided by 10 days.')
	(P3 'After delivering the goods, Vendor may order the Customer within 1 month, after which the goods must be paid for by Customer within 14 days.')
)
; (FOLContract THIS IS VERY EARLY WIP
; 	; deliver_deadline(d,q)
; 	; ∀x:AmountOfPrinters. Vendor needs to deliver that amount of _new_ printers. They should be distinct from any previously-delivered ;inters.
; 	; What counts as a valid printer order delivery depends on the history or at least time.
; 	(P2 'The customer may at any time order an amount of printers (with the total not exceeding the threshold of 1000), after which the ;ndor must deliver the goods before the maximum of (i) 14 days, or (ii) the number of ordered goods divided by ten days.')
; )

; ignored currently:
(VerificationDefinition (
	∀ (k : Nat) (
		(UpperBoundOnDaysBtwDeliverAndInvoice k)
		iff
		(
			∀ (d₁ : Date) (
				∀ (o : Order) (
					(Deliver o d₁)
					⇒
					(
						∃ (d₂ : Date) (
							(d₂ ≤ d₁ + k)
							∧
							(Invoice o d₂)
						)
					)
				)
			)
		)
	)
))

; ignored currently:
(Claims (
	∀ (k : Nat) (
		(UpperBoundOnDaysBtwDeliverAndInvoice k)
		⇒
		(
			∀ (d : Date) (
				∀ (n : Nat) (
					(n' = (units_delivered d))
					⇒
					(
						(total_paid (d + (k + 14D)))
						≥
						(n * PRICE_PER_UNIT)
					)
				)
			)
		)
	)
))

(FormalContract
	"Master Sales Agreement"
	(StartSituation VendorAcceptingOrders)

	(Situation VendorAcceptingOrders
		(Next
			(if (orderable_units > 0)
				(Customer may (SubmitNewOrder ?q) (when next_event_td ≤ order_period_ends) (where ((?q ≤ orderable_units) and (?q > 0))))
			)
			(if (nonempty 2Bdelivered)
				; lang note: the `where (mapHas  2Bdelivered ?order)` expression constrains permitted values of the event parameter `order`.
				; the static analyzer will check whether the constraint is solvable, and will issue a warning if not (since in this
				; case that means there's an unfulfillable obligation).
				; (Vendor quasi-responsibility (Deliver ?order) (when tdGEQ 2Bdelivered ?order next_event_td) (where (mapHas 2Bdelivered ?order)))
				(Vendor may (Deliver ?order) (when tdGEQ 2Bdelivered ?order next_event_td) (where (mapHas 2Bdelivered ?order)))
				(Breach_Vendor (when tdmapHasItemExpiredBefore 2Bdelivered next_event_td))
			)
			(if (nonempty 2Binvoiced)
				(Vendor may (EmailInvoice ?order) (when tdGEQ 2Binvoiced ?order next_event_td) (where (mapHas 2Binvoiced ?order)))
			)
			(if (nonempty 2Bpaid)
				; (Customer quasi-responsibility (PayBill ?order) (when tdGEQ 2Bpaid ?order next_event_td) (where (mapHas 2Bpaid ?order)))
				(Customer may (PayBill ?order) (when tdGEQ 2Bpaid ?order next_event_td) (where (mapHas 2Bpaid ?order)))
				(Breach_Customer (when tdmapHasItemExpiredBefore 2Bpaid next_event_td))
			)
			(if ; conditions for early end of contract
				( and (orderable_units == 0) (empty 2Bpaid) (empty 2Bdelivered))
				; then fulfilled provided all invoice deadlines are expired
				(EnterFulfilled (when next_event_td > furthest_invoice_deadline))
			)
			(if ; conditions for end of contract with units remaining
				( and (orderable_units > 0) (empty 2Bpaid) (empty 2Bdelivered) )
				; then fulfilled provided all invoice deadlines are expired, and the _order period is over
				(EnterFulfilled (when (next_event_td > furthest_invoice_deadline) and (next_event_td > order_period_ends)))
			)
		)

	)

	(Action EnterFulfilled (TransitionsTo Fulfilled))

	(Action [SubmitNewOrder (quantity : PosInt)]
		(StateTransform
			(local test : PosInt := (ceil/ quantity 10))
			(local test2 : PosInt := (max 14 (ceil/ quantity 10)))
			(local delivery_deadline : TimeDelta := (event_td + (days (max 14 (ceil/ quantity 10)))) )
			(units_ordered' += quantity)
			(2Bdelivered' := (mapSet 2Bdelivered (tuple quantity next_order_id) delivery_deadline))
			(next_order_id' += 1)
		)

		(TransitionsTo VendorAcceptingOrders)
		(AllowedSubjects Customer)
	)

	(Action [Deliver (order : Order)]
		(StateTransform
			( conjecture (mapHas 2Bdelivered order) )
			( local quantity : Nat := (tupleGet order 0) )
			( units_delivered' += quantity )
			( 2Bdelivered' := (mapDelete 2Bdelivered order) )
			( local invoice_deadline : TimeDelta := (event_td + 30D) )
			( furthest_invoice_deadline' = (max furthest_invoice_deadline invoice_deadline) )
			( 2Binvoiced' := (mapSet 2Binvoiced (tuple quantity (tupleGet order 1)) invoice_deadline ) )
		)

		(TransitionsTo VendorAcceptingOrders)
		(AllowedSubjects Vendor)
	)

	(Action [EmailInvoice (order : Order)]
		(StateTransform
			( conjecture (mapHas 2Binvoiced order) )
			( local quantity : Nat := (tupleGet order 0) )
			( units_invoiced' += quantity )
			( 2Binvoiced' :=  (mapDelete 2Binvoiced order) )
			( 2Bpaid' :=  (mapSet 2Bpaid (tuple quantity (tupleGet order 1)) (event_td + 14D) ) )
		)

		(TransitionsTo VendorAcceptingOrders)
		(AllowedSubjects Vendor)
	)

	(Action [PayBill (order : Order)]
		(StateTransform
			( conjecture (mapHas 2Bpaid order) )
			( local quantity : Nat := (tupleGet order 0) )
			( total_paid' += (quantity * PRICE_PER_UNIT) )
			( 2Bpaid' :=  (mapDelete 2Bpaid order) )
		)

		(TransitionsTo VendorAcceptingOrders)
		(AllowedSubjects Customer)
	)

)

(DotFileName 'hvitved_master_sales_agreement_full_without_future_obligations.dot')
(ImgFileName 'hvitved_master_sales_agreement_full_without_future_obligations.png')