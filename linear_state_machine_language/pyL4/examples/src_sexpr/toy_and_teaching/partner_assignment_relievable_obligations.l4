; This example demonstrates the need for a kind of obligation that can be "relieved" by another
; participant doing a permitted action. See ../L4-LSM-Formal-Semantic-Latex/L4-LSM-semantics.pdf
; We are using "obligation-options-include" for that here.

; Alice and Bob sign a contract to do an assignment as a team. The assignment has two problems,
; ProbA and ProbB. It's Alice's responsibility to get ProbA done, and Bob's responsibility to
; get ProbB done, but either, if they wish, may do the work of their partner. We're assuming that
; problem solutions can't be checked automatically (say, they're Project Euler problems), so
; comparing different solutions isn't necessary. The assignment is due on DUE_TD, and the
; partners agree that either can submit the assignment early if it's finished, and that they
; are jointly responsible for submitting it by DUE_TD.

(ContractParams
	(DUE_TD : TimeDelta = 40d)

)

(TimeUnit D)

(GlobalVars
	(probAsolved : Bool = false)
	(probBsolved : Bool = false)
)

(Roles Alice Bob)

(FormalContract
	"partner assignment demonstrating relievable obligations"
	(Situation WorkingOnAssignment
		(Next
			(Alice obligation-options-include SolveProbA (next_event_td ≤ DUE_TD))
			(Bob   obligation-options-include SolveProbB (next_event_td ≤ DUE_TD))

			(Alice may SolveProbB (next_event_td ≤ DUE_TD))
			(Bob   may SolveProbA (next_event_td ≤ DUE_TD))

			(if (probAsolved and probBsolved)
				(Alice may Submit (next_event_td ≤ DUE_TD))
				(Bob may Submit (next_event_td ≤ DUE_TD))
			)
		)
	)

	; No `AllowedRoles` SHOULD mean any role can do the action.
	(Action SolveProbA (TransitionsTo WorkingOnAssignment) (AllowedRoles Alice Bob)
		(StateTransform
			(probAsolved' = true)
		)
	)

	(Action SolveProbB (TransitionsTo WorkingOnAssignment) (AllowedRoles Alice Bob)
		(StateTransform
			(probBsolved' = true)
		)
	)

	(Action Submit (TransitionsTo Fulfilled) (AllowedRoles Alice Bob))
)