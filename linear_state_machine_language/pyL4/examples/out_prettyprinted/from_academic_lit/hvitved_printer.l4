------------------------------------------
file: from_academic_lit/hvitved_printer.l4

roles: Env, Buyer, Seller

contract params:
    CONTRACT_START : TimeDelta := 0d
    DELIVERY_DEADLINE : TimeDelta := 10d

global vars:
    nonoperative buyer_paid : Nat := 0
    nonoperative seller_refunded : Nat := 0
    writeonce delivery_date : TimeDelta

claims:
    ["MAX_TIME'", '=', '44D']
    ["MAX_SECTION_VISITS'", '=', '6']

section Awaiting_Delivery:
    Seller must Deliver (next_event_td ≤ DELIVERY_DEADLINE)

action Deliver()  transitions to AfterDeliver:
    transform:
        delivery_date := event_td
    following section:
        Buyer must Pay1stInstallment immediately

action Pay1stInstallment()  transitions to AfterPay1stInstallment:
    transform:
        prove (buyer_paid == 0)
        buyer_paid := 100
    following section:
        Buyer should Pay2ndInstallment (next_event_td ≤ (30d + delivery_date))
        Buyer may ReturnOnTime (next_event_td ≤ (14d + delivery_date))
        EnterLate2ndInstallment (next_event_td > (30d + delivery_date))

action EnterLate2ndInstallment()  transitions to Late2ndInstallment
    following section:
        Buyer must PayLateFee (next_event_td ≤ (44d + delivery_date))

action Pay2ndInstallment()  transitions to AfterPay2ndInstallment:
    transform:
        prove (buyer_paid == 100)
        buyer_paid := 200
    following section:
        Buyer may ReturnOnTime (next_event_td ≤ (14d + delivery_date))
        CompleteNormalSale (next_event_td > (14d + delivery_date))

action ReturnOnTime()  transitions to AfterReturnOnTime
    following section:
        Seller must DeliverRefund (next_event_td ≤ (7d + sectionEntrance_td))

action PayLateFee()  transitions to Fulfilled:
    transform:
        prove (buyer_paid == 100)
        buyer_paid := 220

action CompleteNormalSale()  transitions to Fulfilled

action DeliverRefund()  transitions to Fulfilled:
    transform:
        prove (seller_refunded == 0)
        prove (or (buyer_paid == 100) (buyer_paid == 200))
        seller_refunded := buyer_paid
