--------------------------------------
file: toy_and_teaching/tutorialSAFE.l4

roles: Env, Investor, Company

contract params:
    PURCHASE_AMOUNT : Pos$ := 10000.0
    VALUATION_CAP : Pos$ := 1000000.0
    DISCOUNT_RATE : Fraction(0,1] := 0.95
    START_INVESTOR_COMMON_STOCKS : ShareCnt := 0
    START_INVESTOR_SAFE_PREFERRED_STOCKS : ShareCnt := 0
    START_INVESTOR_CASH : $ := 0

state vars:
    investor_Common_Stocks : ShareCnt := START_INVESTOR_COMMON_STOCKS
    investor_SAFE_Preferred_Stocks : ShareCnt := START_INVESTOR_SAFE_PREFERRED_STOCKS
    investor_cash : $ := START_INVESTOR_CASH
    cash_currently_unconverted : $ := PURCHASE_AMOUNT
    conversion_price : SharePrice
    cap_price : SharePrice
    discount_price : SharePrice
    undiscounted_price_per_share_standard_preferred_stock : SharePrice
    liq_cashout : $ := 0
    investor_liq_hypothetical_shares : ShareCnt
    investor_percent_of_cashout_investor_investments : Fraction[0,1)

situation InvestorInvests:
    Company may CommitToEquityFinancing no_time_constraint
    Company may CommitToIPO(?1) no_time_constraint

action CommitToEquityFinancing()  transitions to AfterCommitToEquityFinancing
    following situation:
        Company must SendEquityFinancingTransactionDocsWithPRRAForSigning no_time_constraint

action SendEquityFinancingTransactionDocsWithPRRAForSigning()  transitions to AfterSendEquityFinancingTransactionDocsWithPRRAForSigning
    following situation:
        Investor must ExecuteAndDeliverTransactionDocs no_time_constraint

action ExecuteAndDeliverTransactionDocs()  transitions to AfterExecuteAndDeliverTransactionDocs
    following situation:
        Company must IssueSAFEPreferredStock(?1, ?2) no_time_constraint

action IssueSAFEPreferredStock(company_capitalization: PosShareCnt, premoney_valuation: Pos$) transitions to AfterIssueSAFEPreferredStock:
    transform:
        cap_price := (VALUATION_CAP / company_capitalization)
        undiscounted_price_per_share_standard_preferred_stock := (premoney_valuation / company_capitalization)
        discount_price := (undiscounted_price_per_share_standard_preferred_stock' * DISCOUNT_RATE)
        conversion_price := (min cap_price' discount_price')
        investor_SAFE_Preferred_Stocks := (investor_SAFE_Preferred_Stocks + (PURCHASE_AMOUNT round/ conversion_price'))
    following situation:
        Company must DoEquityFinancing no_time_constraint

action DoEquityFinancing()  transitions to Fulfilled

action CommitToIPO(liquidity_capitalization: PosShareCnt) transitions to AfterCommitToIPO:
    transform:
        cap_price := (VALUATION_CAP / liquidity_capitalization)
        investor_liq_hypothetical_shares := (PURCHASE_AMOUNT round/ cap_price')
        investor_percent_of_cashout_investor_investments := (fraction-of-sum investor_liq_hypothetical_shares' liquidity_capitalization)
        cash_currently_unconverted := PURCHASE_AMOUNT
    following situation:
        Company may AutoChooseStockPayment (next_event_td == (situation_entrance_td + 1w))
        Breach_Company (next_event_td == ((situation_entrance_td + 1w) + 1d))
        Investor may ChooseCashPayment (next_event_td < (situation_entrance_td + 1w))
        Investor may ChooseStockPayment (next_event_td < (situation_entrance_td + 1w))

action AutoChooseStockPayment()  transitions to AfterAutoChooseStockPayment
    following situation:
        Company must TransferCommonStock no_time_constraint

action ChooseStockPayment()  transitions to AfterChooseStockPayment
    following situation:
        Company must TransferCommonStock no_time_constraint

action TransferCommonStock()  transitions to AfterTransferCommonStock:
    transform:
        investor_Common_Stocks := (investor_Common_Stocks + ((check $ (cash_currently_unconverted - liq_cashout)) round/ cap_price))
    following situation:
        Company must DoLiquidityEvent no_time_constraint

action ChooseCashPayment()  transitions to AfterChooseCashPayment
    following situation:
        Company must TransferCash_L(?1) no_time_constraint

action TransferCash_L(company_cash_at_liquidity_event: Pos$) transitions to AfterTransferCash_L:
    transform:
        liq_cashout := (min cash_currently_unconverted (company_cash_at_liquidity_event * investor_percent_of_cashout_investor_investments))
        investor_cash := (investor_cash + liq_cashout')
    following situation:
        if (liq_cashout == cash_currently_unconverted):
            Company must DoLiquidityEvent no_time_constraint
        if (liq_cashout < cash_currently_unconverted):
            Company must TransferCommonStock no_time_constraint

action DoLiquidityEvent()  transitions to Fulfilled
