--------------------------------------
file: serious/SAFE_2_liq_eventtypes.l4

roles: Env, Investor, Company

contract params:
    PURCHASE_AMOUNT : PosReal := 100000
    VALUATION_CAP : PosReal := inf
    DISCOUNT_RATE : (0,1] := 1
    START_INVESTOR_COMMON_STOCKS : Nat := 0
    START_INVESTOR_SAFE_PREFERRED_STOCKS : Nat := 0
    START_INVESTOR_CASH : NonnegReal := 0

global vars:
    has_cap : Bool := (VALUATION_CAP < inf)
    has_discount : Bool := (DISCOUNT_RATE < 1)
    writeAtMostOnce investor_Common_Stocks : Nat := START_INVESTOR_COMMON_STOCKS
    writeAtMostOnce investor_SAFE_Preferred_Stocks : Nat := START_INVESTOR_SAFE_PREFERRED_STOCKS
    writeAtMostOnce investor_cash : NonnegReal := START_INVESTOR_CASH
    cash_currently_unconverted : NonnegReal := PURCHASE_AMOUNT
    writeAtMostOnce safe_price : PosReal/PosInt
    writeAtMostOnce discount_price : PosReal/PosInt
    writeAtMostOnce conversion_price : PosReal/PosInt
    writeAtMostOnce initial_price_per_share_standard_preferred_stock : PosReal/PosInt
    writeAtMostOnce liq_price : PosReal/PosInt
    writeAtMostOnce liq_cashout : NonnegReal := 0
    writeAtMostOnce company_cash : NonnegReal
    writeAtMostOnce investor_liq_hypothetical_shares : Nat
    writeAtMostOnce investor_percent_of_cashout_investor_investments : (0,1]
    writeAtMostOnce dis_cashout : NonnegReal

section InvestorInvests:
    Company obligation-options-include CommitToEquityFinancing no_time_constraint
    Company obligation-options-include CommitToLiquidityEvent(?1, ?2) no_time_constraint
    Company obligation-options-include CommitToLiquidityEventWithCoCTaxFreeReorg(?1, ?2, ?3) no_time_constraint
    Company obligation-options-include CommitToDissolution no_time_constraint

action CommitToEquityFinancing()  transitions to AfterCommitToEquityFinancing
    following section:
        Company obligation-options-include DeliverDocsWithPRA discretionary
        Company obligation-options-include DeliverDocsWithoutPRA discretionary

action DeliverDocsWithPRA()  transitions to AfterDeliverDocsWithPRA
    following section:
        Company must IssueSAFEPreferredStock(?1, ?2) discretionary

action DeliverDocsWithoutPRA()  transitions to AfterDeliverDocsWithoutPRA
    following section:
        Company must SubmitProRataRightsAgreementForSigning discretionary

action SubmitProRataRightsAgreementForSigning()  transitions to AfterSubmitProRataRightsAgreementForSigning
    following section:
        Investor must SignPRA discretionary

action SignPRA()  transitions to AfterSignPRA
    following section:
        Company must IssueSAFEPreferredStock(?1, ?2) discretionary

action IssueSAFEPreferredStock(company_capitalization: PosInt, premoney_valuation: PosReal) transitions to AfterIssueSAFEPreferredStock:
    transform:
        safe_price := (VALUATION_CAP / company_capitalization)
        initial_price_per_share_standard_preferred_stock := (premoney_valuation / company_capitalization)
        discount_price := (initial_price_per_share_standard_preferred_stock * DISCOUNT_RATE)
        conversion_price := (min safe_price discount_price)
        investor_SAFE_Preferred_Stocks := (investor_SAFE_Preferred_Stocks + (round (PURCHASE_AMOUNT / conversion_price)))
    following section:
        Company must DoEquityFinancing discretionary

action DoEquityFinancing()  transitions to Fulfilled

action CommitToLiquidityEvent(company_cash_at_liquidity_event: NonnegReal, liquidity_capitalization: PosInt) transitions to AfterCommitToLiquidityEvent:
    transform:
        liq_price := (VALUATION_CAP / liquidity_capitalization)
        investor_liq_hypothetical_shares := (round (PURCHASE_AMOUNT / liq_price))
        investor_percent_of_cashout_investor_investments := (cast (0,1] (investor_liq_hypothetical_shares / (liquidity_capitalization + investor_liq_hypothetical_shares)))
        cash_currently_unconverted := PURCHASE_AMOUNT
        company_cash := company_cash_at_liquidity_event
    following section:
        Investor may ChooseCashPayment discretionary
        Investor may ChooseStockPayment discretionary
        Company should AutoChooseStockPayment discretionary

action CommitToLiquidityEventWithCoCTaxFreeReorg(company_cash_at_liquidity_event: NonnegReal, liquidity_capitalization: PosInt, reduction_needed_to_qualify_as_usa_tax_free_reorg: NonnegReal) transitions to AfterCommitToLiquidityEventWithCoCTaxFreeReorg:
    transform:
        liq_price := (VALUATION_CAP / liquidity_capitalization)
        investor_liq_hypothetical_shares := (round (PURCHASE_AMOUNT / liq_price))
        investor_percent_of_cashout_investor_investments := (cast (0,1] (investor_liq_hypothetical_shares / (liquidity_capitalization + investor_liq_hypothetical_shares)))
        purchase_amount_reduction : NonnegReal := (investor_percent_of_cashout_investor_investments * reduction_needed_to_qualify_as_usa_tax_free_reorg)
        investor_Common_Stocks := (investor_Common_Stocks + (round (purchase_amount_reduction / liq_price)))
        cash_currently_unconverted := (cast NonnegReal (PURCHASE_AMOUNT - purchase_amount_reduction))
        company_cash := (cast NonnegReal (company_cash_at_liquidity_event - reduction_needed_to_qualify_as_usa_tax_free_reorg))
    following section:
        Investor may ChooseCashPayment (next_event_td < (sectionEntrance_td + 1w))
        Investor may ChooseStockPayment (next_event_td < (sectionEntrance_td + 1w))
        Company obligation-options-include AutoChooseStockPayment (next_event_td == (sectionEntrance_td + 1w))

action AutoChooseStockPayment()  transitions to AfterAutoChooseStockPayment
    following section:
        Company must TransferCommonStock discretionary

action ChooseStockPayment()  transitions to AfterChooseStockPayment
    following section:
        Company must TransferCommonStock discretionary

action TransferCommonStock()  transitions to AfterTransferCommonStock:
    transform:
        investor_Common_Stocks := (investor_Common_Stocks + (round ((cast NonnegReal (cash_currently_unconverted - liq_cashout)) / liq_price)))
    following section:
        Company must DoLiquidityEvent discretionary

action ChooseCashPayment()  transitions to AfterChooseCashPayment
    following section:
        Company must TransferCash_L discretionary

action TransferCash_L()  transitions to AfterTransferCash_L:
    transform:
        if (cash_currently_unconverted ≤ (company_cash * investor_percent_of_cashout_investor_investments)):
            liq_cashout := cash_currently_unconverted
        else:
            liq_cashout := (round (company_cash * investor_percent_of_cashout_investor_investments))

        investor_cash := (investor_cash + liq_cashout)
    following section:
        if (liq_cashout < cash_currently_unconverted):
            Company must TransferCommonStock discretionary
        if (liq_cashout == cash_currently_unconverted):
            Company must DoLiquidityEvent discretionary

action DoLiquidityEvent()  transitions to Fulfilled

action CommitToDissolution()  transitions to AfterCommitToDissolution
    following section:
        Company must TransferCash_D(?company_cash_at_dissolution_event, ?investor_percent_of_dissolving_investor_investments) discretionary

action TransferCash_D(company_cash_at_dissolution_event: NonnegReal, investor_percent_of_dissolving_investor_investments: %) transitions to AfterTransferCash_D:
    transform:
        if (PURCHASE_AMOUNT ≤ (company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments)):
            dis_cashout := PURCHASE_AMOUNT
        else:
            dis_cashout := (round (company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments))

        investor_cash := dis_cashout
    following section:
        if (dis_cashout < PURCHASE_AMOUNT):
            Company must TransferAssets(?1) discretionary
        if (dis_cashout == PURCHASE_AMOUNT):
            Company must Dissolve discretionary

action TransferAssets(liquidity_capitalization: PosInt) transitions to AfterTransferAssets:
    transform:
        liq_price := (VALUATION_CAP / liquidity_capitalization)
        investor_Common_Stocks := (investor_Common_Stocks + (round ((cast NonnegReal (PURCHASE_AMOUNT - dis_cashout)) / liq_price)))
    following section:
        Company must Dissolve discretionary

action Dissolve()  transitions to Fulfilled
