---------------------
file: serious/KISS.l4

roles: Env, Investor, Company

contract params:
    PURCHASE_AMOUNT : Pos$ := 100000
    TIME_TILL_MATURITY : TimeDelta := (days 547)
    VALUATION_CAP : Pos$ := 1000000000000
    DISCOUNT_RATE : Fraction(0,1] := 1
    INTEREST_RATE : Fraction[0,1] := 0.04
    DEBT_VERSION : Bool := True
    START_INVESTOR_COMMON_STOCK : ShareCnt := 0
    START_INVESTOR_PREFERRED_STOCK : ShareCnt := 0
    START_INVESTOR_SERIES_SEED_PREFERRED_STOCK : ShareCnt := 0
    START_INVESTOR_CASH : $ := 0
    START_COMPANY_CASH : $ := 0

state vars:
    investor_cash : $ := START_INVESTOR_CASH
    investor_Common_Stock : ShareCnt := START_INVESTOR_COMMON_STOCK
    investor_PreferredStock : ShareCnt := START_INVESTOR_PREFERRED_STOCK
    investor_SeriesSeedPreferredStock : ShareCnt := START_INVESTOR_SERIES_SEED_PREFERRED_STOCK
    company_cash : $ := START_COMPANY_CASH
    writeatmostonce pay_interest_in_cash : Bool := False

situation InvestorInvests:
    Company relievable-responsibility CommitToAcquisition(?1) (next_event_td < (situationEntrance_td + TIME_TILL_MATURITY))
    Company relievable-responsibility CommitToFinancing(?1) (next_event_td < (situationEntrance_td + TIME_TILL_MATURITY))
    ReachMaturity (next_event_td ≥ (situationEntrance_td + TIME_TILL_MATURITY))

action CommitToFinancing(qualifying_round_new_money: $) transitions to AfterCommitToFinancing:
    pre: (qualifying_round_new_money ≥ (units $ 1000000))
    following situation:
        Company must NotifyInvestorOfNextEquityFinancingTerms no_time_constraint

action NotifyInvestorOfNextEquityFinancingTerms()  transitions to After_NotifyInvestorOfNextEquityFinancingTerms

situation After_NotifyInvestorOfNextEquityFinancingTerms:
    Investor may choose_cash_interest_repayment no_time_constraint
    Company relievable-responsibility CloseEquityFinancingSale(?1, ?2) (next_event_td > (situationEntrance_td + 5d))

action choose_cash_interest_repayment()  non-transitioning:
    transform:
        pay_interest_in_cash := True

action CloseEquityFinancingSale(qualifying_round_price: SharePrice, company_capitalization: PosShareCnt) transitions to Fulfilled:
    transform:
        if pay_interest_in_cash:
            if (event_td ≤ 365d):
                company_cash := (check $ (company_cash - (min (check Pos$ ((PURCHASE_AMOUNT + ((PURCHASE_AMOUNT * INTEREST_RATE) * (event_td / 365d))) - PURCHASE_AMOUNT)) company_cash)))
            else:
                company_cash := (check $ (company_cash - (min (check Pos$ (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) + (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) * INTEREST_RATE) * ((trust PosTimeDelta (event_td - 365d)) / 365d))) - PURCHASE_AMOUNT)) company_cash)))

            if (event_td ≤ 365d):
                investor_cash := (investor_cash + (min (check Pos$ ((PURCHASE_AMOUNT + ((PURCHASE_AMOUNT * INTEREST_RATE) * (event_td / 365d))) - PURCHASE_AMOUNT)) company_cash))
            else:
                investor_cash := (investor_cash + (min (check Pos$ (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) + (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) * INTEREST_RATE) * ((trust PosTimeDelta (event_td - 365d)) / 365d))) - PURCHASE_AMOUNT)) company_cash))

            investor_PreferredStock := (investor_PreferredStock + (PURCHASE_AMOUNT round/ (min (qualifying_round_price * DISCOUNT_RATE) (VALUATION_CAP / company_capitalization))))
        else:
            if (event_td ≤ 365d):
                investor_PreferredStock := (investor_PreferredStock + ((PURCHASE_AMOUNT + (check Pos$ ((PURCHASE_AMOUNT + ((PURCHASE_AMOUNT * INTEREST_RATE) * (event_td / 365d))) - PURCHASE_AMOUNT))) round/ (min (qualifying_round_price * DISCOUNT_RATE) (VALUATION_CAP / company_capitalization))))
            else:
                investor_PreferredStock := (investor_PreferredStock + ((PURCHASE_AMOUNT + (check Pos$ (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) + (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) * INTEREST_RATE) * ((trust PosTimeDelta (event_td - 365d)) / 365d))) - PURCHASE_AMOUNT))) round/ (min (qualifying_round_price * DISCOUNT_RATE) (VALUATION_CAP / company_capitalization))))



action CommitToAcquisition(company_capitalization: PosShareCnt) transitions to AfterCommitToAcquisition
    following situation:
        Investor relievable-responsibility ChooseMultipleRepayment discretionary
        Investor relievable-responsibility ChooseConvertToCommonStock(company_capitalization) discretionary

action ChooseMultipleRepayment()  transitions to Fulfilled:
    transform:
        if (event_td ≤ 365d):
            company_cash := (check $ (company_cash - (min ((check Pos$ ((PURCHASE_AMOUNT + ((PURCHASE_AMOUNT * INTEREST_RATE) * (event_td / 365d))) - PURCHASE_AMOUNT)) + (2 * PURCHASE_AMOUNT)) company_cash)))
        else:
            company_cash := (check $ (company_cash - (min ((check Pos$ (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) + (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) * INTEREST_RATE) * ((trust PosTimeDelta (event_td - 365d)) / 365d))) - PURCHASE_AMOUNT)) + (2 * PURCHASE_AMOUNT)) company_cash)))

        if (event_td ≤ 365d):
            investor_cash := (investor_cash + (min ((check Pos$ ((PURCHASE_AMOUNT + ((PURCHASE_AMOUNT * INTEREST_RATE) * (event_td / 365d))) - PURCHASE_AMOUNT)) + (2 * PURCHASE_AMOUNT)) company_cash))
        else:
            investor_cash := (investor_cash + (min ((check Pos$ (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) + (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) * INTEREST_RATE) * ((trust PosTimeDelta (event_td - 365d)) / 365d))) - PURCHASE_AMOUNT)) + (2 * PURCHASE_AMOUNT)) company_cash))


action ChooseConvertToCommonStock(company_capitalization: PosShareCnt) transitions to Fulfilled:
    transform:
        investor_Common_Stock := (investor_Common_Stock + (PURCHASE_AMOUNT round/ (VALUATION_CAP / company_capitalization)))

action ReachMaturity()  transitions to AfterReachMaturity
    following situation:
        if DEBT_VERSION:
            Investor relievable-responsibility ChooseConversionToSeriesSeedPreferredStock(?1) discretionary
        Investor relievable-responsibility ChooseMaturityRepayment discretionary

action ChooseMaturityRepayment()  transitions to Fulfilled:
    transform:
        if (event_td ≤ 365d):
            company_cash := (check $ (company_cash - (min ((check Pos$ ((PURCHASE_AMOUNT + ((PURCHASE_AMOUNT * INTEREST_RATE) * (event_td / 365d))) - PURCHASE_AMOUNT)) + PURCHASE_AMOUNT) company_cash)))
        else:
            company_cash := (check $ (company_cash - (min ((check Pos$ (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) + (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) * INTEREST_RATE) * ((trust PosTimeDelta (event_td - 365d)) / 365d))) - PURCHASE_AMOUNT)) + PURCHASE_AMOUNT) company_cash)))

        if (event_td ≤ 365d):
            investor_cash := (investor_cash + (min ((check Pos$ ((PURCHASE_AMOUNT + ((PURCHASE_AMOUNT * INTEREST_RATE) * (event_td / 365d))) - PURCHASE_AMOUNT)) + PURCHASE_AMOUNT) company_cash))
        else:
            investor_cash := (investor_cash + (min ((check Pos$ (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) + (((PURCHASE_AMOUNT * (1 + INTEREST_RATE)) * INTEREST_RATE) * ((trust PosTimeDelta (event_td - 365d)) / 365d))) - PURCHASE_AMOUNT)) + PURCHASE_AMOUNT) company_cash))


action ChooseConversionToSeriesSeedPreferredStock(company_capitalization: PosShareCnt) transitions to Fulfilled:
    transform:
        investor_SeriesSeedPreferredStock := (investor_SeriesSeedPreferredStock + (PURCHASE_AMOUNT round/ (VALUATION_CAP / company_capitalization)))
