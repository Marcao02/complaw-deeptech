---------------------
file: serious/KISS.l4

roles: Env, Investor, Company

contract params:
    PURCHASE_AMOUNT : Pos$ := 100000
    TIME_TILL_MATURITY : TimeDelta := (days 547)
    VALUATION_CAP : Pos$ := 1000000000000
    DISCOUNT_RATE : Fraction(0,1] := 1
    INTEREST_RATE : Fraction[0,1] := 0.04
    DEBT_VERSION : Bool := True
    START_INVESTOR_COMMON_STOCK : ShareCnt := 0
    START_INVESTOR_PREFERRED_STOCK : ShareCnt := 0
    START_INVESTOR_SERIES_SEED_PREFERRED_STOCK : ShareCnt := 0
    START_INVESTOR_CASH : $ := 0
    START_COMPANY_CASH : $ := 0

global vars:
    investor_cash : $ := START_INVESTOR_CASH
    investor_Common_Stock : ShareCnt := START_INVESTOR_COMMON_STOCK
    investor_PreferredStock : ShareCnt := START_INVESTOR_PREFERRED_STOCK
    investor_SeriesSeedPreferredStock : ShareCnt := START_INVESTOR_SERIES_SEED_PREFERRED_STOCK
    company_cash : $ := START_COMPANY_CASH
    writeatmostonce pay_interest_in_cash : Bool := False

section InvestorInvests:
    Company obligation-options-include CommitToAcquisition(?1) (next_event_td < (sectionEntrance_td + TIME_TILL_MATURITY))
    Company obligation-options-include CommitToFinancing(?1) (next_event_td < (sectionEntrance_td + TIME_TILL_MATURITY))
    ReachMaturity (next_event_td ≥ (sectionEntrance_td + TIME_TILL_MATURITY))

action CommitToFinancing(qualifying_round_new_money: $) transitions to AfterCommitToFinancing:
    pre: (qualifying_round_new_money ≥ (cast $ 1000000))
    following section:
        Company must NotifyInvestorOfNextEquityFinancingTerms no_time_constraint

action NotifyInvestorOfNextEquityFinancingTerms()  transitions to After_NotifyInvestorOfNextEquityFinancingTerms

section After_NotifyInvestorOfNextEquityFinancingTerms:
    Investor may choose_cash_interest_repayment no_time_constraint
    Company obligation-options-include CloseEquityFinancingSale(?1, ?2) (next_event_td > (sectionEntrance_td + 5d))

action choose_cash_interest_repayment()  non-transitioning:
    transform:
        pay_interest_in_cash := True

action CloseEquityFinancingSale(qualifying_round_price: SharePrice, company_capitalization: PosShareCnt) transitions to Fulfilled:
    transform:
        cap_price : SharePrice := (VALUATION_CAP / company_capitalization)
        discount_price : SharePrice := (qualifying_round_price * DISCOUNT_RATE)
        conversion_price : SharePrice := (min discount_price cap_price)
        if pay_interest_in_cash:
            change : $ := (ifthenelse (event_td ≤ 365d) (cast Pos$ (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 0)) + (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 0)) * INTEREST_RATE) * (event_td / 365d))) - PURCHASE_AMOUNT)) (cast Pos$ (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 1)) + (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 1)) * INTEREST_RATE) * ((cast PosTimeDelta (event_td - 365d)) / 365d))) - PURCHASE_AMOUNT)))
            company_cash := (cast $ (company_cash - change))
            investor_cash := (investor_cash + change)
            investor_PreferredStock := (investor_PreferredStock + (PURCHASE_AMOUNT round/ conversion_price))
        else:
            accrued_interest : $ := (ifthenelse (event_td ≤ 365d) (cast Pos$ (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 0)) + (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 0)) * INTEREST_RATE) * (event_td / 365d))) - PURCHASE_AMOUNT)) (cast Pos$ (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 1)) + (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 1)) * INTEREST_RATE) * ((cast PosTimeDelta (event_td - 365d)) / 365d))) - PURCHASE_AMOUNT)))
            investor_PreferredStock := (investor_PreferredStock + ((PURCHASE_AMOUNT + accrued_interest) round/ conversion_price))


action CommitToAcquisition(company_capitalization: PosShareCnt) transitions to AfterCommitToAcquisition
    following section:
        Investor obligation-options-include ChooseMultipleRepayment discretionary
        Investor obligation-options-include ChooseConvertToCommonStock(company_capitalization) discretionary

action ChooseMultipleRepayment()  transitions to Fulfilled:
    transform:
        change : $ := ((ifthenelse (event_td ≤ 365d) (cast Pos$ (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 0)) + (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 0)) * INTEREST_RATE) * (event_td / 365d))) - PURCHASE_AMOUNT)) (cast Pos$ (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 1)) + (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 1)) * INTEREST_RATE) * ((cast PosTimeDelta (event_td - 365d)) / 365d))) - PURCHASE_AMOUNT))) + (2 * PURCHASE_AMOUNT))
        company_cash := (cast $ (company_cash - change))
        investor_cash := (investor_cash + change)

action ChooseConvertToCommonStock(company_capitalization: PosShareCnt) transitions to Fulfilled:
    transform:
        cap_price : SharePrice := (VALUATION_CAP / company_capitalization)
        investor_Common_Stock := (investor_Common_Stock + (PURCHASE_AMOUNT round/ cap_price))

action ReachMaturity()  transitions to AfterReachMaturity
    following section:
        if DEBT_VERSION:
            Investor obligation-options-include ChooseConversionToSeriesSeedPreferredStock(?1) discretionary
        Investor obligation-options-include ChooseMaturityRepayment discretionary

action ChooseMaturityRepayment()  transitions to Fulfilled:
    transform:
        change : $ := ((ifthenelse (event_td ≤ 365d) (cast Pos$ (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 0)) + (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 0)) * INTEREST_RATE) * (event_td / 365d))) - PURCHASE_AMOUNT)) (cast Pos$ (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 1)) + (((PURCHASE_AMOUNT * ((1 + INTEREST_RATE) ^ 1)) * INTEREST_RATE) * ((cast PosTimeDelta (event_td - 365d)) / 365d))) - PURCHASE_AMOUNT))) + PURCHASE_AMOUNT)
        company_cash := (cast $ (company_cash - change))
        investor_cash := (investor_cash + change)

action ChooseConversionToSeriesSeedPreferredStock(company_capitalization: PosShareCnt) transitions to Fulfilled:
    transform:
        cap_price : SharePrice := (VALUATION_CAP / company_capitalization)
        investor_SeriesSeedPreferredStock := (investor_SeriesSeedPreferredStock + (PURCHASE_AMOUNT round/ cap_price))
