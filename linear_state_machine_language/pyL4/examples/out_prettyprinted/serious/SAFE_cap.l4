-------------------------
file: serious/SAFE_cap.l4

roles: Env, Investor, Company

contract params:
    PURCHASE_AMOUNT : Pos$ := 100000
    VALUATION_CAP : Pos$ := 10000000
    START_INVESTOR_COMMON_STOCKS : ShareCnt := 0
    START_INVESTOR_SAFE_PREFERRED_STOCKS : ShareCnt := 0
    START_INVESTOR_CASH : $ := 0

state vars:
    writes≤1 investor_Common_Stocks : ShareCnt := START_INVESTOR_COMMON_STOCKS
    writes≤1 investor_SAFE_Preferred_Stocks : ShareCnt := START_INVESTOR_SAFE_PREFERRED_STOCKS
    writes≤1 investor_cash : $ := START_INVESTOR_CASH
    cash_currently_unconverted : $ := PURCHASE_AMOUNT
    writes≤1 safe_price : SharePrice
    writes≤1 undiscounted_price_per_share_standard_preferred_stock : SharePrice
    writes≤1 conversion_price : SharePrice
    writes≤1 liq_cashout : $ := 0
    writes≤1 company_cash : $
    writes≤1 investor_liq_hypothetical_shares : ShareCnt
    writes≤1 investor_percent_of_cashout_investor_investments : Fraction[0,1)
    writes≤1 dis_cashout : $

situation InvestorInvests:
    Company may CommitToChangeOfControl(?1, ?2, ?3, ?4) no_time_constraint
    Company may CommitToDissolution no_time_constraint
    Company may CommitToEquityFinancing no_time_constraint
    Company may CommitToIPO(?1, ?2, ?3) no_time_constraint

action CommitToEquityFinancing()  transitions to AfterCommitToEquityFinancing
    following situation:
        Company may DeliverDocsWithPRA discretionary
        Company may DeliverDocsWithoutPRA discretionary
        Breach_Company discretionary

action DeliverDocsWithPRA()  transitions to AfterDeliverDocsWithPRA
    following situation:
        Company must IssueSAFEPreferredStock(?1, ?2) discretionary

action DeliverDocsWithoutPRA()  transitions to AfterDeliverDocsWithoutPRA
    following situation:
        Company must SubmitProRataRightsAgreementForSigning discretionary

action SubmitProRataRightsAgreementForSigning()  transitions to AfterSubmitProRataRightsAgreementForSigning
    following situation:
        Investor must SignPRA discretionary

action SignPRA()  transitions to AfterSignPRA
    following situation:
        Company must IssueSAFEPreferredStock(?1, ?2) discretionary

action IssueSAFEPreferredStock(company_capitalization: PosShareCnt, premoney_valuation: Pos$) transitions to AfterIssueSAFEPreferredStock:
    transform:
        if True:
            undiscounted_price_per_share_standard_preferred_stock := (premoney_valuation / company_capitalization)
            safe_price := (VALUATION_CAP / company_capitalization)
            conversion_price := (min safe_price' undiscounted_price_per_share_standard_preferred_stock')

        investor_SAFE_Preferred_Stocks := (investor_SAFE_Preferred_Stocks + (PURCHASE_AMOUNT round/ conversion_price'))
    following situation:
        Company must DoEquityFinancing discretionary

action DoEquityFinancing()  transitions to Fulfilled

action CommitToIPO(company_cash_at_liquidity_event: $, liquidity_capitalization: PosShareCnt, company_valuation: Pos$) transitions to AfterCommitToIPO:
    transform:
        if True:
            undiscounted_price_per_share_standard_preferred_stock := (company_valuation / liquidity_capitalization)
            safe_price := (VALUATION_CAP / liquidity_capitalization)
            conversion_price := (min safe_price' undiscounted_price_per_share_standard_preferred_stock')

        investor_liq_hypothetical_shares := (PURCHASE_AMOUNT round/ conversion_price')
        investor_percent_of_cashout_investor_investments := (fraction-of-sum investor_liq_hypothetical_shares' liquidity_capitalization)
        cash_currently_unconverted := PURCHASE_AMOUNT
        company_cash := company_cash_at_liquidity_event
    following situation:
        Company may AutoChooseStockPayment (next_event_td == (situation_entrance_td + 1w))
        Breach_Company (next_event_td == ((situation_entrance_td + 1w) + 1d))
        Investor may ChooseCashPayment (next_event_td < (situation_entrance_td + 1w))
        Investor may ChooseStockPayment (next_event_td < (situation_entrance_td + 1w))

action CommitToChangeOfControl(company_cash_at_liquidity_event: $, liquidity_capitalization: PosShareCnt, company_valuation: Pos$, reduction_needed_to_qualify_as_usa_tax_free_reorg: $) transitions to AfterCommitToChangeOfControl:
    transform:
        if True:
            undiscounted_price_per_share_standard_preferred_stock := (company_valuation / liquidity_capitalization)
            safe_price := (VALUATION_CAP / liquidity_capitalization)
            conversion_price := (min safe_price' undiscounted_price_per_share_standard_preferred_stock')

        investor_liq_hypothetical_shares := (PURCHASE_AMOUNT round/ conversion_price')
        investor_percent_of_cashout_investor_investments := (fraction-of-sum investor_liq_hypothetical_shares' liquidity_capitalization)
        investor_Common_Stocks := (investor_Common_Stocks + ((investor_percent_of_cashout_investor_investments' * reduction_needed_to_qualify_as_usa_tax_free_reorg) round/ conversion_price'))
        cash_currently_unconverted := (check $ (PURCHASE_AMOUNT - (investor_percent_of_cashout_investor_investments' * reduction_needed_to_qualify_as_usa_tax_free_reorg)))
        company_cash := (check $ (company_cash_at_liquidity_event - reduction_needed_to_qualify_as_usa_tax_free_reorg))
    following situation:
        Company may AutoChooseStockPayment (next_event_td == (situation_entrance_td + 1w))
        Breach_Company (next_event_td == ((situation_entrance_td + 1w) + 1d))
        Investor may ChooseCashPayment (next_event_td < (situation_entrance_td + 1w))
        Investor may ChooseStockPayment (next_event_td < (situation_entrance_td + 1w))

action AutoChooseStockPayment()  transitions to AfterAutoChooseStockPayment
    following situation:
        Company must TransferCommonStock discretionary

action ChooseStockPayment()  transitions to AfterChooseStockPayment
    following situation:
        Company must TransferCommonStock discretionary

action TransferCommonStock()  transitions to AfterTransferCommonStock:
    transform:
        investor_Common_Stocks := (investor_Common_Stocks + ((check $ (cash_currently_unconverted - liq_cashout)) round/ conversion_price))
    following situation:
        Company must DoLiquidityEvent discretionary

action ChooseCashPayment()  transitions to AfterChooseCashPayment
    following situation:
        Company must TransferCash_L discretionary

action TransferCash_L()  transitions to AfterTransferCash_L:
    transform:
        liq_cashout := (min cash_currently_unconverted (company_cash * investor_percent_of_cashout_investor_investments))
        investor_cash := (investor_cash + liq_cashout')
    following situation:
        if (liq_cashout == cash_currently_unconverted):
            Company must DoLiquidityEvent discretionary
        if (liq_cashout < cash_currently_unconverted):
            Company must TransferCommonStock discretionary

action DoLiquidityEvent()  transitions to Fulfilled

action CommitToDissolution()  transitions to AfterCommitToDissolution
    following situation:
        Company must TransferCash_D(?company_cash_at_dissolution_event, ?investor_percent_of_dissolving_investor_investments) discretionary

action TransferCash_D(company_cash_at_dissolution_event: $, investor_percent_of_dissolving_investor_investments: Fraction(0,1]) transitions to AfterTransferCash_D:
    transform:
        dis_cashout := (min PURCHASE_AMOUNT (company_cash_at_dissolution_event * investor_percent_of_dissolving_investor_investments))
        investor_cash := dis_cashout'
    following situation:
        if (dis_cashout == PURCHASE_AMOUNT):
            Company must Dissolve discretionary
        if (dis_cashout < PURCHASE_AMOUNT):
            Company must TransferAssets(?1, ?2) discretionary

action TransferAssets(liquidity_capitalization: PosShareCnt, company_valuation: Pos$) transitions to AfterTransferAssets:
    transform:
        if True:
            undiscounted_price_per_share_standard_preferred_stock := (company_valuation / liquidity_capitalization)
            safe_price := (VALUATION_CAP / liquidity_capitalization)
            conversion_price := (min safe_price' undiscounted_price_per_share_standard_preferred_stock')

        investor_Common_Stocks := (investor_Common_Stocks + ((check $ (PURCHASE_AMOUNT - dis_cashout)) round/ conversion_price'))
    following situation:
        Company must Dissolve discretionary

action Dissolve()  transitions to Fulfilled
