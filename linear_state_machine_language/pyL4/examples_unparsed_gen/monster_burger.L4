------
file: 

contract params:
    MB_PRICE : Price := $50
    TIME_TO_EAT_BURGER : Duration := 1H
    MAX_SERVE_DELAY : Duration := 20M
    MAX_CLAIM_VERIFICATION_DELAY : Duration := 10M
    MAX_REFUND_DELAY : Duration := 10M

global vars:
    writeonce challenge_endlimit_timestamp : Timestamp
    amount_owing : Price
    amount_paid : Price

section MonsterBurgerUncooked:
    Challenger must RequestCookMB (by 8pm)

action-compound RequestCookMB:
    transform:
        amount_owing := @MB_PRICE
    next:
        Restaurant should ServeMB (strictly-within @MAX_SERVE_DELAY)
        PromptServeGuaranteeViolated

action-compound ServeMB:
    transform:
        challenge_endlimit_timestamp := (@TIME_TO_EAT_BURGER afterEntrance)
    next:
        EatingMB

section-compound PromptServeGuaranteeViolated:
    transform:
        amount_owing := 0
    next:
        Fulfilled

section-compound EatingMB:
    next:
        Challenger may AnnounceMBFinished (strictly-before challenge_endlimit_timestamp)
        Restaurant should CheckFinishedClaim (nonstrictly-after-and-within challenge_endlimit_timestamp @MAX_CLAIM_VERIFICATION_DELAY)
        LateCheck (at (after @MAX_CLAIM_VERIFICATION_DELAY challenge_endlimit_timestamp))

action-compound AnnounceMBFinished:
    next:
        Restaurant should CheckFinishedClaim
        LateCheck (after-exactly @MAX_CLAIM_VERIFICATION_DELAY)

section-compound LateCheck:
    transform:
        amount_owing := 0
    next:
        Fulfilled

action-compound CheckFinishedClaim:
    next:
        Restaurant weakly-must VerifyFinishedClaim immediately
        Restaurant weakly-must RejectFinishedClaim immediately

action-compound RejectFinishedClaim:
    next:
        if (currentTimeNoLaterThan? challenge_endlimit_timestamp):
            EatingMB
        if (currentTimeAfter? challenge_endlimit_timestamp):
            Customer must PayForMB immediately

action-compound PayForMB:
    transform:
        amount_paid := amount_owing
        amount_owing := 0
    next:
        Fulfilled

action-compound VerifyFinishedClaim:
    transform:
        amount_owing := 0
    next:
        Fulfilled
