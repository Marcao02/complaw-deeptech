(GlobalVars 	
	(writeonce amount_invested : $ = 0)	
	(inconly investor_SAFE_Preferred_Stocks : ℕ = 0)
	(inconly investor_Common_Stocks : ℕ = 0)
	(writeAtMostOnce liquidity_price : $ = None)	
	(writeAtMostOnce li_cashout : $ = 0)	
	; later maybe: subtypes of ℕ for units, e.g. Preferred Stocks in this case
)

(Actors Investor Company)

(ContractParams
	(PURCHASE_AMOUNT : $)
	(VALUATION_CAP : $)
	(DISCOUNT_PERCENT : %) ; must be < 100
)

(OracleVars
	; for Equity Financing
	(writeAtMostOnce COMPANY_CAPITALIZATION : ℕ)

	; for Liquidity
	(writeAtMostOnce LIQUIDITY_CAPITALIZATION : ℕ)	
	(writeAtMostOnce INVESTOR_PERCENT_OF_CASHOUT_INVESTOR_INVESTMENTS : %)
	(writeAtMostOnce COMPANY_CASH_AT_LIQUIDITY_EVENT : $)

	; for Dissolution
	(writeAtMostOnce COMPANY_CASH_AT_DISSOLUTION_EVENT : $)
	(writeAtMostOnce INVESTOR_PERCENT_OF_DISSOLVING_INVESTOR_INVESTMENTS : %)
)

(DefinedParams
	(DiscountRate = 100 - DISCOUNT_PERCENT)
	(LiquidityPrice = VALUATION_CAP / LIQUIDITY_CAPITALIZATION)
)

; (ProseContract  )	

(FormalContract	
	"SAFE"		
	(StartState InvestorInvests)
	(EventStates
		(InvestorInvests()  
			(Entrance
				(amount_invested := PURCHASE_AMOUNT)
			)	
			(ActorEvents
				(Company may
					(Dissolution() nodeadline)
					(LiquidityEvent() nodeadline)
					(LiquidityEventWithChangeOfControl() nodeadline)
					(EquityFinancing() nodeadline)
				)		
			)
		)		

		(Dissolution()
			(ActorEvents
				(Company must
					(DissolutionTransferCash() within discretionary )
				)
			)
		)
	
		(DissolutionTransferCash()  
			(Entrance
				(dis_cashout := (
					ifthenelse (PURCHASE_AMOUNT ≤ (COMPANY_CASH_AT_DISSOLUTION_EVENT * INVESTOR_PERCENT_OF_DISSOLVING_INVESTOR_INVESTMENTS))
					 PURCHASE_AMOUNT
					 (COMPANY_CASH_AT_DISSOLUTION_EVENT * INVESTOR_PERCENT_OF_DISSOLVING_INVESTOR_INVESTMENTS)
				))
				(investor_cash += dis_cashout)
				(company_cash -= dis_cashout)
			)	
			(ActorEvents
				(Company mustif (dis_cashout < PURCHASE_AMOUNT)
					(DissolutionTransferAssets() within discretionary)
				)
			)
			(Fallbacks
				(Fulfilled() if (dis_cashout == PURCHASE_AMOUNT) )
			)
		)


		(DissolutionTransferAssets() 
			(Entrance
				(liquidity_price := (VALUATION_CAP / LIQUIDITY_CAPITALIZATION))
				(investor_Common_Stocks += ((PURCHASE_AMOUNT - li_cashout) / liquidity_price))
			)
			(Fallbacks
				(Fulfilled() )
			)
		)







		(LiquidityEvent()  
			(ActorEvents
				(Investor may
					(LiquidityChooseCashPayment() within discretionary)
					(LiquidityChooseStockPayment() within discretionary)
				)
			)		
			(Fallbacks
				(LiquidityChooseStockPayment())
			)
		)

		(LiquidityChooseStockPayment() 
			(ActorEvents
				(Company must
					(LiquidityTransferCommonStock() within discretionary)
				)
			)
		)

		(LiquidityTransferCommonStock() 
			(Entrance
				(liquidity_price := (VALUATION_CAP / LIQUIDITY_CAPITALIZATION))
				(investor_Common_Stocks += ((PURCHASE_AMOUNT - li_cashout) / liquidity_price))
			)			
			(Fallbacks
				(Fulfilled() )
			)
		)

		(LiquidityChooseCashPayment() 
			(ActorEvents
				(Company must
					(LiquidityTransferCash() within discretionary )				
				)
			)
		)

		(LiquidityTransferCash()  
			(Entrance 
				(li_cashout := (
					ifthenelse (PURCHASE_AMOUNT ≤ (COMPANY_CASH_AT_LIQUIDITY_EVENT * INVESTOR_PERCENT_OF_CASHOUT_INVESTOR_INVESTMENTS))
					PURCHASE_AMOUNT
					(COMPANY_CASH_AT_LIQUIDITY_EVENT * INVESTOR_PERCENT_OF_CASHOUT_INVESTOR_INVESTMENTS)
				))
				(investor_cash += li_cashout)
				(company_cash -= li_cashout)
			)
			(ActorEvents
				(Company mustif (li_cashout < PURCHASE_AMOUNT)
					(LiquidityTransferCommonStock() within discretionary )
				)
			)
			(Fallbacks
				; TODO: should add assertion that li_cashout == PURCHASE_AMOUNT
				(Fulfilled())
			)
		)
	






		(LiquidityEventWithChangeOfControl()  

		)











		(EquityFinancing() 
			(Description "Equity Financing Event begins")
			(ActorEvents
				(Company must
					(EquityDeliverDocsWithProRataAgreement() within discretionary)
					(EquityDeliverDocsWithoutProRataAgreement() within discretionary)
				)
			)
		)		

		(EquityDeliverDocsWithProRataAgreement()  
			(ActorEvents
				(Company must
					(EquityIssueSAFEPreferredStock() within discretionary)
				)
			)
		)

		(EquityDeliverDocsWithoutProRataAgreement()  
			(ActorEvents
				(Company must
					(EquitySubmitProRataRightsAgreementForSigning() within discretionary)	
				)
			)
		)

		(EquitySubmitProRataRightsAgreementForSigning()  
			(ActorEvents
				(Investor must
					; TODO: obviously this shouldn't be a *must*. they ought to be able to send it back with proposed amendments/corrections
					(EquitySignProRataAgreement() within discretionary)	
				)
			)			
		)

		(EquitySignProRataAgreement()  
			(ActorEvents
				(Company must
					(EquityIssueSAFEPreferredStock() within discretionary)
				)
			)
		)			


		(EquityIssueSAFEPreferredStock()  
			(Entrance
				( investor_SAFE_Preferred_Stocks += (PURCHASE_AMOUNT / COMPANY_CAPITALIZATION) )
			)
			(Fallbacks
				(Fulfilled())
			)
		)

		
	)
)

(DotFileName 'SAFE.dot')
(ImgFileName 'SAFE.png')