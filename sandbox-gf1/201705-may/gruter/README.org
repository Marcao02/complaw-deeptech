#+TITLE: The Gruter Experiment

This is an L4 prototype developed at and after the Gruter Institute conference at Olympic Village, 2017.

This code demonstrates correct use of GF's module system.

* L4 Core

The ~Gruter~ modules contain the L4 core.

| Gruter       | abstract              |
| GruterI      | incomplete concrete   |
| LexGruter    | interface             |
| LexGruterEng | instance of LexGruter |
| GruterIEng   | concrete              |

** Core Dependencies

Distinct components of the L4 core have their own modules.

Gruter inherits from Deontic and Party.

** ~Deontic~

| Deontic       | abstract  |
| DeonticI      | functor   |
| LexDeontic    | interface |
| LexDeonticEng | instance  |

** ~Party~

| Party       | abstract  |
| PartyI      | functor   |
| LexParty    | interface |
| LexPartyEng | instance  |

* Extending Gruter for your own application

The ~Gruter~ modules need to be extended with the specifics of your application. They won't do anything on their own.

Two example applications are provided.

The ~London~ modules extend the L4 core with minimal application-specific code.

| London       | abstract  | declares application-specific instances of Gruter abstract categories                                    |
| LondonI      | functor   | defines the party. defines the when/kind/act/exp values phrasally, usually employing intermediate values |
| LexLondon    | interface | declares the types of the expected intermediate values                                                   |
| LexLondonEng | instance  | resolve the intermediate values to specific English-language lexical elements                            |

The ~Particular~ modules extend the L4 core with a little more application-specific code.

Structurally, ~London~ and ~Particular~ are the same.

It may be useful to compare the two examples to triangulate an appreciation of the system.
