-- http://bnfc.digitalgrammars.com/
-- lbnf format

layout toplevel;
layout ":--";

MkL4Module . L4Module ::= [Section] ;

separator Section ";" ;

MkSectionImport.   Section ::= SectionImport ;
MkSectionContract. Section ::= SectionContract ;
MkSectionParties.  Section ::= SectionParties ;
MkSectionDefine.   Section ::= SectionDefine ;
MkSectionTypes.    Section ::= SectionTypes ;
--                | SectionClause

MkHeaderImport. SectionImport ::= "IMPORT" Lingam "{" [BodyImport] "}" ;
separator BodyImport ";";
MkBodyImport. BodyImport ::= UIdent "(" [ImportSym] ")";

separator ImportSym "," ;
MkImportSymI. ImportSym ::= Ident;
MkImportSymU. ImportSym ::= UIdent;

-- list next, generative marker
MkLingam. Lingam ::= ":--" ;

MkHeaderContract. SectionContract ::= "CONTRACT" Lingam "{" [DefContract] "}" ;
separator DefContract ";" ;
MkDefContract. DefContract ::= RegularDef ;

MkHeaderParties. SectionParties ::= "PARTIES" Lingam "{" [TypedDefAlias] "}" ;
separator TypedDefAlias ";" ;
MkTypedDefAlias. TypedDefAlias ::= Ident ":" UIdent AliasParen "=" RBT;

MkRBTblock. RBT ::= RecordBlock;
MkRBTterm.  RBT ::= [Term];

MkAliasParen. AliasParen ::= "(" [AliasBody] ")" ;
separator AliasBody "";
MkAliasBodyString. AliasBody ::= RegularString;
MkAliasBodySymbol. AliasBody ::= RegularSymbol;

MkHeaderDefine.      SectionDefine ::= DefineHeader Lingam "{" [TypedDefAlias] "}";
MkHeaderDefineText.  DefineHeader ::= "DEFINE";
MkHeaderDefineText2. DefineHeader ::= "DEFINITIONS";

MkHeaderTypes. SectionTypes ::= "TYPES" Lingam "{" [DefType] "}" ;
separator DefType ";" ;
MkDefType. DefType ::= UIdent "=" [SumType] ;
separator SumType "|" ;
MkSumTypeUIdent. SumType ::= UIdent ;
MkSumTypeRecord. SumType ::= RecordBlock ;



MkRecordBlockExtension. RecordBlock ::= BasePrefix RecordBlock;
MkRecordBlock.          RecordBlock ::= "{" [RegularDef] "}" ;
MkRecordBasePrefix.      BasePrefix ::= [RecordBase] "**";

separator RecordBase "," ;
MkRecordBase. RecordBase ::= UIdent ;

separator RegularDef "," ;
MkRegularDefTerm.  RegularDef ::= Ident "=" Term;
MkRegularString.   RegularString ::= String ;
MkRegularSymbol.   RegularSymbol ::= UIdent ;

token UIdent (upper (letter | digit | '_')*) ;

separator nonempty Term "" ;
MkTermUIdent.  Term ::= UIdent;
MkTermIdent.   Term ::= Ident;
MkTermString.  Term ::= String;
MkTermFloat.   Term ::= Double;
MkTermInteger. Term ::= Integer;
MkTermParens.  Term ::= "(" Term ")" ;

comment "--";
comment "//" ;
comment "/*" "*/" ;
comment "{-" "-}" ;
