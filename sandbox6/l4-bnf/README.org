#+TITLE: BNF spec for L4, version 2017-06-27

* Some Examples

            LABEL   labelName: labelText
       SUBJECT TO   rule-spec
  NOTWITHSTANDING   rule-spec
             WHEN   predicate
            PARTY   p
            SHALL   [NOT] action-spec(params)
         PROVIDED   rule-spec(params)
     DUE / BEFORE   deadline REMAINING Z
            HENCE   clause-spec | FULFILLED
             LEST   clause-spec | BREACH

* PCSL inspiration

See Hvitved12Phd.pdf logical page 170

#+BEGIN_SRC text
-- (contract template)

Tmp ::= name : ContractName
        type : RecordName
        description : String
        Def ... Def
        contract = C

Def ::= val Var = E                                   -- (value definition)
      | clause ClauseName (Var : T,..., Var : T )     -- (clause template)
                          <Var : T,..., Var : T> = C

C ::= fulfilment                                      -- no obligation
    | <E> RecordName(F,...,F)                         -- obligation
          where E due D remaining Var then C
    | when RecordName(F,...,F)                        -- external choice
           where E due D remaining Var then C else C
    | if E then C else C                              -- internal choice
    | C and C                                         -- conjunction
    | C or C                                          -- disjunction
    | ClauseName(E,...,E)<E,...,E>                    -- instantiation

F ::= FieldName Var                                   -- field binder

R ::= RecordName Var                                  -- record binder

T ::= TypeVar                                         -- type variable
    | ()                                              -- unit type
    | Bool | Int | Real | String                      -- type constants
    | Timestamp | Duration
    | RecordName                                      -- record type
    | [T]                                             -- list type
    | <T>                                             -- entity type
    | T -> T                                          -- function type

E ::= Var                                             -- variable
| BaseValue                                           -- base value
| RecordName {FieldName = E, ... , FieldName = E }    -- record expression
| [E,...,E]                                           -- list expression
| \ Var -> E                                          -- function abstraction
| E binop E                                           -- binary expression
| E.FieldName                                         -- field projection
| E{FieldName = E}                                    -- field update
| if E then E else E                                  -- conditional
| case E of R -> E | · · · | R -> E                   -- record type casing

D ::= after E within E                                -- deadline expression

binop ::= * | / | + | <*> | <+> | # | === | =< | ^    -- binary operators

#+END_SRC

** PCSL example

examples are available in the POETS repository

* BNF Spec

