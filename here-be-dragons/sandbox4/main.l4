#!/bin/cat

// another stab at a program in a wholly invented language
// we work through the YC SAFE full case Kata.

// we're giving l4 javascript syntax for now, mostly because i have good editor support for js syntax

import * as l4 from "l4.core"  // l4 core functions which cover deontic, temporal, etc modals
import * as l4.corp from "l4.corp"  // we know how to deal with corporations which have shareholders
import * as l4.us_de_en from "l4.jurisdiction.usde"   // this gets us localizations for currency and regulation
import * as l4.sg_en    from "l4.jurisdiction.sg_en"  // this gets us localizations for currency and regulation

// conception clause
var main = new l4.Contract({ parties: [ { name: "Alice"},
										{ name: "Bob"  } ] ,
							 conditionsPrecedent: [],
							 effectiveDate: today() } );
main.addClause({ type: "obligation",
				 name: "payTen",
				 responsibleParty: ["Alice"], // Party p is responsible that (but need not be in charge of)
				 actionType: "payment",       // an action of kind k
				 condition: function(         // satisfying condition e takes place.
				   contract, // in theory you get the contract in "this" but let's make it explicit
				   event) {  // we pass the event to the condition
				   return (event.sender        == "Alice" && // the condition must be phrased as an event trace
						   event.recipient     == "Bob"   &&
						   event.moneyAmount   == 10      &&
						   event.moneyCurrency == "dollars") },
				 after: this.effectiveDate(), // This action should happen after n1 time units,
				 within: null,                // but within n2 time units thereafter.
				 then: this.fulfilled(),      // If these requirements are satisfied,
				                      // then the continuation clause c determines any further obligations.
				 lest: null});        // if it is not fulfilled, then reparation clauses arise.

// okay. so this is one way to phrase it. here's another, which is isomorphic but closer to english.
Alice ("Alice") contracts with Bob ("Bob")
  effective upon signature
  that
    Alice must
      pay to Bob
  	  the amount 10 dollars
	  after the effective date
  then
    the contract is fulfilled

// note that indentation is quite relaxed
Alice ("Alice") contracts with Bob ("Bob")
  effective upon signature
  that Alice must pay to Bob
         the amount 10 dollars
         after the effective date
  then the contract is fulfilled

// some defaults exist
Alice ("Alice") contracts with Bob ("Bob")
  that Alice must
         pay to Bob
         the amount 10 dollars

// now, the contract as stated would fail if Alice pays Bob $11.
// in the real world, what people mean is
Alice ("Alice") contracts with Bob ("Bob")
  that Alice must
         pay to Bob
         an amount >= 10 dollars
         after the effective date
  then
    if PaymentAmount > 10
       let Overpayment = PaymentAmount - 10
	   in
	   Bob must
	     pay to Alice
         the amount Overpayment
		 after the last event date
	   then the contract is fulfilled
	   lest
	     let Interest = Overpayment * 0.1
		     Total = Overpayment + Interest
		 in
	     Bob must
	       pay to Alice
		   the amount >= Total
		 then
		   if PaymentAmount == Total
		   then the contract is fulfilled
	 GAVE UP HERE

// so what have we learned?
// a basic payment contract actually needs to deal with several scenarios:
//   timely overpayment
//   timely underpayment
//   late overpayment
//   late underpayment
//   timely exact payment
//     late exact payment
// and our payments model checker needs to test that the contract is complete and defined for each scenario.
// the software can remedially insert defaults for common conventions.
// the contract can be recursive -- an overpayment can flip the contract in the other direction,
// while an underpayment can continue the contract in the same direction, just with a new obligation.






