#+TITLE: HOWTO install Poets using Nix

* Motivation

Legalese is experimenting with developing a language inspired by, and compilable to, CSL, a Contract Specification Language, described in Tom Hvitved's [[https://bitbucket.org/jespera/poets/src/c0ee7194ce57d2ad6ca8894c8a44e88e546d5f4a/doc/Hvitved%2520-%2520A%2520trace-based%2520model%2520for%2520multiparty%2520contracts.pdf?at=default&fileviewer=file-view-default][A Trace-based Model for Multiparty Contracts]].

[[https://bitbucket.org/jespera/poets/src][Poets]] implements CSL with some minor differences to the original paper. (The implementation uses ~when~ syntax for external choice instead of ~if~.)

We are interested in running CSL independent of the Poets server system; to that end, we have written a [[https://en.wikipedia.org/wiki/Read%25E2%2580%2593eval%25E2%2580%2593print_loop][REPL]] wrapper for the CSL library.

The CSL library was developed a few years ago, when [[https://www.haskell.org/ghc/][GHC 7.4.2]] was current. [[http://stephenking.com/darktower/glossary.html][The world has moved on]]: it is not possible to compile CSL using modern GHC and Haskell libraries.

* Insight

Fortunately, the Nix package manager offers [[https://en.wikipedia.org/wiki/San_Junipero][a portal to the past]], so we can [[http://www.imdb.com/title/tt0107290/][revive]] CSL.

* Platform

These instructions have been tested on Mac OS X Sierra.

* Install Nix

Install [[https://nixos.org/nix/][Nix]] -- not Nixpkgs, not NixOS, just Nix.

Nix expects you to ~.~ source a ~profile~ which, /inter alia/, adds a PATH.

* Tell Nix about Poets

Create a folder ~$HOME/.nixpkgs/~ and copy or ln ~config.nix~ into it.

You will find ~config.nix~ in the same folder as this README.

If you already have nixpkgs installed and an existing ~config.nix~ file, merge them by hand.

Also copy ~poets.cabal~ into ~.nixpkgs/~.

* Tell Nix to install Poets

This incantation should install all the Poets prerequisites, including ghc 7.4.2, and Poets itself.

#+BEGIN_SRC
~/.nixpkgs% nix-env -f '<nixpkgs>' -iA legalesePoets
#+END_SRC

As they say, "this should work!" Do not be daunted by network or server download errors; just retry.

Expect it to take some time.

* Run GHC 7.4.2

You should now have a 7.4.2 ghci in your ~.nix-profile/bin~:

#+BEGIN_SRC
% ls -l .nix-profile/bin/ghci
lrwxr-xr-x  1 mengwong  wheel  76 Jan  1  1970 .nix-profile/bin/ghci -> /nix/store/26bh9lj4w8bfs25gy9y7iiklnj1l0h8h-ghc-7.4.2-with-packages/bin/ghci

% ls -l .nix-profile/bin/ghci-7.4.2
lrwxr-xr-x  1 mengwong  wheel  82 Jan  1  1970 .nix-profile/bin/ghci-7.4.2 -> /nix/store/26bh9lj4w8bfs25gy9y7iiklnj1l0h8h-ghc-7.4.2-with-packages/bin
/ghci-7.4.2
#+END_SRC

If you followed the Nix install instructions, that directory should be in your ~$PATH~, so you should be able to run ~ghci-7.4.2~. 

If you don't have it in your path, you will have to run it as ~.nix-profile/bin/ghci-7.4.2~.

* Load Poets

Running ghci 7.4.2, are you able to import Poets?

#+BEGIN_SRC
% ~/.nix-profile/bin/ghci-7.4.2

GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.

Prelude> import Poets.Contracts.Base
Prelude Poets.Contracts.Base> 
Leaving GHCi.
#+END_SRC

* Now you can build the REPL!

#+BEGIN_SRC
src/legalese-compiler% ls -s bin/REPL.hs
24 bin/REPL.hs

src/legalese-compiler% ~/.nix-profile/bin/ghc-7.4.2 bin/REPL.hs
[1 of 1] Compiling Main             ( REPL.hs, REPL.o )
Linking REPL ...

20170106-16:26:04 mengwong@venice2:~/non-db-src/l/compiler% ls -s bin/REPL
57168 bin/REPL*

src/legalese-compiler% bin/REPL
Missing: -c contract.csl -o ontology.pce

Usage: REPL -c contract.csl -o ontology.pce

#+END_SRC

Yeah, the binary is pretty huge.

* Over to you!

That error message means the REPL is working.

You should have a CSL and a PCE ready to play with. Use the REPL to play with them.

* If you want to play Poets developer 

Fork poets on Github. Edit the ~poets~ derivation in ~config.nix~ to point to your forked repo. You now have enough rope to hang yourself.

* TODO show a local way to dev and rev Poets without wasting network

how do we tell Nix to ~src~ a local directory?

* Background Reading

- http://www.cse.chalmers.se/~bernardy/nix.html
- http://stackoverflow.com/questions/27215302/use-cabal2nix-to-create-local-nix-environment-for-packages-that-arent-in-nixpkg
- http://wiki.ocharles.org.uk/Nix
- http://nixos.org/nixpkgs/manual/#users-guide-to-the-haskell-infrastructure
- http://www.pavelkogan.com/2014/07/09/haskell-development-with-nix/#fn:1

