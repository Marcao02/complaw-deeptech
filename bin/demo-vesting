#!/usr/local/bin/node

// just some freestyling to illustrate how to formalize a vesting schedule to an arbitrary level of complexity.

// in the future if this becomes a production library then use something like http://joose.it/ to reduce the linecount
// maybe by then google apps script will support https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming

// this may also need to be able to solve linear equations ... if the unrestricted is a multiple of months, but the whole F grant has to fit into a certain max

function Vesting(params) {
  var that = this;
  "unrestricted restricted period term cliff vestingAtPeriod acceleration"
	.split(/ +/).map(function(attr){ if(params[attr] != undefined){
	  that[attr] = params[attr];
	}});
  // cliff: [         ] means no cliff
  // cliff: [ 6       ] means 6 month cliff, followed by monthly vesting
  // cliff: [ 6, 12   ] means 6 month cliff, then another 1 year cliff, followed by monthly vesting
  // cliff: [ { periods: 6,    multiple: 1 },      is the canonical version of the immediately above
  //          { periods: 12,   mulitple: 1 } ]
  // cliff: [ { periods: 6,    multiple: 2 },      means during the 6 month cliff they will get twice as many shares as usual
  
  if (this.cliff == undefined) { this.cliff = [] }
  if (this.cliff.constructor.name == "Number") { this.cliff = [this.cliff] }
  if (this.cliff.constructor.name == "Object") { this.cliff = [this.cliff] }
  // canonicalize into fully qualified object notation
  for (var cliff_i = 0; cliff_i < this.cliff.length; cliff_i++) {
	if (this.cliff[cliff_i].constructor.name == "Number") {
	  this.cliff[cliff_i] = { periods: this.cliff[cliff_i], multiple: 1 }
	}
  }
}

Vesting.prototype.totalUnits = function() {
  var totalUnits = 0;
  var totalPeriods = 0;
  for (var cliff_i = 0; cliff_i < this.cliff.length; cliff_i++) {
	totalUnits   += this.cliff[cliff_i].periods * this.cliff[cliff_i].multiple;
	totalPeriods += this.cliff[cliff_i].periods;
  }
  totalUnits += this.term - totalPeriods;
  return totalUnits;
}

// in the normal linear domain, how many shares vest each period-unit?
// a period-unit is what would normally vest every month if the cliff didn't have something funny going on due to period multiples within cliffs.
Vesting.prototype.perUnit = function() {
  return Math.floor(this.restricted / this.totalUnits());
};

// the default vesting formula has a single cliff
Vesting.prototype.vestingAtPeriod = function(p) {
  if (p == 0)                        { return this.unrestricted }
  if (this.cliff.length) {
	var cumulativePeriods = 0;
	for (var cliff_i = 0; cliff_i < this.cliff.length; cliff_i++) {
	  if (cumulativePeriods < p && p  < this.cliff[cliff_i].periods) { return 0 }
	  if (cumulativePeriods < p && p == this.cliff[cliff_i].periods) { return this.cliff[cliff_i].periods * this.cliff[cliff_i].multiple * this.perUnit() }
	  cumulativePeriods += this.cliff[cliff_i].periods;
	}
  }
  if (p <= this.term)                { return this.perUnit() }
};

// if we had a formal-to-natural language compiler we could move this logic into that. instead we have to do it the ugly way, crawling all over the output.
Vesting.prototype.toLang = function(lang) {
  var toreturn = [];
  var initialVesting = this.vestingAtPeriod(0);
  if (lang == "en_US" || lang=="en_UK" || lang=="en") {
	if (initialVesting) {
	  toreturn.push(this.unrestricted + " unrestricted shares, equivalent to ordinary shares, shall be granted immediately upon commencement.");
	}
	if (this.restricted) {
	  toreturn.push(this.restricted + " shares shall be restricted at time of commencement.");
	}
	if (this.cliff.length) {
	  var inCliffs = [];
	  for (var cliff_i = 0; cliff_i < this.cliff.length; cliff_i++) {
		var inCliff = "";
		if (cliff_i == 0) { inCliff = "Initially, " } else { inCliff = "Following which, " }
		inCliff += "for a period of " + this.cliff[cliff_i].periods + " " + this.period + "s, no shares shall vest, until the end of that period, at which time " +
		  this.cliff[cliff_i].periods * this.cliff[cliff_i].multiple * this.perUnit() + " shares shall vest at once";
		inCliffs.push(inCliff);
	  }
	  toreturn.push(inCliffs.join(";\n") + ".");
	}
	// "after which"
	if (this.perUnit()) {
	  toreturn.push((this.cliff.length ? "Subsequently, " : "")
					+ this.perUnit() + " restricted shares shall become unrestricted every " + this.period + " until no restricted shares remain.");
	}
	return toreturn.join("\n");
  } else {
	console.log("Vesting.toLang("+lang+"): language is unsupported");
	return null;
  }
};

var v1 = new Vesting({
  unrestricted: 0,
  restricted: 1000,
  period: "month",
  term: 36,
  cliff: [6, { periods:6, multiple:2}],
});

var v2 = new Vesting({
  unrestricted: 0,
  restricted: 1000,
  period: "quarter",
  term: 12,
  cliff: 2,
});

var v3 = new Vesting({
  period: "month",
  restricted: 1000,
  term: 48,
  formula: function() {
	console.log("overridden this.totalShares = " + this.totalShares);
  },
});

console.log(v1.toLang("en")+"\n");
console.log(v2.toLang("en")+"\n");
console.log(v3.toLang("en")+"\n");

